;
; File generated by cc65 v 2.18 - Git dc4142e
;
	.fopt		compiler,"cc65 v 2.18 - Git dc4142e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "main.c", 97705, 1609633469
	.dbg		file, "LIB/neslib.h", 9361, 1608948989
	.dbg		file, "LIB/nesdoug.h", 6862, 1608948989
	.dbg		file, "BG/game_area.h", 4039, 1608948989
	.dbg		file, "BG/vs_boot_screen.h", 1310, 1609574098
	.dbg		file, "BG/vs_settings_difficulty.h", 2412, 1608948989
	.dbg		file, "BG/vs_settings_mode.h", 2458, 1608948989
	.dbg		file, "BG/vs_title_screen.h", 2787, 1608948989
	.dbg		file, "BG/high_score_screen.h", 2203, 1608948989
	.dbg		file, "BG/sound_screen.h", 1418, 1608948989
	.dbg		file, "BG/ty_screen.h", 1872, 1608948989
	.dbg		file, "../include/stdlib.h", 6147, 1608948990
	.dbg		file, "main.h", 26294, 1609633533
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_col", "00", extern, "_pal_col"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_spr", "00", extern, "_oam_spr"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "oam_set", "00", extern, "_oam_set"
	.dbg		sym, "music_play", "00", extern, "_music_play"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "sfx_play", "00", extern, "_sfx_play"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "bank_bg", "00", extern, "_bank_bg"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_put", "00", extern, "_vram_put"
	.dbg		sym, "vram_write", "00", extern, "_vram_write"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "memfill", "00", extern, "_memfill"
	.dbg		sym, "delay", "00", extern, "_delay"
	.dbg		sym, "set_vram_buffer", "00", extern, "_set_vram_buffer"
	.dbg		sym, "one_vram_buffer", "00", extern, "_one_vram_buffer"
	.dbg		sym, "multi_vram_buffer_horz", "00", extern, "_multi_vram_buffer_horz"
	.dbg		sym, "multi_vram_buffer_vert", "00", extern, "_multi_vram_buffer_vert"
	.dbg		sym, "clear_vram_buffer", "00", extern, "_clear_vram_buffer"
	.dbg		sym, "get_pad_new", "00", extern, "_get_pad_new"
	.dbg		sym, "get_ppu_addr", "00", extern, "_get_ppu_addr"
	.dbg		sym, "rand", "00", extern, "_rand"
	.dbg		sym, "srand", "00", extern, "_srand"
	.dbg		sym, "CREDITS_QUEUED", "00", extern, "_CREDITS_QUEUED"
	.dbg		sym, "PPU_VERSION", "00", extern, "_PPU_VERSION"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_set
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.import		_vram_unrle
	.import		_memcpy
	.import		_memfill
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_multi_vram_buffer_vert
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_ppu_addr
	.export		_game_area
	.export		_boot_screen
	.export		_vs_settings_difficulty
	.export		_vs_settings_mode
	.export		_title_screen
	.export		_high_score_screen
	.export		_sound_screen
	.export		_ty_screen
	.import		_rand
	.import		_srand
	.export		_tick_count
	.export		_tick_count_large
	.export		_ticks_in_state_large
	.export		_hit_reaction_remaining
	.export		_attack_queue_ticks_remaining
	.export		_attack_delay
	.export		_pad_all
	.export		_pad_all_new
	.export		_pad1
	.export		_pad1_new
	.export		_pad2
	.export		_pad2_new
	.export		_scroll_y
	.export		_cur_option
	.export		_attack_style
	.export		_temp_table
	.export		_last_initials
	.export		_high_scores_vs_initials
	.export		_high_scores_vs_value
	.export		_cur_initial_index
	.export		_high_scores
	.export		_music_on
	.export		_sfx_on
	.export		_block_style
	.export		_starting_levels
	.export		_saved_starting_level
	.export		_hard_drops_on
	.export		_hard_drop_hold_remaining
	.export		_hard_drop_tap_required
	.export		_state
	.export		_konami_code
	.export		_cur_konami_index
	.export		_cur_block
	.export		_fall_rate
	.export		_cur_level
	.export		_cur_level_vs_setting
	.export		_high_score_entry_placement
	.export		_vs_code
	.export		_vs_code_index
	.export		_def_line
	.export		_def_square
	.export		_def_L_rev
	.export		_def_L
	.export		_def_S
	.export		_def_Z
	.export		_def_T
	.export		_cluster_defs_classic
	.export		_cur_rot
	.export		_srs_non_line_rotate_lookup
	.export		_srs_line_rotate_lookup
	.export		_cur_cluster
	.export		_next_cluster
	.export		_attack_row_status
	.export		_cluster_sprites
	.export		_cluster_offsets
	.export		_horz_button_delay
	.export		_button_delay
	.export		_require_new_down_button
	.export		_fall_frame_counter
	.export		_lines_cleared_one
	.export		_lines_cleared_ten
	.export		_lines_cleared_hundred
	.export		_cur_score
	.export		_cur_nt
	.export		_off_nt
	.export		_hit
	.export		_temp_fall_frame_counter
	.export		_old_x
	.export		_id
	.export		_min_y
	.export		_max_y
	.export		_in_x
	.export		_in_y
	.export		_in_id
	.export		_local_start_x
	.export		_local_start_y
	.export		_local_ix
	.export		_local_iy
	.export		_local_t
	.export		_local_bit
	.export		_local_row_status
	.export		_OOB_TOP
	.export		_test_song
	.export		_test_song_active
	.export		_test_sound
	.export		_cur_gameplay_music
	.export		_attack_queued
	.export		_tentacle_offsets
	.export		_garbage_types
	.export		_cur_garbage_type
	.export		_delay_lock_remaining
	.export		_delay_lock_skip
	.export		_delay_spawn_remaining
	.export		_spawn_queued
	.export		_row_to_clear
	.export		_kill_row_cur
	.export		_kill_row_queued
	.export		_start_delay_remaining
	.export		_board_lookup_y
	.export		_mask
	.export		_address
	.export		_time_of_day
	.export		_temp_pal
	.export		_lines_cleared_y
	.export		_line_score_mod
	.import		_CREDITS_QUEUED
	.import		_PPU_VERSION
	.export		_game_board
	.export		_game_board_temp
	.export		_empty_row
	.export		_full_row
	.export		_full_col
	.export		_option_empty
	.export		_option_icon
	.export		_copy_board_data
	.export		_palette_bg
	.export		_palette_sp
	.export		_palette_bg_options
	.export		_palette_vs_options
	.export		_palette_vs_highscore_table
	.export		_palette_vs_options_inactive
	.export		_palette_vs_options_active
	.export		_palette_vs_options_skulls
	.export		_palette_bg_list
	.export		_fall_rates_per_level
	.export		_attack_style_strings
	.export		_off_on_string
	.export		_block_style_strings
	.export		_hard_drop_types
	.export		_auto_forward_leaderboards
	.export		_free_play_enabled
	.export		_game_cost
	.export		_option_state
	.export		_prev_4016
	.export		_maintenance_counter
	.export		_screen_shake_remaining
	.export		_text_insert_1_coin
	.export		_text_insert_2_coin
	.export		_text_free_play
	.export		_text_push_start
	.export		_clear_push_start
	.export		_credits_remaining
	.export		_metasprite_vs_logo
	.export		_attract_gameplay_enabled
	.export		_metasprite_tentacle_title
	.export		_draw_menu_sprites
	.export		_draw_gameplay_sprites
	.export		_movement
	.export		_set_block
	.export		_set_block_nt
	.export		_put_cur_cluster
	.export		_is_cluster_colliding
	.export		_morton_compact_one_by_one
	.export		_spawn_new_cluster
	.export		_rotate_cur_cluster
	.export		_check_tspin
	.export		_is_tspin
	.export		_is_last_rotate
	.export		_rotate_srs
	.export		_go_to_state
	.export		_inc_lines_cleared
	.export		_display_lines_cleared
	.export		_display_score
	.export		_display_level
	.export		_clear_rows_in_data
	.export		_reveal_empty_rows_to_nt
	.export		_try_collapse_empty_row_data
	.export		_copy_board_to_nt
	.export		_add_block_at_bottom
	.export		_add_row_at_bottom
	.export		_reset_gameplay_area
	.export		_fade_to_black
	.export		_fade_from_black
	.export		_difficulty_to_leaderboard_pos
	.export		_main
	.export		_is_block_occupied

.segment	"DATA"

_last_initials:
	.byte	$41,$41,$41
_high_scores_vs_initials:
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
	.byte	$2D,$2D,$2D
_high_scores_vs_value:
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
	.dword	$FFFFFFFF
_high_scores:
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
_state:
	.byte	$00
_cur_block:
	.byte	$00
	.byte	$00
_fall_rate:
	.byte	$30
_cur_level:
	.byte	$00
_cur_level_vs_setting:
	.byte	$00
_cluster_defs_classic:
	.addr	_def_Z
	.addr	_def_S
	.addr	_def_line
	.addr	_def_square
	.addr	_def_T
	.addr	_def_L
	.addr	_def_L_rev
_attract_gameplay_enabled:
	.byte	$00

.segment	"RODATA"

_game_area:
	.byte	$09
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$BF
	.byte	$14
	.byte	$01
	.byte	$12
	.byte	$09
	.byte	$07
	.byte	$01
	.byte	$11
	.byte	$BF
	.byte	$08
	.byte	$09
	.byte	$0F
	.byte	$8B
	.byte	$08
	.byte	$CF
	.byte	$14
	.byte	$AE
	.byte	$AF
	.byte	$B7
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$B8
	.byte	$AF
	.byte	$AE
	.byte	$11
	.byte	$CF
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$4C
	.byte	$49
	.byte	$4E
	.byte	$45
	.byte	$53
	.byte	$08
	.byte	$97
	.byte	$98
	.byte	$09
	.byte	$02
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$09
	.byte	$05
	.byte	$BF
	.byte	$BE
	.byte	$A8
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$30
	.byte	$09
	.byte	$02
	.byte	$08
	.byte	$A7
	.byte	$98
	.byte	$09
	.byte	$02
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$09
	.byte	$05
	.byte	$CF
	.byte	$CE
	.byte	$A8
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$12
	.byte	$C7
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$C8
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$6E
	.byte	$6F
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$53
	.byte	$43
	.byte	$4F
	.byte	$52
	.byte	$45
	.byte	$08
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$12
	.byte	$01
	.byte	$12
	.byte	$11
	.byte	$12
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$7E
	.byte	$7F
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$30
	.byte	$09
	.byte	$04
	.byte	$08
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$8E
	.byte	$8F
	.byte	$08
	.byte	$09
	.byte	$0B
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$9E
	.byte	$9F
	.byte	$08
	.byte	$08
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$45
	.byte	$56
	.byte	$45
	.byte	$4C
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$12
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$01
	.byte	$12
	.byte	$03
	.byte	$8C
	.byte	$8D
	.byte	$08
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$78
	.byte	$79
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$30
	.byte	$30
	.byte	$08
	.byte	$01
	.byte	$12
	.byte	$14
	.byte	$13
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$13
	.byte	$11
	.byte	$03
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$63
	.byte	$64
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$8B
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$79
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$01
	.byte	$04
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$73
	.byte	$74
	.byte	$13
	.byte	$14
	.byte	$1B
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$88
	.byte	$89
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$14
	.byte	$85
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$61
	.byte	$81
	.byte	$94
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$63
	.byte	$64
	.byte	$14
	.byte	$85
	.byte	$01
	.byte	$14
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$86
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$13
	.byte	$14
	.byte	$01
	.byte	$71
	.byte	$91
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$92
	.byte	$73
	.byte	$74
	.byte	$13
	.byte	$00
	.byte	$12
	.byte	$13
	.byte	$86
	.byte	$87
	.byte	$87
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$03
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$01
	.byte	$61
	.byte	$62
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$06
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$01
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$82
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$83
	.byte	$84
	.byte	$03
	.byte	$81
	.byte	$94
	.byte	$81
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$61
	.byte	$62
	.byte	$93
	.byte	$94
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0E
	.byte	$1D
	.byte	$0E
	.byte	$0D
	.byte	$87
	.byte	$A4
	.byte	$1F
	.byte	$72
	.byte	$90
	.byte	$13
	.byte	$91
	.byte	$81
	.byte	$91
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$82
	.byte	$86
	.byte	$0F
	.byte	$0F
	.byte	$1F
	.byte	$86
	.byte	$1E
	.byte	$86
	.byte	$87
	.byte	$0F
	.byte	$A4
	.byte	$0F
	.byte	$1F
	.byte	$72
	.byte	$63
	.byte	$61
	.byte	$62
	.byte	$91
	.byte	$00
	.byte	$09
	.byte	$0B
	.byte	$94
	.byte	$84
	.byte	$00
	.byte	$63
	.byte	$64
	.byte	$1F
	.byte	$0F
	.byte	$A4
	.byte	$1D
	.byte	$00
	.byte	$0F
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$72
	.byte	$73
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$84
	.byte	$94
	.byte	$64
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$86
	.byte	$0F
	.byte	$1F
	.byte	$61
	.byte	$62
	.byte	$81
	.byte	$84
	.byte	$90
	.byte	$00
	.byte	$81
	.byte	$94
	.byte	$72
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$94
	.byte	$73
	.byte	$74
	.byte	$83
	.byte	$84
	.byte	$63
	.byte	$64
	.byte	$63
	.byte	$64
	.byte	$1F
	.byte	$00
	.byte	$62
	.byte	$84
	.byte	$91
	.byte	$94
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$83
	.byte	$84
	.byte	$90
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$82
	.byte	$92
	.byte	$93
	.byte	$93
	.byte	$94
	.byte	$73
	.byte	$74
	.byte	$92
	.byte	$93
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$94
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$2A
	.byte	$2B
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$83
	.byte	$2A
	.byte	$2B
	.byte	$00
	.byte	$82
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$92
	.byte	$93
	.byte	$00
	.byte	$72
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$66
	.byte	$67
	.byte	$B9
	.byte	$10
	.byte	$C9
	.byte	$B9
	.byte	$00
	.byte	$90
	.byte	$29
	.byte	$9C
	.byte	$9D
	.byte	$29
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$29
	.byte	$95
	.byte	$96
	.byte	$29
	.byte	$00
	.byte	$82
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$05
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$05
	.byte	$00
	.byte	$61
	.byte	$BE
	.byte	$AC
	.byte	$AD
	.byte	$BE
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$BE
	.byte	$A5
	.byte	$A6
	.byte	$BE
	.byte	$64
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$75
	.byte	$76
	.byte	$05
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FF
	.byte	$72
	.byte	$71
	.byte	$CE
	.byte	$BC
	.byte	$BD
	.byte	$CE
	.byte	$14
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$03
	.byte	$03
	.byte	$14
	.byte	$CE
	.byte	$B5
	.byte	$B6
	.byte	$CE
	.byte	$74
	.byte	$82
	.byte	$6B
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$5F
	.byte	$6A
	.byte	$00
	.byte	$81
	.byte	$12
	.byte	$CC
	.byte	$CD
	.byte	$12
	.byte	$11
	.byte	$12
	.byte	$AF
	.byte	$12
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$AF
	.byte	$03
	.byte	$14
	.byte	$12
	.byte	$C5
	.byte	$C6
	.byte	$12
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$6B
	.byte	$05
	.byte	$09
	.byte	$07
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$05
	.byte	$09
	.byte	$06
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$04
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$04
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$05
	.byte	$75
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$15
	.byte	$05
	.byte	$15
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$55
	.byte	$05
	.byte	$05
	.byte	$45
	.byte	$99
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$80
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$59
	.byte	$AA
	.byte	$56
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$FC
	.byte	$77
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$54
	.byte	$55
	.byte	$00
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$09
	.byte	$00
_boot_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A8
	.byte	$8E
	.byte	$00
	.byte	$43
	.byte	$52
	.byte	$45
	.byte	$41
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$00
	.byte	$42
	.byte	$59
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$01
	.byte	$6C
	.byte	$44
	.byte	$45
	.byte	$53
	.byte	$49
	.byte	$47
	.byte	$4E
	.byte	$2C
	.byte	$43
	.byte	$4F
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$41
	.byte	$54
	.byte	$54
	.byte	$00
	.byte	$48
	.byte	$55
	.byte	$47
	.byte	$48
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$47
	.byte	$41
	.byte	$4D
	.byte	$45
	.byte	$00
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$41
	.byte	$4C
	.byte	$4C
	.byte	$45
	.byte	$52
	.byte	$00
	.byte	$5A
	.byte	$4F
	.byte	$4C
	.byte	$54
	.byte	$41
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$2C
	.byte	$53
	.byte	$46
	.byte	$58
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$55
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$33
	.byte	$42
	.byte	$4F
	.byte	$58
	.byte	$00
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$41
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$50
	.byte	$41
	.byte	$59
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$6B
	.byte	$8E
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$44
	.byte	$49
	.byte	$43
	.byte	$41
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$00
	.byte	$54
	.byte	$4F
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$01
	.byte	$30
	.byte	$41
	.byte	$42
	.byte	$49
	.byte	$47
	.byte	$41
	.byte	$49
	.byte	$4C
	.byte	$2C
	.byte	$45
	.byte	$4C
	.byte	$49
	.byte	$41
	.byte	$4E
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$45
	.byte	$4C
	.byte	$53
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$75
	.byte	$56
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$49
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$53
	.byte	$2E
	.byte	$00
	.byte	$30
	.byte	$2E
	.byte	$39
	.byte	$2E
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$30
	.byte	$2E
	.byte	$31
	.byte	$32
	.byte	$2E
	.byte	$32
	.byte	$38
	.byte	$00
	.byte	$01
	.byte	$4D
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$8A
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$A8
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$20
	.byte	$80
	.byte	$A8
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$55
	.byte	$55
	.byte	$15
	.byte	$02
	.byte	$00
	.byte	$A0
	.byte	$50
	.byte	$54
	.byte	$55
	.byte	$A5
	.byte	$AA
	.byte	$AA
	.byte	$A2
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$01
	.byte	$00
_vs_settings_difficulty:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$45
	.byte	$2A
	.byte	$2B
	.byte	$06
	.byte	$3C
	.byte	$3C
	.byte	$44
	.byte	$49
	.byte	$46
	.byte	$46
	.byte	$49
	.byte	$43
	.byte	$55
	.byte	$4C
	.byte	$54
	.byte	$59
	.byte	$3C
	.byte	$3C
	.byte	$06
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$06
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$06
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$06
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$83
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$85
	.byte	$86
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$93
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$95
	.byte	$96
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8F
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$84
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$3C
	.byte	$45
	.byte	$41
	.byte	$53
	.byte	$59
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$9F
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$94
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$4D
	.byte	$45
	.byte	$44
	.byte	$49
	.byte	$55
	.byte	$4D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$49
	.byte	$4E
	.byte	$53
	.byte	$41
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$83
	.byte	$FF
	.byte	$01
	.byte	$05
	.byte	$3F
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$55
	.byte	$55
	.byte	$88
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$88
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$A8
	.byte	$AA
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$55
	.byte	$55
	.byte	$88
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$00
_vs_settings_mode:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$45
	.byte	$2A
	.byte	$2B
	.byte	$06
	.byte	$4D
	.byte	$4F
	.byte	$44
	.byte	$45
	.byte	$3C
	.byte	$53
	.byte	$45
	.byte	$4C
	.byte	$45
	.byte	$43
	.byte	$54
	.byte	$49
	.byte	$4F
	.byte	$4E
	.byte	$06
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$01
	.byte	$69
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$02
	.byte	$AE
	.byte	$AF
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$02
	.byte	$BE
	.byte	$BF
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$3D
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$46
	.byte	$49
	.byte	$58
	.byte	$45
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$54
	.byte	$49
	.byte	$4D
	.byte	$45
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$43
	.byte	$4C
	.byte	$41
	.byte	$6A
	.byte	$49
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$C4
	.byte	$C0
	.byte	$F0
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$88
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$88
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$88
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$88
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$88
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$51
	.byte	$54
	.byte	$80
	.byte	$A0
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$00
_title_screen:
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$25
	.byte	$DD
	.byte	$DE
	.byte	$09
	.byte	$12
	.byte	$3E
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$EF
	.byte	$FE
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E9
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$B3
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D5
	.byte	$D6
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$3A
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$DA
	.byte	$C4
	.byte	$E4
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$B0
	.byte	$EA
	.byte	$C4
	.byte	$E4
	.byte	$E5
	.byte	$E0
	.byte	$E4
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$E7
	.byte	$E5
	.byte	$E1
	.byte	$E6
	.byte	$E7
	.byte	$05
	.byte	$EE
	.byte	$D9
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E8
	.byte	$E6
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$E9
	.byte	$B1
	.byte	$B2
	.byte	$05
	.byte	$E5
	.byte	$D0
	.byte	$B3
	.byte	$C4
	.byte	$D4
	.byte	$05
	.byte	$05
	.byte	$D4
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$E4
	.byte	$D5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$EE
	.byte	$05
	.byte	$B0
	.byte	$08
	.byte	$D2
	.byte	$D3
	.byte	$E4
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E5
	.byte	$E8
	.byte	$E6
	.byte	$E5
	.byte	$E8
	.byte	$E9
	.byte	$E5
	.byte	$E8
	.byte	$E8
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E5
	.byte	$E6
	.byte	$E5
	.byte	$E6
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$3D
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$ED
	.byte	$DB
	.byte	$50
	.byte	$55
	.byte	$53
	.byte	$48
	.byte	$08
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$DC
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$3C
	.byte	$08
	.byte	$09
	.byte	$28
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$95
	.byte	$96
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$9C
	.byte	$9D
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$A5
	.byte	$A6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$AC
	.byte	$AD
	.byte	$08
	.byte	$09
	.byte	$17
	.byte	$B5
	.byte	$B6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$BC
	.byte	$BD
	.byte	$08
	.byte	$09
	.byte	$17
	.byte	$C5
	.byte	$C6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$CC
	.byte	$CD
	.byte	$08
	.byte	$09
	.byte	$16
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$08
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0F
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$08
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$0E
	.byte	$02
	.byte	$27
	.byte	$28
	.byte	$14
	.byte	$08
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$15
	.byte	$03
	.byte	$25
	.byte	$26
	.byte	$14
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$15
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$A8
	.byte	$98
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$13
	.byte	$8B
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$A8
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$15
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$6E
	.byte	$6F
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$14
	.byte	$A8
	.byte	$99
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$A7
	.byte	$98
	.byte	$01
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$7E
	.byte	$7F
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$14
	.byte	$A8
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$43
	.byte	$52
	.byte	$45
	.byte	$44
	.byte	$49
	.byte	$54
	.byte	$08
	.byte	$01
	.byte	$14
	.byte	$01
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$8E
	.byte	$8F
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$14
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$BF
	.byte	$14
	.byte	$01
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$9E
	.byte	$9F
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$14
	.byte	$11
	.byte	$BF
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$CF
	.byte	$14
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$07
	.byte	$14
	.byte	$11
	.byte	$CF
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$01
	.byte	$14
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$07
	.byte	$14
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$C0
	.byte	$F0
	.byte	$09
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$09
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$09
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$09
	.byte	$13
	.byte	$55
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$40
	.byte	$55
	.byte	$66
	.byte	$51
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
_high_score_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$13
	.byte	$9C
	.byte	$9D
	.byte	$13
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$13
	.byte	$95
	.byte	$96
	.byte	$13
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$AC
	.byte	$AD
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$B5
	.byte	$B6
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$CC
	.byte	$CD
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$4C
	.byte	$45
	.byte	$41
	.byte	$44
	.byte	$45
	.byte	$52
	.byte	$42
	.byte	$4F
	.byte	$41
	.byte	$52
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$C5
	.byte	$C6
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$45
	.byte	$41
	.byte	$53
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$4D
	.byte	$45
	.byte	$44
	.byte	$49
	.byte	$55
	.byte	$4D
	.byte	$00
	.byte	$01
	.byte	$4B
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$49
	.byte	$4E
	.byte	$53
	.byte	$41
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$3B
	.byte	$3F
	.byte	$00
	.byte	$01
	.byte	$4F
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$61
	.byte	$AA
	.byte	$00
	.byte	$6A
	.byte	$5A
	.byte	$5A
	.byte	$9A
	.byte	$00
	.byte	$AA
	.byte	$AA
	.byte	$00
	.byte	$A5
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$AA
	.byte	$EA
	.byte	$FF
	.byte	$AB
	.byte	$AA
	.byte	$EE
	.byte	$FF
	.byte	$AA
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$99
	.byte	$AA
	.byte	$F5
	.byte	$FA
	.byte	$AA
	.byte	$E6
	.byte	$E5
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$AF
	.byte	$5F
	.byte	$5A
	.byte	$AF
	.byte	$6B
	.byte	$5A
	.byte	$9A
	.byte	$AA
	.byte	$AA
	.byte	$A5
	.byte	$A5
	.byte	$AA
	.byte	$A6
	.byte	$A5
	.byte	$A9
	.byte	$0A
	.byte	$01
	.byte	$06
	.byte	$0A
	.byte	$01
	.byte	$00
_sound_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$67
	.byte	$9C
	.byte	$9D
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$95
	.byte	$96
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$AC
	.byte	$AD
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$BC
	.byte	$BD
	.byte	$8E
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$54
	.byte	$45
	.byte	$53
	.byte	$54
	.byte	$8F
	.byte	$B5
	.byte	$B6
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$CC
	.byte	$CD
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$C5
	.byte	$C6
	.byte	$00
	.byte	$01
	.byte	$89
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$00
	.byte	$54
	.byte	$52
	.byte	$41
	.byte	$43
	.byte	$4B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$46
	.byte	$58
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$30
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$30
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$50
	.byte	$4C
	.byte	$41
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$50
	.byte	$4C
	.byte	$41
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$44
	.byte	$4F
	.byte	$57
	.byte	$4E
	.byte	$00
	.byte	$4E
	.byte	$45
	.byte	$58
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$52
	.byte	$49
	.byte	$47
	.byte	$48
	.byte	$54
	.byte	$00
	.byte	$4E
	.byte	$45
	.byte	$58
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4C
	.byte	$45
	.byte	$46
	.byte	$54
	.byte	$00
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$86
	.byte	$2D
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$53
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$45
	.byte	$4C
	.byte	$45
	.byte	$43
	.byte	$54
	.byte	$00
	.byte	$54
	.byte	$4F
	.byte	$00
	.byte	$51
	.byte	$55
	.byte	$49
	.byte	$54
	.byte	$2D
	.byte	$00
	.byte	$01
	.byte	$84
	.byte	$AA
	.byte	$01
	.byte	$18
	.byte	$5A
	.byte	$AA
	.byte	$01
	.byte	$03
	.byte	$5A
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$AA
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$AA
	.byte	$01
	.byte	$11
	.byte	$0A
	.byte	$01
	.byte	$06
	.byte	$0A
	.byte	$01
	.byte	$00
_ty_screen:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$46
	.byte	$8E
	.byte	$00
	.byte	$53
	.byte	$50
	.byte	$45
	.byte	$43
	.byte	$49
	.byte	$41
	.byte	$4C
	.byte	$00
	.byte	$54
	.byte	$48
	.byte	$41
	.byte	$4E
	.byte	$4B
	.byte	$53
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$38
	.byte	$30
	.byte	$31
	.byte	$00
	.byte	$50
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$4A
	.byte	$45
	.byte	$4B
	.byte	$55
	.byte	$54
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$28
	.byte	$41
	.byte	$47
	.byte	$45
	.byte	$4E
	.byte	$54
	.byte	$42
	.byte	$41
	.byte	$53
	.byte	$45
	.byte	$59
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$4C
	.byte	$49
	.byte	$44
	.byte	$4E
	.byte	$41
	.byte	$52
	.byte	$49
	.byte	$51
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$42
	.byte	$45
	.byte	$4E
	.byte	$00
	.byte	$4C
	.byte	$41
	.byte	$52
	.byte	$53
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$4D
	.byte	$2D
	.byte	$54
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$42
	.byte	$45
	.byte	$4E
	.byte	$4A
	.byte	$59
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$4D
	.byte	$45
	.byte	$4D
	.byte	$42
	.byte	$4C
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$42
	.byte	$52
	.byte	$4F
	.byte	$4B
	.byte	$45
	.byte	$00
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$44
	.byte	$49
	.byte	$4F
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$55
	.byte	$55
	.byte	$4E
	.byte	$41
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$2B
	.byte	$43
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$48
	.byte	$52
	.byte	$49
	.byte	$53
	.byte	$43
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$4E
	.byte	$45
	.byte	$53
	.byte	$2D
	.byte	$44
	.byte	$4F
	.byte	$55
	.byte	$47
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$55
	.byte	$00
	.byte	$41
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$4B
	.byte	$48
	.byte	$49
	.byte	$4E
	.byte	$00
	.byte	$50
	.byte	$4D
	.byte	$59
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$2D
	.byte	$44
	.byte	$4F
	.byte	$47
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$53
	.byte	$48
	.byte	$49
	.byte	$52
	.byte	$55
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$44
	.byte	$52
	.byte	$45
	.byte	$58
	.byte	$45
	.byte	$47
	.byte	$41
	.byte	$52
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$53
	.byte	$4F
	.byte	$4C
	.byte	$45
	.byte	$00
	.byte	$47
	.byte	$4F
	.byte	$4F
	.byte	$53
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$27
	.byte	$45
	.byte	$52
	.byte	$49
	.byte	$43
	.byte	$49
	.byte	$43
	.byte	$58
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$54
	.byte	$45
	.byte	$50
	.byte	$50
	.byte	$4C
	.byte	$45
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$46
	.byte	$49
	.byte	$53
	.byte	$4B
	.byte	$42
	.byte	$49
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$54
	.byte	$48
	.byte	$45
	.byte	$00
	.byte	$41
	.byte	$53
	.byte	$4D
	.byte	$00
	.byte	$4C
	.byte	$49
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$25
	.byte	$49
	.byte	$4E
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$54
	.byte	$48
	.byte	$45
	.byte	$4D
	.byte	$45
	.byte	$54
	.byte	$41
	.byte	$4C
	.byte	$42
	.byte	$45
	.byte	$41
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$2E
	.byte	$02
	.byte	$02
	.byte	$41
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$59
	.byte	$4F
	.byte	$55
	.byte	$21
	.byte	$00
	.byte	$02
	.byte	$23
	.byte	$80
	.byte	$A0
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$65
	.byte	$55
	.byte	$55
	.byte	$01
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$AA
	.byte	$80
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$50
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$5A
	.byte	$84
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$66
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$0A
	.byte	$02
	.byte	$03
	.byte	$0A
	.byte	$02
	.byte	$00
_attack_delay:
	.word	$0258
_starting_levels:
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
_konami_code:
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$40
	.byte	$80
	.byte	$10
_vs_code:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
_def_line:
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$06
	.byte	$0C
	.byte	$0E
	.byte	$08
	.byte	$09
	.byte	$0C
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$0B
_def_square:
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
_def_L_rev:
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$09
_def_L:
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$09
_def_S:
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$09
_def_Z:
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$04
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$08
_def_T:
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$09
	.byte	$06
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$09
	.byte	$03
	.byte	$01
_srs_non_line_rotate_lookup:
	.byte	$0E
	.byte	$0D
	.byte	$38
	.byte	$0E
	.byte	$12
	.byte	$1A
	.byte	$25
	.byte	$04
	.byte	$1A
	.byte	$26
	.byte	$1A
	.byte	$0D
	.byte	$2C
	.byte	$1A
	.byte	$06
	.byte	$0E
	.byte	$25
	.byte	$10
	.byte	$0E
	.byte	$32
_srs_line_rotate_lookup:
	.byte	$0B
	.byte	$1E
	.byte	$20
	.byte	$14
	.byte	$26
	.byte	$1B
	.byte	$0A
	.byte	$1C
	.byte	$28
	.byte	$12
	.byte	$0E
	.byte	$1E
	.byte	$02
	.byte	$3C
	.byte	$09
	.byte	$1A
	.byte	$0A
	.byte	$36
	.byte	$00
	.byte	$31
_cluster_sprites:
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
_cluster_offsets:
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
_button_delay:
	.byte	$05
_OOB_TOP:
	.byte	$28
_tentacle_offsets:
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$00
_garbage_types:
	.byte	$60
	.byte	$70
	.byte	$2F
_board_lookup_y:
	.byte	$00
	.byte	$0A
	.byte	$14
	.byte	$1E
	.byte	$28
	.byte	$32
	.byte	$3C
	.byte	$46
	.byte	$50
	.byte	$5A
	.byte	$64
	.byte	$6E
	.byte	$78
	.byte	$82
	.byte	$8C
	.byte	$96
	.byte	$A0
	.byte	$AA
	.byte	$B4
	.byte	$BE
	.byte	$C8
	.byte	$D2
	.byte	$DC
	.byte	$E6
_empty_row:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_full_row:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_full_col:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_option_empty:
	.byte	$00
	.byte	$00
_option_icon:
	.byte	$25
	.byte	$26
_palette_bg:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
_palette_sp:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$16
	.byte	$31
	.byte	$36
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$36
_palette_bg_options:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$22
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
_palette_vs_options:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
_palette_vs_highscore_table:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$22
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$06
	.byte	$0F
	.byte	$30
_palette_vs_options_inactive:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
_palette_vs_options_active:
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
_palette_vs_options_skulls:
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$36
_palette_bg_list:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$1A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$1C
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$0C
	.byte	$23
	.byte	$34
	.byte	$0F
	.byte	$00
	.byte	$07
	.byte	$10
	.byte	$0F
	.byte	$1A
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$16
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$1C
	.byte	$10
	.byte	$0F
	.byte	$00
	.byte	$07
	.byte	$22
	.byte	$0F
	.byte	$1B
	.byte	$07
	.byte	$17
	.byte	$0F
	.byte	$0C
	.byte	$11
	.byte	$22
	.byte	$0F
	.byte	$0C
	.byte	$22
	.byte	$27
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$27
	.byte	$0F
	.byte	$1A
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$22
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$26
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$1C
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$23
	.byte	$32
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$23
	.byte	$26
	.byte	$36
_fall_rates_per_level:
	.byte	$30
	.byte	$2B
	.byte	$26
	.byte	$21
	.byte	$1C
	.byte	$17
	.byte	$12
	.byte	$0D
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
_attack_style_strings:
	.byte	$46,$49,$58,$45,$44,$00
	.res	1,$00
	.byte	$54,$49,$4D,$45,$44,$00
	.res	1,$00
	.byte	$43,$4C,$41,$53,$53,$49,$43
_off_on_string:
	.byte	$4F,$46,$46,$00
	.byte	$4F,$4E,$00
	.res	1,$00
_block_style_strings:
	.byte	$4D,$4F,$44,$45,$52,$4E,$00
	.byte	$43,$4C,$41,$53,$53,$49,$43
_hard_drop_types:
	.byte	$4F,$46,$46,$00
	.byte	$54,$41,$50,$00
	.byte	$48,$4F,$4C,$44
_text_insert_1_coin:
	.byte	$DB,$20,$20,$49,$4E,$53,$45,$52,$54,$20,$43,$4F,$49,$4E,$20,$20
	.byte	$DC,$00
_text_insert_2_coin:
	.byte	$DB,$20,$49,$4E,$53,$45,$52,$54,$20,$20,$43,$4F,$49,$4E,$53,$20
	.byte	$DC,$00
_text_free_play:
	.byte	$DB,$20,$20,$46,$52,$45,$45,$20,$20,$20,$50,$4C,$41,$59,$20,$20
	.byte	$DC,$00
_text_push_start:
	.byte	$DB,$50,$55,$53,$48,$20,$41,$4E,$59,$20,$42,$55,$54,$54,$4F,$4E
	.byte	$DC,$00
_clear_push_start:
	.byte	$DB,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$DC,$00
_metasprite_vs_logo:
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$0B
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$0C
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$0D
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$1B
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$1C
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$1D
	.byte	$03
	.byte	$80
_metasprite_tentacle_title:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$80
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$81
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$90
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$91
	.byte	$01
	.byte	$80
L1AFE:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00
L1B8C:
	.byte	$2D,$2D,$2D,$2D,$2D,$2D,$2D,$00
L1B99:
	.byte	$30,$30,$30,$30,$30,$30,$30,$00
L1C32:
	.byte	$20,$20,$20,$20,$20,$20,$00
L19F1	:=	L1B8C+4
L1C56	:=	L1B99+5

.segment	"BSS"

.segment	"ZEROPAGE"
_tick_count:
	.res	1,$00
_tick_count_large:
	.res	2,$00
_ticks_in_state_large:
	.res	2,$00
_hit_reaction_remaining:
	.res	1,$00
_attack_queue_ticks_remaining:
	.res	2,$00
_pad_all:
	.res	1,$00
_pad_all_new:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_pad2:
	.res	1,$00
_pad2_new:
	.res	1,$00
_scroll_y:
	.res	2,$00
_cur_option:
	.res	1,$00
_attack_style:
	.res	1,$00
_temp_table:
	.res	2,$00
_cur_initial_index:
	.res	1,$00
_music_on:
	.res	1,$00
_sfx_on:
	.res	1,$00
_block_style:
	.res	1,$00
_saved_starting_level:
	.res	1,$00
_hard_drops_on:
	.res	1,$00
_hard_drop_hold_remaining:
	.res	1,$00
_hard_drop_tap_required:
	.res	1,$00
_cur_konami_index:
	.res	1,$00
_high_score_entry_placement:
	.res	1,$00
_vs_code_index:
	.res	1,$00
_cur_rot:
	.res	1,$00
_cur_cluster:
	.res	22,$00
_next_cluster:
	.res	22,$00
_attack_row_status:
	.res	10,$00
_horz_button_delay:
	.res	1,$00
_require_new_down_button:
	.res	1,$00
_fall_frame_counter:
	.res	1,$00
_lines_cleared_one:
	.res	1,$00
_lines_cleared_ten:
	.res	1,$00
_lines_cleared_hundred:
	.res	1,$00
_cur_score:
	.res	4,$00
_cur_nt:
	.res	1,$00
_off_nt:
	.res	1,$00
_hit:
	.res	1,$00
_temp_fall_frame_counter:
	.res	1,$00
_old_x:
	.res	1,$00
_id:
	.res	1,$00
_min_y:
	.res	1,$00
_max_y:
	.res	1,$00
_in_x:
	.res	1,$00
_in_y:
	.res	1,$00
_in_id:
	.res	1,$00
_local_start_x:
	.res	1,$00
_local_start_y:
	.res	1,$00
_local_ix:
	.res	1,$00
_local_iy:
	.res	1,$00
_local_t:
	.res	2,$00
_local_bit:
	.res	1,$00
_local_row_status:
	.res	1,$00
_test_song:
	.res	1,$00
_test_song_active:
	.res	1,$00
_test_sound:
	.res	1,$00
_cur_gameplay_music:
	.res	1,$00
_attack_queued:
	.res	1,$00
_cur_garbage_type:
	.res	1,$00
_delay_lock_remaining:
	.res	1,$00
_delay_lock_skip:
	.res	1,$00
_delay_spawn_remaining:
	.res	1,$00
_spawn_queued:
	.res	1,$00
_row_to_clear:
	.res	1,$00
_kill_row_cur:
	.res	1,$00
_kill_row_queued:
	.res	1,$00
_start_delay_remaining:
	.res	1,$00
_mask:
	.res	2,$00
_address:
	.res	2,$00
_time_of_day:
	.res	1,$00
_temp_pal:
	.res	16,$00
_lines_cleared_y:
	.res	4,$00
_line_score_mod:
	.res	2,$00
.segment	"BSS"
_game_board:
	.res	240,$00
_game_board_temp:
	.res	240,$00
_copy_board_data:
	.res	20,$00
_auto_forward_leaderboards:
	.res	1,$00
_free_play_enabled:
	.res	1,$00
_game_cost:
	.res	1,$00
_option_state:
	.res	1,$00
_prev_4016:
	.res	1,$00
_maintenance_counter:
	.res	1,$00
_screen_shake_remaining:
	.res	1,$00
_credits_remaining:
	.res	1,$00
_is_tspin:
	.res	1,$00
_is_last_rotate:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_menu_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_menu_sprites: near

	.dbg	func, "draw_menu_sprites", "00", extern, "_draw_menu_sprites"

.segment	"BSS"

L154E:
	.res	1,$00
L154F:
	.res	1,$00

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "main.c", 1560
	jsr     _oam_clear
;
; t = tick_count % 64;
;
	.dbg	line, "main.c", 1563
	lda     _tick_count
	and     #$3F
	sta     L154E
;
; if (t > 48)
;
	.dbg	line, "main.c", 1564
	cmp     #$31
	bcc     L1F1E
;
; local_ix = 0x69;
;
	.dbg	line, "main.c", 1566
	lda     #$69
;
; else if (t > 32)
;
	.dbg	line, "main.c", 1568
	jmp     L1F1D
L1F1E:	lda     L154E
	cmp     #$21
	bcc     L1F1F
;
; local_ix = 0x68;
;
	.dbg	line, "main.c", 1570
	lda     #$68
;
; else if (t > 16)
;
	.dbg	line, "main.c", 1572
	jmp     L1F1D
L1F1F:	lda     L154E
	cmp     #$11
	bcc     L1F20
;
; local_ix = 0x67;
;
	.dbg	line, "main.c", 1574
	lda     #$67
;
; else
;
	.dbg	line, "main.c", 1576
	jmp     L1F1D
;
; local_ix = 0x66;
;
	.dbg	line, "main.c", 1578
L1F20:	lda     #$66
L1F1D:	sta     _local_ix
;
; oam_spr(10 << 3, 23 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1581
	jsr     decsp3
	lda     #$50
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(22 << 3, 23 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1582
	jsr     decsp3
	lda     #$B0
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_meta_spr(19<<3, 14<<3, metasprite_tentacle_title);
;
	.dbg	line, "main.c", 1585
	jsr     decsp2
	lda     #$98
	ldy     #$01
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     #<(_metasprite_tentacle_title)
	ldx     #>(_metasprite_tentacle_title)
	jsr     _oam_meta_spr
;
; t = credits_remaining;
;
	.dbg	line, "main.c", 1590
	lda     _credits_remaining
	sta     L154E
;
; d = (t) % 10;
;
	.dbg	line, "main.c", 1591
	lda     L154E
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	sta     L154F
;
; oam_spr(6 << 3, 27 << 3, '0' + d, 0);
;
	.dbg	line, "main.c", 1592
	jsr     decsp3
	lda     #$30
	ldy     #$02
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     L154F
	clc
	adc     #$30
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; t = t / 10;
;
	.dbg	line, "main.c", 1593
	lda     L154E
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L154E
;
; d = (t) % 10;
;
	.dbg	line, "main.c", 1594
	lda     L154E
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	sta     L154F
;
; oam_spr(5 << 3, 27 << 3, '0' + d, 0);
;
	.dbg	line, "main.c", 1595
	jsr     decsp3
	lda     #$28
	ldy     #$02
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     L154F
	clc
	adc     #$30
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(7 << 3, 27 << 3, 0x2F, 0);
;
	.dbg	line, "main.c", 1597
	jsr     decsp3
	lda     #$38
	ldy     #$02
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     #$2F
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(8 << 3, 27 << 3, 0x30 + game_cost, 0);
;
	.dbg	line, "main.c", 1598
	jsr     decsp3
	lda     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     _game_cost
	clc
	adc     #$30
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_meta_spr(22 << 3, 3 << 3, metasprite_vs_logo);
;
	.dbg	line, "main.c", 1600
	jsr     decsp2
	lda     #$B0
	ldy     #$01
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #<(_metasprite_vs_logo)
	ldx     #>(_metasprite_vs_logo)
	jmp     _oam_meta_spr
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ draw_gameplay_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_gameplay_sprites: near

	.dbg	func, "draw_gameplay_sprites", "00", extern, "_draw_gameplay_sprites"

.segment	"BSS"

L1598:
	.res	1,$00
L1599:
	.res	1,$00
L159A:
	.res	1,$00
L159B:
	.res	1,$00

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "main.c", 1615
	jsr     _oam_clear
;
; local_start_x = (cur_block.x << 3) + BOARD_START_X_PX;
;
	.dbg	line, "main.c", 1621
	lda     _cur_block
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	sta     _local_start_x
;
; local_start_y = (cur_block.y << 3) + BOARD_START_Y_PX;
;
	.dbg	line, "main.c", 1622
	lda     _cur_block+1
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	sta     _local_start_y
;
; if (cur_block.y != 255)
;
	.dbg	line, "main.c", 1625
	lda     _cur_block+1
	cmp     #$FF
	beq     L1F2D
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 1627
	lda     #$00
	sta     L159A
L1F2C:	lda     L159A
	cmp     #$04
	bcs     L1F2D
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 1630
	ldy     L159A
	lda     _cur_cluster,y
	sta     L159B
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 1633
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 1634
	lda     L159B
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; if (local_start_y + (local_iy << 3) > OOB_TOP)
;
	.dbg	line, "main.c", 1639
	ldx     #$00
	lda     _local_iy
	jsr     aslax3
	clc
	adc     _local_start_y
	bcc     L1F24
	inx
L1F24:	sec
	sbc     _OOB_TOP
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L15A9
	beq     L15A9
;
; oam_spr(local_start_x + (local_ix << 3), local_start_y + (local_iy << 3), cur_cluster.sprite, 0);
;
	.dbg	line, "main.c", 1641
	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     _local_start_x
	ldy     #$02
	sta     (sp),y
	lda     _local_iy
	asl     a
	asl     a
	asl     a
	clc
	adc     _local_start_y
	dey
	sta     (sp),y
	lda     _cur_cluster+20
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 1627
L15A9:	inc     L159A
	jmp     L1F2C
;
; if (attack_style != ATTACK_NEVER)
;
	.dbg	line, "main.c", 1648
L1F2D:	lda     _attack_style
	cmp     #$02
	jeq     L1F33
;
; shake_offset = 0;
;
	.dbg	line, "main.c", 1650
	lda     #$00
	sta     L1598
;
; if (attack_style == ATTACK_ON_TIME)
;
	.dbg	line, "main.c", 1651
	lda     _attack_style
	cmp     #$01
	bne     L1F2F
;
; if (attack_queue_ticks_remaining < 120)
;
	.dbg	line, "main.c", 1653
	lda     _attack_queue_ticks_remaining+1
	cmp     #$00
	bne     L15CB
	lda     _attack_queue_ticks_remaining
	cmp     #$78
L15CB:	bcs     L15C9
;
; speed = tick_count >> 2;
;
	.dbg	line, "main.c", 1655
	lda     _tick_count
;
; else if (attack_queue_ticks_remaining < 300)
;
	.dbg	line, "main.c", 1657
	jmp     L1F3A
L15C9:	lda     _attack_queue_ticks_remaining+1
	cmp     #$01
	bne     L15D1
	lda     _attack_queue_ticks_remaining
	cmp     #$2C
L15D1:	bcs     L1F2E
;
; speed = tick_count >> 3;
;
	.dbg	line, "main.c", 1659
	lda     _tick_count
;
; else
;
	.dbg	line, "main.c", 1661
	jmp     L1F3D
;
; speed = tick_count >> 5;
;
	.dbg	line, "main.c", 1663
L1F2E:	lda     _tick_count
	lsr     a
;
; else
;
	.dbg	line, "main.c", 1666
	jmp     L1F40
;
; speed = tick_count >> 4;
;
	.dbg	line, "main.c", 1668
L1F2F:	lda     _tick_count
L1F40:	lsr     a
L1F3D:	lsr     a
L1F3A:	lsr     a
	lsr     a
	sta     L1599
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 1672
	lda     #$00
	sta     _local_ix
L1F30:	lda     _local_ix
	cmp     #$0A
	jcs     L1F33
;
; local_row_status = attack_row_status[local_ix];
;
	.dbg	line, "main.c", 1674
	ldy     _local_ix
	lda     _attack_row_status,y
	sta     _local_row_status
;
; if (local_row_status > 0)
;
	.dbg	line, "main.c", 1675
	lda     _local_row_status
	jeq     L1F32
;
; for (local_iy = 0; local_iy < local_row_status /*&& local_iy < ATTACK_QUEUE_SIZE*/; ++local_iy)
;
	.dbg	line, "main.c", 1677
	lda     #$00
	sta     _local_iy
	tax
L1F31:	lda     _local_iy
	cmp     _local_row_status
	jcs     L1F32
;
; shake_offset = tentacle_offsets[((local_iy + speed) & 3)]; // &3 = %4 = number of entries in array.
;
	.dbg	line, "main.c", 1687
	clc
	adc     L1599
	and     #$03
	sta     ptr1
	txa
	clc
	adc     #>(_tentacle_offsets)
	sta     ptr1+1
	ldy     #<(_tentacle_offsets)
	lda     (ptr1),y
	sta     L1598
;
; if (local_iy == local_row_status - 1)
;
	.dbg	line, "main.c", 1690
	lda     _local_row_status
	sec
	sbc     #$01
	bcs     L15F8
	dex
L15F8:	cpx     #$00
	bne     L15F6
	cmp     _local_iy
	bne     L15F6
;
; BOARD_START_X_PX + (local_ix << 3) + shake_offset,
;
	.dbg	line, "main.c", 1693
	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	clc
	adc     L1598
	ldy     #$02
	sta     (sp),y
;
; (BOARD_END_Y_PX) + (ATTACK_QUEUE_SIZE << 3) - (local_iy << 3),
;
	.dbg	line, "main.c", 1694
	lda     #$E0
	jsr     pusha0
	lda     _local_iy
	jsr     aslax3
	jsr     tossubax
	ldy     #$01
	sta     (sp),y
;
; 0xf9,
;
	.dbg	line, "main.c", 1695
	lda     #$F9
;
; else
;
	.dbg	line, "main.c", 1698
	jmp     L1F3E
;
; BOARD_START_X_PX + (local_ix << 3) + shake_offset,
;
	.dbg	line, "main.c", 1701
L15F6:	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	clc
	adc     L1598
	ldy     #$02
	sta     (sp),y
;
; (BOARD_END_Y_PX) + (ATTACK_QUEUE_SIZE << 3) - (local_iy << 3),
;
	.dbg	line, "main.c", 1702
	lda     #$E0
	jsr     pusha0
	lda     _local_iy
	jsr     aslax3
	jsr     tossubax
	ldy     #$01
	sta     (sp),y
;
; 0xf8,
;
	.dbg	line, "main.c", 1703
	lda     #$F8
L1F3E:	dey
	sta     (sp),y
;
; 1);
;
	.dbg	line, "main.c", 1704
	lda     #$01
	jsr     _oam_spr
;
; for (local_iy = 0; local_iy < local_row_status /*&& local_iy < ATTACK_QUEUE_SIZE*/; ++local_iy)
;
	.dbg	line, "main.c", 1677
	ldx     #$00
	inc     _local_iy
	jmp     L1F31
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 1672
L1F32:	inc     _local_ix
	jmp     L1F30
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 1720
L1F33:	lda     _hit_reaction_remaining
	beq     L1F34
;
; oam_spr((3 << 3) /*+ r*/, (24 << 3), 0x65, 1);
;
	.dbg	line, "main.c", 1724
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C0
	dey
	sta     (sp),y
	lda     #$65
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 25 << 3, 0x64, 1);
;
	.dbg	line, "main.c", 1725
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x74, 1);
;
	.dbg	line, "main.c", 1726
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$74
;
; else
;
	.dbg	line, "main.c", 1745
	jmp     L1F3F
;
; if (attack_style == ATTACK_NEVER)
;
	.dbg	line, "main.c", 1747
L1F34:	lda     _attack_style
	cmp     #$02
	bne     L1624
;
; oam_spr(3 << 3, 25 << 3, 0x63, 1);
;
	.dbg	line, "main.c", 1750
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$63
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x73, 1);
;
	.dbg	line, "main.c", 1751
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$73
;
; else
;
	.dbg	line, "main.c", 1753
	jmp     L1F3F
;
; local_t = tick_count_large % BLINK_LEN;
;
	.dbg	line, "main.c", 1757
L1624:	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     pushax
	ldx     #$01
	lda     #$2C
	jsr     tosumodax
	sta     _local_t
	stx     _local_t+1
;
; if (local_t > BLINK_LEN - 5)
;
	.dbg	line, "main.c", 1759
	cmp     #$28
	txa
	sbc     #$01
;
; else if (local_t > (BLINK_LEN - 10))
;
	.dbg	line, "main.c", 1764
	bcs     L1F54
	lda     _local_t
	cmp     #$23
	lda     _local_t+1
	sbc     #$01
	bcc     L1642
;
; oam_spr(3 << 3, 25 << 3, 0x63, 1);
;
	.dbg	line, "main.c", 1766
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$63
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x73, 1);
;
	.dbg	line, "main.c", 1767
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$73
;
; else if (local_t > BLINK_LEN - 15)
;
	.dbg	line, "main.c", 1769
	jmp     L1F3F
L1642:	lda     _local_t
	cmp     #$1E
	lda     _local_t+1
	sbc     #$01
	bcc     L1F35
;
; oam_spr(3 << 3, 25 << 3, 0x62, 1);
;
	.dbg	line, "main.c", 1771
L1F54:	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$62
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x72, 1);
;
	.dbg	line, "main.c", 1772
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$72
L1F3F:	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; local_t = tick_count & 63;
;
	.dbg	line, "main.c", 1778
L1F35:	lda     _tick_count
	ldx     #$00
	and     #$3F
	sta     _local_t
	stx     _local_t+1
;
; if (local_t > 48)
;
	.dbg	line, "main.c", 1779
	cmp     #$31
	bcc     L1660
;
; local_ix = 0x69;
;
	.dbg	line, "main.c", 1781
	lda     #$69
;
; else if (local_t > 32)
;
	.dbg	line, "main.c", 1783
	jmp     L1F2B
L1660:	lda     _local_t
	cmp     #$21
	lda     _local_t+1
	sbc     #$00
	bcc     L1665
;
; local_ix = 0x68;
;
	.dbg	line, "main.c", 1785
	lda     #$68
;
; else if (local_t > 16)
;
	.dbg	line, "main.c", 1787
	jmp     L1F2B
L1665:	lda     _local_t
	cmp     #$11
	lda     _local_t+1
	sbc     #$00
	bcc     L1F36
;
; local_ix = 0x67;
;
	.dbg	line, "main.c", 1789
	lda     #$67
;
; else
;
	.dbg	line, "main.c", 1791
	jmp     L1F2B
;
; local_ix = 0x66;
;
	.dbg	line, "main.c", 1793
L1F36:	lda     #$66
L1F2B:	sta     _local_ix
;
; oam_spr(8 << 3, 1 << 3, local_ix, 2);
;
	.dbg	line, "main.c", 1796
	jsr     decsp3
	lda     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(24 << 3, 1 << 3, local_ix, 2);
;
	.dbg	line, "main.c", 1797
	jsr     decsp3
	lda     #$C0
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(3 << 3, 10 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1798
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(27 << 3, 10 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1799
	jsr     decsp3
	lda     #$D8
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jmp     _oam_spr
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

	.dbg	func, "movement", "00", extern, "_movement"

.segment	"BSS"

L1686:
	.res	1,$00
L1687:
	.res	1,$00

.segment	"CODE"

;
; hit = 0;
;
	.dbg	line, "main.c", 1808
	lda     #$00
	sta     _hit
;
; temp_fall_frame_counter = 0;
;
	.dbg	line, "main.c", 1809
	sta     _temp_fall_frame_counter
;
; old_x = 0;
;
	.dbg	line, "main.c", 1810
	sta     _old_x
;
; delay_lock_skip = 0;
;
	.dbg	line, "main.c", 1811
	sta     _delay_lock_skip
;
; if (start_delay_remaining == 0)
;
	.dbg	line, "main.c", 1813
	lda     _start_delay_remaining
	bne     L1F5D
;
; --fall_frame_counter;
;
	.dbg	line, "main.c", 1815
	dec     _fall_frame_counter
;
; else
;
	.dbg	line, "main.c", 1817
	jmp     L1F5E
;
; --start_delay_remaining;
;
	.dbg	line, "main.c", 1819
L1F5D:	dec     _start_delay_remaining
;
; if (pad_all_new & (PAD_SELECT | PAD_START))
;
	.dbg	line, "main.c", 1823
L1F5E:	lda     _pad_all_new
	and     #$30
	beq     L1F5F
;
; if (row_to_clear == -1)
;
	.dbg	line, "main.c", 1857
	lda     _row_to_clear
	cmp     #$FF
	bne     L1F5F
;
; attack_queued = 1;
;
	.dbg	line, "main.c", 1859
	lda     #$01
	sta     _attack_queued
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1865
L1F5F:	lda     _pad_all_new
	and     #$80
	beq     L1F60
;
; rotate_cur_cluster(1);
;
	.dbg	line, "main.c", 1867
	lda     #$01
;
; else if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1869
	jmp     L1F59
L1F60:	lda     _pad_all_new
	and     #$40
	beq     L1F61
;
; rotate_cur_cluster(-1);
;
	.dbg	line, "main.c", 1871
	lda     #$FF
L1F59:	jsr     _rotate_cur_cluster
;
; if (horz_button_delay > 0)
;
	.dbg	line, "main.c", 1874
L1F61:	lda     _horz_button_delay
	beq     L1F62
;
; --horz_button_delay;
;
	.dbg	line, "main.c", 1876
	dec     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1879
L1F62:	lda     _cur_block
	sta     _old_x
;
; if (((pad_all & PAD_RIGHT) && horz_button_delay == 0) || (pad_all_new & PAD_RIGHT))
;
	.dbg	line, "main.c", 1880
	lda     _pad_all
	and     #$01
	beq     L1F66
	lda     _horz_button_delay
	beq     L1F69
L1F66:	lda     _pad_all_new
	and     #$01
	beq     L1F6B
;
; horz_button_delay = button_delay;
;
	.dbg	line, "main.c", 1882
L1F69:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad_all_new & PAD_RIGHT))
;
	.dbg	line, "main.c", 1883
	lda     _pad_all_new
	and     #$01
	beq     L1F6A
;
; horz_button_delay <<= 1;
;
	.dbg	line, "main.c", 1885
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1890
L1F6A:	lda     _cur_block
	sta     _old_x
;
; cur_block.x += 1;
;
	.dbg	line, "main.c", 1891
	inc     _cur_block
;
; else if (((pad_all & PAD_LEFT) && horz_button_delay == 0) || pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 1900
	jmp     L1F96
L1F6B:	lda     _pad_all
	and     #$02
	beq     L1F6F
	lda     _horz_button_delay
	beq     L1F72
L1F6F:	lda     _pad_all_new
	and     #$02
	beq     L1F74
;
; horz_button_delay = button_delay;
;
	.dbg	line, "main.c", 1902
L1F72:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad_all_new & PAD_LEFT))
;
	.dbg	line, "main.c", 1903
	lda     _pad_all_new
	and     #$02
	beq     L1F73
;
; horz_button_delay <<= 1;
;
	.dbg	line, "main.c", 1906
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1911
L1F73:	lda     _cur_block
	sta     _old_x
;
; cur_block.x -= 1; // note: wrap around
;
	.dbg	line, "main.c", 1912
	dec     _cur_block
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 1918
L1F96:	lda     _is_last_rotate
	sta     L1687
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 1919
	lda     #$00
	sta     _is_last_rotate
;
; if (cur_block.x != old_x && is_cluster_colliding())
;
	.dbg	line, "main.c", 1925
L1F74:	lda     _old_x
	cmp     _cur_block
	beq     L1F76
	jsr     _is_cluster_colliding
	tax
	beq     L1F76
;
; cur_block.x = old_x;
;
	.dbg	line, "main.c", 1927
	lda     _old_x
	sta     _cur_block
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 1928
	lda     L1687
	sta     _is_last_rotate
;
; horz_button_delay = 0;
;
	.dbg	line, "main.c", 1939
	lda     #$00
	sta     _horz_button_delay
;
; temp_fall_frame_counter = fall_frame_counter;
;
	.dbg	line, "main.c", 1955
L1F76:	lda     _fall_frame_counter
	sta     _temp_fall_frame_counter
;
; hard_drop_performed = 0;
;
	.dbg	line, "main.c", 1957
	lda     #$00
	sta     L1686
;
; if (hard_drops_on && pad_all & PAD_UP && (pad_all & (PAD_LEFT | PAD_RIGHT)) == 0)
;
	.dbg	line, "main.c", 1958
	lda     _hard_drops_on
	beq     L1F82
	lda     _pad_all
	and     #$08
	beq     L1F82
	lda     _pad_all
	and     #$03
	bne     L1F82
;
; if ((pad_all & PAD_UP && hard_drop_tap_required == 0) || pad_all_new & PAD_UP)
;
	.dbg	line, "main.c", 1960
	lda     _pad_all
	and     #$08
	beq     L1F7D
	lda     _hard_drop_tap_required
	beq     L1F80
L1F7D:	lda     _pad_all_new
	and     #$08
	beq     L1F85
;
; --hard_drop_hold_remaining;
;
	.dbg	line, "main.c", 1962
L1F80:	dec     _hard_drop_hold_remaining
;
; if (hard_drop_hold_remaining == 0)
;
	.dbg	line, "main.c", 1964
	bne     L1F85
;
; hard_drop_performed = 1;
;
	.dbg	line, "main.c", 1966
	lda     #$01
	sta     L1686
;
; hard_drop_tap_required = 1;
;
	.dbg	line, "main.c", 1967
	sta     _hard_drop_tap_required
;
; while (!is_cluster_colliding())
;
	.dbg	line, "main.c", 1970
	jmp     L16FD
;
; ++cur_block.y;
;
	.dbg	line, "main.c", 1972
L1F81:	inc     _cur_block+1
;
; while (!is_cluster_colliding())
;
	.dbg	line, "main.c", 1970
L16FD:	jsr     _is_cluster_colliding
	tax
	beq     L1F81
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 1974
	lda     _is_last_rotate
	sta     L1687
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 1975
	lda     #$00
	sta     _is_last_rotate
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 1977
	lda     #$01
	sta     _delay_lock_skip
;
; else
;
	.dbg	line, "main.c", 1985
	jmp     L1F85
;
; if ((pad_all & (PAD_LEFT | PAD_RIGHT)) == 0)
;
	.dbg	line, "main.c", 1987
L1F82:	lda     _pad_all
	and     #$03
	bne     L1F83
;
; hard_drop_tap_required = 0;
;
	.dbg	line, "main.c", 1989
	sta     _hard_drop_tap_required
;
; if (hard_drops_on == 1) // tap
;
	.dbg	line, "main.c", 1991
L1F83:	lda     _hard_drops_on
	cmp     #$01
;
; else if (hard_drops_on == 2) // hold
;
	.dbg	line, "main.c", 1995
	beq     L1F5B
	cmp     #$02
	bne     L1F85
;
; hard_drop_hold_remaining = HARD_DROP_HOLD_TIME;
;
	.dbg	line, "main.c", 1997
L1F5B:	sta     _hard_drop_hold_remaining
;
; if (hard_drop_performed == 0)
;
	.dbg	line, "main.c", 2001
L1F85:	lda     L1686
	bne     L1F8F
;
; if (pad_all_new & PAD_DOWN || delay_lock_remaining != -1)
;
	.dbg	line, "main.c", 2006
	lda     _pad_all_new
	and     #$04
	bne     L1F86
	lda     _delay_lock_remaining
	cmp     #$FF
	beq     L1F89
;
; if (pad_all_new & PAD_DOWN)
;
	.dbg	line, "main.c", 2008
L1F86:	lda     _pad_all_new
	and     #$04
	beq     L1F88
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 2011
	lda     #$01
	sta     _delay_lock_skip
;
; require_new_down_button = 0;
;
	.dbg	line, "main.c", 2013
	lda     #$00
L1F88:	sta     _require_new_down_button
;
; else if ((pad_all & PAD_DOWN) && require_new_down_button == 0)
;
	.dbg	line, "main.c", 2018
	jmp     L1F5C
L1F89:	lda     _pad_all
	and     #$04
	beq     L1F8E
	lda     _require_new_down_button
	bne     L1F8E
;
; fall_frame_counter = MIN(fall_frame_counter, 1);
;
	.dbg	line, "main.c", 2021
	lda     _fall_frame_counter
	bne     L1F8D
	jmp     L1F5C
L1F8D:	lda     #$01
L1F5C:	sta     _fall_frame_counter
;
; if (fall_frame_counter == 0)
;
	.dbg	line, "main.c", 2024
L1F8E:	lda     _fall_frame_counter
	bne     L1F8F
;
; start_delay_remaining = 0;
;
	.dbg	line, "main.c", 2029
	sta     _start_delay_remaining
;
; cur_block.y += 1;
;
	.dbg	line, "main.c", 2031
	inc     _cur_block+1
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2032
	lda     _is_last_rotate
	sta     L1687
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2033
	lda     #$00
	sta     _is_last_rotate
;
; fall_frame_counter = fall_rate;
;
	.dbg	line, "main.c", 2034
	lda     _fall_rate
	sta     _fall_frame_counter
;
; if (fall_rate > DELAY_LOCK_LEN)
;
	.dbg	line, "main.c", 2040
L1F8F:	lda     _fall_rate
	cmp     #$10
	lda     #$00
	bcc     L1F91
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 2042
	lda     #$01
	sta     _delay_lock_skip
;
; hit = 0;
;
	.dbg	line, "main.c", 2047
	lda     #$00
L1F91:	sta     _hit
;
; if (is_cluster_colliding())
;
	.dbg	line, "main.c", 2050
	jsr     _is_cluster_colliding
	tax
	beq     L1748
;
; if (delay_lock_remaining == -1)
;
	.dbg	line, "main.c", 2052
	lda     _delay_lock_remaining
	cmp     #$FF
	bne     L174A
;
; delay_lock_remaining = DELAY_LOCK_LEN - fall_rate;
;
	.dbg	line, "main.c", 2054
	lda     #$0F
	sec
	sbc     _fall_rate
	cmp     #$80
	sta     _delay_lock_remaining
;
; --delay_lock_remaining;
;
	.dbg	line, "main.c", 2060
L174A:	dec     _delay_lock_remaining
;
; cur_block.y -= 1;
;
	.dbg	line, "main.c", 2066
	dec     _cur_block+1
;
; if (delay_lock_remaining == 0 || delay_lock_skip)
;
	.dbg	line, "main.c", 2067
	lda     _delay_lock_remaining
	beq     L1755
	lda     _delay_lock_skip
	beq     L175E
;
; hit = 1;
;
	.dbg	line, "main.c", 2069
L1755:	lda     #$01
	sta     _hit
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 2070
	lda     L1687
	sta     _is_last_rotate
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 2076
L1748:	lda     #$FF
	sta     _delay_lock_remaining
;
; if (hit)
;
	.dbg	line, "main.c", 2079
L175E:	lda     _hit
	beq     L1761
;
; is_tspin = check_tspin();
;
	.dbg	line, "main.c", 2081
	jsr     _check_tspin
	sta     _is_tspin
;
; put_cur_cluster();
;
	.dbg	line, "main.c", 2082
	jsr     _put_cur_cluster
;
; delay_spawn_remaining = DELAY_SPAWN_LEN;
;
	.dbg	line, "main.c", 2085
	lda     #$05
	sta     _delay_spawn_remaining
;
; }
;
	.dbg	line, "main.c", 2088
L1761:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ set_block (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_block: near

	.dbg	func, "set_block", "00", extern, "_set_block"

.segment	"CODE"

;
; if (in_y <= BOARD_OOB_END)
;
	.dbg	line, "main.c", 2097
	lda     _in_y
	cmp     #$04
;
; return;
;
	.dbg	line, "main.c", 2100
	bcc     L1768
;
; address = get_ppu_addr(cur_nt, (in_x << 3) + BOARD_START_X_PX, (in_y << 3) + BOARD_START_Y_PX);
;
	.dbg	line, "main.c", 2103
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     _in_x
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
	lda     _in_y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(in_id, address);
;
	.dbg	line, "main.c", 2104
	lda     _in_id
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; game_board[TILE_TO_BOARD_INDEX(in_x, in_y)] = in_id;
;
	.dbg	line, "main.c", 2107
	ldy     _in_y
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _in_x
	bcc     L1F98
	inx
	clc
L1F98:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	lda     _in_id
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2108
L1768:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ set_block_nt (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_block_nt: near

	.dbg	func, "set_block_nt", "00", extern, "_set_block_nt"
	.dbg	sym, "x", "00", auto, 3
	.dbg	sym, "y", "00", auto, 2
	.dbg	sym, "id", "00", auto, 1
	.dbg	sym, "nt", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2111
	jsr     pusha
;
; if (y <= BOARD_OOB_END)
;
	.dbg	line, "main.c", 2112
	ldy     #$02
	lda     (sp),y
	cmp     #$04
;
; return;
;
	.dbg	line, "main.c", 2115
	bcc     L1780
;
; address = get_ppu_addr(nt, (x << 3) + BOARD_START_X_PX, (y << 3) + BOARD_START_Y_PX);
;
	.dbg	line, "main.c", 2118
	jsr     decsp2
	lda     (sp),y
	dey
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$00
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(id, address);
;
	.dbg	line, "main.c", 2119
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; game_board[TILE_TO_BOARD_INDEX(x, y)] = id;
;
	.dbg	line, "main.c", 2121
	ldy     #$02
	lda     (sp),y
	tay
	lda     _board_lookup_y,y
	sta     ptr1
	ldx     #$00
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L1F9A
	inx
	clc
L1F9A:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2122
L1780:	jmp     incsp4
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ put_cur_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_cur_cluster: near

	.dbg	func, "put_cur_cluster", "00", extern, "_put_cur_cluster"

.segment	"BSS"

L1799:
	.res	1,$00
L179A:
	.res	1,$00

.segment	"CODE"

;
; max_y = 0;
;
	.dbg	line, "main.c", 2140
	lda     #$00
	sta     _max_y
;
; min_y = 0xff; // max
;
	.dbg	line, "main.c", 2141
	lda     #$FF
	sta     _min_y
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2143
	lda     #$00
	sta     L1799
L1F9D:	lda     L1799
	cmp     #$04
	bcs     L17A0
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 2146
	ldy     L1799
	lda     _cur_cluster,y
	sta     L179A
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2149
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2150
	lda     L179A
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; in_x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2154
	lda     _cur_block
	clc
	adc     _local_ix
	sta     _in_x
;
; in_y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2155
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     _in_y
;
; in_id = cur_cluster.sprite;
;
	.dbg	line, "main.c", 2156
	lda     _cur_cluster+20
	sta     _in_id
;
; if (in_y < min_y)
;
	.dbg	line, "main.c", 2160
	lda     _in_y
	cmp     _min_y
	bcs     L1F9E
;
; min_y = in_y;
;
	.dbg	line, "main.c", 2162
	sta     _min_y
;
; if (in_y > max_y)
;
	.dbg	line, "main.c", 2164
L1F9E:	lda     _in_y
	sec
	sbc     _max_y
	bcc     L17BB
	beq     L17BB
;
; max_y = in_y;
;
	.dbg	line, "main.c", 2166
	lda     _in_y
	sta     _max_y
;
; set_block();
;
	.dbg	line, "main.c", 2169
L17BB:	jsr     _set_block
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2143
	inc     L1799
	jmp     L1F9D
;
; SFX_PLAY_WRAPPER(SOUND_LAND);
;
	.dbg	line, "main.c", 2174
L17A0:	lda     _sfx_on
	beq     L1F9F
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; cur_block.y = 255;
;
	.dbg	line, "main.c", 2187
L1F9F:	lda     #$FF
	sta     _cur_block+1
;
; oam_set(0);
;
	.dbg	line, "main.c", 2191
	lda     #$00
	jsr     _oam_set
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2193
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2194
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2195
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2196
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; if (attack_style == ATTACK_ON_LAND)
;
	.dbg	line, "main.c", 2199
	lda     _attack_style
	bne     L17DE
;
; attack_queued = 1;
;
	.dbg	line, "main.c", 2201
	lda     #$01
	sta     _attack_queued
;
; clear_rows_in_data(max_y);
;
	.dbg	line, "main.c", 2210
L17DE:	lda     _max_y
	jmp     _clear_rows_in_data
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_cluster_colliding (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_cluster_colliding: near

	.dbg	func, "is_cluster_colliding", "00", extern, "_is_cluster_colliding"

.segment	"BSS"

L17F5:
	.res	1,$00
L17F6:
	.res	1,$00
L17F7:
	.res	1,$00
L17F8:
	.res	1,$00

.segment	"CODE"

;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2239
	lda     #$00
	sta     L17F7
	tax
L1FA3:	lda     L17F7
	cmp     #$04
	bcs     L1FA6
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 2242
	ldy     L17F7
	lda     _cur_cluster,y
	sta     L17F8
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2245
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2246
	lda     L17F8
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2248
	lda     _cur_block
	clc
	adc     _local_ix
	sta     L17F5
;
; y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2249
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     L17F6
;
; if (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD)
;
	.dbg	line, "main.c", 2251
	cmp     #$18
	bcs     L1FA4
	lda     L17F5
	cmp     #$0A
	bcc     L180F
;
; return 1;
;
	.dbg	line, "main.c", 2254
L1FA4:	ldx     #$00
	lda     #$01
	rts
;
; if (game_board[TILE_TO_BOARD_INDEX(x, y)]) // != 5 && game_board[TILE_TO_BOARD_INDEX(x,y)] != 0)
;
	.dbg	line, "main.c", 2258
L180F:	ldy     L17F6
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     L17F5
	bcc     L1FA2
	inx
L1FA2:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	ldx     #$00
	lda     (ptr1),y
	beq     L1FA5
;
; return 1;
;
	.dbg	line, "main.c", 2260
	lda     #$01
	rts
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2239
L1FA5:	inc     L17F7
	jmp     L1FA3
;
; return 0;
;
	.dbg	line, "main.c", 2264
L1FA6:	txa
;
; }
;
	.dbg	line, "main.c", 2265
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ morton_compact_one_by_one (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_morton_compact_one_by_one: near

	.dbg	func, "morton_compact_one_by_one", "00", extern, "_morton_compact_one_by_one"
	.dbg	sym, "x", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2469
	jsr     pusha
;
; x &= 0x55;
;
	.dbg	line, "main.c", 2470
	ldy     #$00
	lda     (sp),y
	and     #$55
	sta     (sp),y
;
; x = ((x ^ (x >> 1)) & 0x33);
;
	.dbg	line, "main.c", 2471
	lsr     a
	eor     (sp),y
	and     #$33
	sta     (sp),y
;
; x = ((x ^ (x >> 2)) & 0x0f);
;
	.dbg	line, "main.c", 2472
	lsr     a
	lsr     a
	eor     (sp),y
	and     #$0F
	sta     (sp),y
;
; return x;
;
	.dbg	line, "main.c", 2473
	ldx     #$00
	lda     (sp),y
;
; }
;
	.dbg	line, "main.c", 2474
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_new_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_new_cluster: near

	.dbg	func, "spawn_new_cluster", "00", extern, "_spawn_new_cluster"

.segment	"BSS"

L181F:
	.res	1,$00
L1820:
	.res	1,$00

.segment	"CODE"

;
; id = 0;
;
	.dbg	line, "main.c", 2272
	lda     #$00
	sta     _id
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 2274
	lda     #$FF
	sta     _delay_lock_remaining
;
; require_new_down_button = 1;
;
	.dbg	line, "main.c", 2276
	lda     #$01
	sta     _require_new_down_button
;
; fall_frame_counter = fall_rate;
;
	.dbg	line, "main.c", 2277
	lda     _fall_rate
	sta     _fall_frame_counter
;
; cur_rot = 0;
;
	.dbg	line, "main.c", 2279
	lda     #$00
	sta     _cur_rot
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2280
	sta     _is_last_rotate
;
; memcpy(cur_cluster.def, next_cluster.def, 4 * 4);
;
	.dbg	line, "main.c", 2283
	ldy     #$0F
L1831:	lda     _next_cluster+4,y
	sta     _cur_cluster+4,y
	dey
	bpl     L1831
;
; memcpy(cur_cluster.layout, cur_cluster.def[0], 4);
;
	.dbg	line, "main.c", 2284
	ldy     #$03
L1837:	lda     _cur_cluster+4,y
	sta     _cur_cluster,y
	dey
	bpl     L1837
;
; cur_cluster.sprite = next_cluster.sprite;
;
	.dbg	line, "main.c", 2285
	lda     _next_cluster+20
	sta     _cur_cluster+20
;
; cur_cluster.id = next_cluster.id;
;
	.dbg	line, "main.c", 2286
	lda     _next_cluster+21
	sta     _cur_cluster+21
;
; cur_block.x = 3; //(BOARD_END_Y_PX_BOARD >> 1);
;
	.dbg	line, "main.c", 2289
	lda     #$03
	sta     _cur_block
;
; cur_block.y = cluster_offsets[cur_cluster.id];
;
	.dbg	line, "main.c", 2290
	ldy     _cur_cluster+21
	lda     _cluster_offsets,y
	sta     _cur_block+1
;
; id = rand() % NUM_CLUSTERS;
;
	.dbg	line, "main.c", 2297
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosmoda0
	sta     _id
;
; if (id == cur_cluster.id)
;
	.dbg	line, "main.c", 2298
	lda     _cur_cluster+21
	cmp     _id
	bne     L1FAB
;
; id = rand() % NUM_CLUSTERS;
;
	.dbg	line, "main.c", 2300
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosmoda0
	sta     _id
;
; next_cluster.id = id;
;
	.dbg	line, "main.c", 2316
L1FAB:	lda     _id
	sta     _next_cluster+21
;
; memcpy(next_cluster.def, cluster_defs_classic[id], (4 * 4));
;
	.dbg	line, "main.c", 2317
	lda     #<(_next_cluster+4)
	ldx     #>(_next_cluster+4)
	jsr     pushax
	ldx     #$00
	lda     _id
	asl     a
	bcc     L1FAA
	inx
	clc
L1FAA:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; memcpy(next_cluster.layout, next_cluster.def[0], 4);
;
	.dbg	line, "main.c", 2318
	ldy     #$03
L1855:	lda     _next_cluster+4,y
	sta     _next_cluster,y
	dey
	bpl     L1855
;
; next_cluster.sprite = cluster_sprites[id];
;
	.dbg	line, "main.c", 2319
	ldy     _id
	lda     _cluster_sprites,y
	sta     _next_cluster+20
;
; local_iy = 0;
;
	.dbg	line, "main.c", 2323
	lda     #$00
	sta     _local_iy
;
; local_ix = 0;
;
	.dbg	line, "main.c", 2324
	sta     _local_ix
;
; local_t = next_cluster.sprite;
;
	.dbg	line, "main.c", 2325
	sta     _local_t+1
	lda     _next_cluster+20
	sta     _local_t
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 16));
;
	.dbg	line, "main.c", 2328
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$10
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 24));
;
	.dbg	line, "main.c", 2329
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2331
	lda     #$00
	sta     L181F
L1FAC:	lda     L181F
	cmp     #$04
	bcs     L1FAE
;
; j = next_cluster.layout[i];
;
	.dbg	line, "main.c", 2334
	ldy     L181F
	lda     _next_cluster,y
	sta     L1820
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2337
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2338
	lda     L1820
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; one_vram_buffer(local_t, get_ppu_addr(cur_nt, 120 + (local_ix << 3), (next_cluster.id != 3 ? 16 : 8) + (local_iy << 3))); //8 + (local_iy << 3)
;
	.dbg	line, "main.c", 2340
	lda     _local_t
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$78
	dey
	sta     (sp),y
	lda     _next_cluster+21
	cmp     #$03
	beq     L1FAD
	lda     #$10
	jmp     L188B
L1FAD:	lda     #$08
L188B:	sta     ptr1
	lda     _local_iy
	asl     a
	asl     a
	asl     a
	clc
	adc     ptr1
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2331
	inc     L181F
	jmp     L1FAC
;
; if (state != STATE_OVER && is_cluster_colliding())
;
	.dbg	line, "main.c", 2348
L1FAE:	lda     _state
	cmp     #$06
	beq     L1FAF
	jsr     _is_cluster_colliding
	tax
	bne     L188F
L1FAF:	rts
;
; put_cur_cluster();
;
	.dbg	line, "main.c", 2352
L188F:	jsr     _put_cur_cluster
;
; go_to_state(STATE_OVER);
;
	.dbg	line, "main.c", 2353
	lda     #$06
	jmp     _go_to_state
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ rotate_cur_cluster (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate_cur_cluster: near

	.dbg	func, "rotate_cur_cluster", "00", extern, "_rotate_cur_cluster"
	.dbg	sym, "dir", "00", auto, 0

.segment	"BSS"

L1896:
	.res	1,$00
L1897:
	.res	1,$00
L1898:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2381
	jsr     pusha
;
; old_rot = cur_rot;
;
	.dbg	line, "main.c", 2384
	lda     _cur_rot
	sta     L1896
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2385
	lda     _is_last_rotate
	sta     L1897
;
; cur_rot = (cur_rot + dir) & 3; // % 4
;
	.dbg	line, "main.c", 2386
	ldy     #$00
	lda     (sp),y
	clc
	adc     _cur_rot
	and     #$03
	sta     _cur_rot
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4);
;
	.dbg	line, "main.c", 2388
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; if (is_cluster_colliding())
;
	.dbg	line, "main.c", 2390
	jsr     _is_cluster_colliding
	tax
	jeq     L1FC3
;
; if (cur_cluster.id != 2) //Is not line cluster
;
	.dbg	line, "main.c", 2392
	lda     _cur_cluster+21
	cmp     #$02
	jeq     L1FBB
;
; if (((old_rot == 0) & (cur_rot == 1)) || ((old_rot == 2) & (cur_rot == 1)))
;
	.dbg	line, "main.c", 2394
	lda     L1896
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1FB4
	lda     L1896
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1FB5
;
; result = rotate_srs(0);
;
	.dbg	line, "main.c", 2396
L1FB4:	lda     #$00
;
; else if (((old_rot == 1) & (cur_rot == 0)) || ((old_rot == 1) & (cur_rot == 2)))
;
	.dbg	line, "main.c", 2398
	jmp     L1FC5
L1FB5:	lda     L1896
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1FB6
	lda     L1896
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1FB7
;
; result = rotate_srs(1);
;
	.dbg	line, "main.c", 2400
L1FB6:	lda     #$01
;
; else if (((old_rot == 2) & (cur_rot == 3)) || ((old_rot == 0) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2402
	jmp     L1FC5
L1FB7:	lda     L1896
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1FB8
	lda     L1896
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1FB9
;
; result = rotate_srs(2);
;
	.dbg	line, "main.c", 2404
L1FB8:	lda     #$02
;
; else if (((old_rot == 3) & (cur_rot == 2)) || ((old_rot == 3) & (cur_rot == 0)))
;
	.dbg	line, "main.c", 2406
	jmp     L1FC5
L1FB9:	lda     L1896
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1FBA
	lda     L1896
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	jeq     L1910
;
; result = rotate_srs(3);
;
	.dbg	line, "main.c", 2408
L1FBA:	lda     #$03
	jsr     _rotate_srs
;
; else
;
	.dbg	line, "main.c", 2411
	jmp     L1FB2
;
; if (((old_rot == 0) & (cur_rot == 1)) ||  ((old_rot == 3) & (cur_rot == 2)))
;
	.dbg	line, "main.c", 2414
L1FBB:	lda     L1896
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1FBC
	lda     L1896
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1FBD
;
; result = rotate_srs(0);
;
	.dbg	line, "main.c", 2416
L1FBC:	lda     #$00
	jsr     _rotate_srs
;
; else if (((old_rot == 1) & (cur_rot == 0)) || ((old_rot == 2) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2418
	jmp     L1FB2
L1FBD:	lda     L1896
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1FBE
	lda     L1896
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1FBF
;
; result = rotate_srs(1);
;
	.dbg	line, "main.c", 2420
L1FBE:	lda     #$01
	jsr     _rotate_srs
;
; else if (((old_rot == 1) & (cur_rot == 2)) || ((old_rot == 0) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2422
	jmp     L1FB2
L1FBF:	lda     L1896
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1FC0
	lda     L1896
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1FC1
;
; result = rotate_srs(2);
;
	.dbg	line, "main.c", 2424
L1FC0:	lda     #$02
	jsr     _rotate_srs
;
; else if (((old_rot == 2) & (cur_rot == 1)) || ((old_rot == 3) & (cur_rot == 0)))
;
	.dbg	line, "main.c", 2426
	jmp     L1FB2
L1FC1:	lda     L1896
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1FC2
	lda     L1896
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1910
;
; result = rotate_srs(3);
;
	.dbg	line, "main.c", 2428
L1FC2:	lda     #$03
L1FC5:	jsr     _rotate_srs
;
; else
;
	.dbg	line, "main.c", 2432
	jmp     L1FB2
;
; result = 1;
;
	.dbg	line, "main.c", 2434
L1FC3:	lda     #$01
L1FB2:	sta     L1898
;
; if (result == 0)
;
	.dbg	line, "main.c", 2437
L1910:	lda     L1898
	bne     L1FC4
;
; cur_rot = old_rot;
;
	.dbg	line, "main.c", 2439
	lda     L1896
	sta     _cur_rot
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 2440
	lda     L1897
	sta     _is_last_rotate
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4);
;
	.dbg	line, "main.c", 2441
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; SFX_PLAY_WRAPPER(SOUND_BLOCKED);
;
	.dbg	line, "main.c", 2442
	lda     _sfx_on
	beq     L1927
	lda     #$06
	jsr     pusha
	lda     #$00
;
; else
;
	.dbg	line, "main.c", 2444
	jmp     L1FB3
;
; is_last_rotate = 1;
;
	.dbg	line, "main.c", 2446
L1FC4:	lda     #$01
	sta     _is_last_rotate
;
; SFX_PLAY_WRAPPER(SOUND_ROTATE);
;
	.dbg	line, "main.c", 2447
	lda     _sfx_on
	beq     L1927
	lda     #$00
	jsr     pusha
L1FB3:	jsr     _sfx_play
;
; }
;
	.dbg	line, "main.c", 2449
L1927:	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ check_tspin (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_tspin: near

	.dbg	func, "check_tspin", "00", extern, "_check_tspin"

.segment	"BSS"

L1EE8:
	.res	1,$00
L1EE9:
	.res	1,$00
L1EEA:
	.res	1,$00
L1EEB:
	.res	1,$00

.segment	"CODE"

;
; result = 0;
;
	.dbg	line, "main.c", 3712
	lda     #$00
	sta     L1EEB
;
; if (cur_cluster.id == 4 & is_last_rotate == 1) //Is T cluster
;
	.dbg	line, "main.c", 3713
	lda     _cur_cluster+21
	cmp     #$04
	jsr     booleq
	jsr     pusha0
	lda     _is_last_rotate
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	jeq     L1FCA
;
; j = cur_cluster.layout[2];
;
	.dbg	line, "main.c", 3716
	lda     _cur_cluster+2
	sta     L1EEA
;
; local_ix = morton_compact_one_by_one(j >> 0); 
;
	.dbg	line, "main.c", 3719
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); 
;
	.dbg	line, "main.c", 3720
	lda     L1EEA
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 3722
	lda     _cur_block
	clc
	adc     _local_ix
	sta     L1EE8
;
; y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 3723
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     L1EE9
;
; result += is_block_occupied(x + 1, y - 1);
;
	.dbg	line, "main.c", 3725
	lda     L1EE8
	clc
	adc     #$01
	jsr     pusha
	lda     L1EE9
	sec
	sbc     #$01
	jsr     _is_block_occupied
	clc
	adc     L1EEB
	sta     L1EEB
;
; result += is_block_occupied(x - 1, y + 1);
;
	.dbg	line, "main.c", 3726
	lda     L1EE8
	sec
	sbc     #$01
	jsr     pusha
	lda     L1EE9
	clc
	adc     #$01
	jsr     _is_block_occupied
	clc
	adc     L1EEB
	sta     L1EEB
;
; result += is_block_occupied(x + 1, y + 1);
;
	.dbg	line, "main.c", 3727
	lda     L1EE8
	clc
	adc     #$01
	jsr     pusha
	lda     L1EE9
	clc
	adc     #$01
	jsr     _is_block_occupied
	clc
	adc     L1EEB
	sta     L1EEB
;
; result += is_block_occupied(x - 1, y - 1);
;
	.dbg	line, "main.c", 3728
	lda     L1EE8
	sec
	sbc     #$01
	jsr     pusha
	lda     L1EE9
	sec
	sbc     #$01
	jsr     _is_block_occupied
	clc
	adc     L1EEB
	sta     L1EEB
;
; if (result >= 3)
;
	.dbg	line, "main.c", 3730
	cmp     #$03
	lda     #$00
	bcc     L1FC8
;
; result = 1;
;
	.dbg	line, "main.c", 3732
	lda     #$01
;
; result = 0;
;
	.dbg	line, "main.c", 3736
L1FC8:	sta     L1EEB
;
; return result;
;
	.dbg	line, "main.c", 3740
	ldx     #$00
L1FCA:	lda     L1EEB
;
; }
;
	.dbg	line, "main.c", 3741
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ rotate_srs (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate_srs: near

	.dbg	func, "rotate_srs", "00", extern, "_rotate_srs"
	.dbg	sym, "case_id", "00", auto, 0

.segment	"BSS"

L192E:
	.res	1,$00
L192F:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2452
	jsr     pusha
;
; for (test = 0; test < 5; ++test)
;
	.dbg	line, "main.c", 2455
	lda     #$00
	sta     L192E
	tax
L1FCE:	lda     L192E
	cmp     #$05
	bcs     L1FD1
;
; morton = (cur_cluster.id == 2 ? srs_line_rotate_lookup[case_id][test] : srs_non_line_rotate_lookup[case_id][test]);
;
	.dbg	line, "main.c", 2457
	lda     _cur_cluster+21
	cmp     #$02
	bne     L193B
	lda     (sp,x)
	jsr     mulax5
	clc
	adc     #<(_srs_line_rotate_lookup)
	sta     ptr1
	txa
	adc     #>(_srs_line_rotate_lookup)
	jmp     L1FD5
L193B:	lda     (sp,x)
	jsr     mulax5
	clc
	adc     #<(_srs_non_line_rotate_lookup)
	sta     ptr1
	txa
	adc     #>(_srs_non_line_rotate_lookup)
L1FD5:	sta     ptr1+1
	ldy     L192E
	lda     (ptr1),y
	cmp     #$80
	sta     L192F
;
; cur_block.x += (morton_compact_one_by_one(morton >> 0) - 3);
;
	.dbg	line, "main.c", 2458
	jsr     _morton_compact_one_by_one
	sec
	sbc     #$03
	clc
	adc     _cur_block
	sta     _cur_block
;
; cur_block.y += (morton_compact_one_by_one(morton >> 1) - 3);
;
	.dbg	line, "main.c", 2459
	lda     L192F
	cmp     #$80
	ror     a
	jsr     _morton_compact_one_by_one
	sec
	sbc     #$03
	clc
	adc     _cur_block+1
	sta     _cur_block+1
;
; if (!is_cluster_colliding())
;
	.dbg	line, "main.c", 2460
	jsr     _is_cluster_colliding
	tax
	bne     L1932
;
; return 1;
;
	.dbg	line, "main.c", 2462
	lda     #$01
	jmp     incsp1
;
; for (test = 0; test < 5; ++test)
;
	.dbg	line, "main.c", 2455
L1932:	ldx     #$00
	inc     L192E
	jmp     L1FCE
;
; return 0;
;
	.dbg	line, "main.c", 2465
L1FD1:	txa
;
; }
;
	.dbg	line, "main.c", 2466
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ go_to_state (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_go_to_state: near

	.dbg	func, "go_to_state", "00", extern, "_go_to_state"
	.dbg	sym, "new_state", "00", auto, 0

.segment	"BSS"

L1963:
	.res	1,$00
L1964:
	.res	1,$00
L1965:
	.res	1,$00
L1966:
	.res	1,$00
L1967:
	.res	1,$00
L1968:
	.res	4,$00
L1969:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2477
	jsr     pusha
;
; fade_delay = 5;
;
	.dbg	line, "main.c", 2487
	lda     #$05
	sta     L1964
;
; prev_state = state;
;
	.dbg	line, "main.c", 2488
	lda     _state
	sta     L1965
;
; switch (state)
;
	.dbg	line, "main.c", 2490
	lda     _state
;
; }
;
	.dbg	line, "main.c", 2586
	cmp     #$01
	beq     L1972
	cmp     #$03
	beq     L1983
	cmp     #$04
	beq     L1FE5
	cmp     #$07
	beq     L1972
	cmp     #$08
	jeq     L1FEF
	jmp     L1970
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 2495
L1972:	lda     _music_on
	jeq     L1970
	lda     $4017
	and     #$80
	beq     L2008
	lda     _credits_remaining
	cmp     _game_cost
	jcc     L1970
	lda     #$00
L2008:	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 2496
	jmp     L1970
;
; bank_bg(0);
;
	.dbg	line, "main.c", 2502
L1983:	lda     #$00
	jsr     _bank_bg
;
; bank_spr(1);
;
	.dbg	line, "main.c", 2503
	lda     #$01
	jsr     _bank_spr
;
; pal_bg(palette_bg);
;
	.dbg	line, "main.c", 2505
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; saved_starting_level = cur_level;
;
	.dbg	line, "main.c", 2506
	lda     _cur_level
	sta     _saved_starting_level
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 2507
	lda     _cur_level
	cmp     #$1E
	bcs     L1FE4
	jmp     L1996
L1FE4:	lda     #$1E
L1996:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 2508
	lda     #$FF
	sta     _row_to_clear
;
; start_delay_remaining = START_DELAY;
;
	.dbg	line, "main.c", 2509
	lda     #$78
	sta     _start_delay_remaining
;
; display_level();
;
	.dbg	line, "main.c", 2510
	jsr     _display_level
;
; display_score();
;
	.dbg	line, "main.c", 2511
	jsr     _display_score
;
; break;
;
	.dbg	line, "main.c", 2512
	jmp     L1970
;
; high_score_entry_placement = 0xff;
;
	.dbg	line, "main.c", 2528
L1FE5:	lda     #$FF
	sta     _high_score_entry_placement
;
; if (attract_gameplay_enabled)
;
	.dbg	line, "main.c", 2529
	lda     _attract_gameplay_enabled
	beq     L1FE6
;
; auto_forward_leaderboards = 3; // cycle through all boards.
;
	.dbg	line, "main.c", 2531
	lda     #$03
;
; else
;
	.dbg	line, "main.c", 2533
	jmp     L1FDC
;
; auto_forward_leaderboards = 1; // auto forward after 10 seconds.
;
	.dbg	line, "main.c", 2535
L1FE6:	lda     #$01
L1FDC:	sta     _auto_forward_leaderboards
;
; if (cur_score > 0 && IS_PRIMARY_CPU && !attract_gameplay_enabled)
;
	.dbg	line, "main.c", 2537
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jeq     L1970
	lda     _attract_gameplay_enabled
	jne     L1970
;
; for (i = 0; i < 3; ++i)
;
	.dbg	line, "main.c", 2543
	sta     L1963
L1FEA:	lda     L1963
	cmp     #$03
	jcs     L1FEE
;
; if (high_scores_vs_value[attack_style][cur_level_vs_setting][i] == NO_SCORE || cur_score > high_scores_vs_value[attack_style][cur_level_vs_setting][i])
;
	.dbg	line, "main.c", 2545
	lda     _attack_style
	jsr     pusha0
	lda     #$30
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_value)
	tay
	txa
	adc     #>(_high_scores_vs_value)
	tax
	tya
	jsr     pushax
	lda     _cur_level_vs_setting
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     L1963
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldeaxi
	jsr     pusheax
	ldx     #$FF
	stx     sreg
	stx     sreg+1
	txa
	jsr     toseqeax
	bne     L19B9
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	jsr     pusheax
	lda     _attack_style
	jsr     pusha0
	lda     #$30
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_value)
	tay
	txa
	adc     #>(_high_scores_vs_value)
	tax
	tya
	jsr     pushax
	lda     _cur_level_vs_setting
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     L1963
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldeaxi
	jsr     tosugteax
	jeq     L1FED
;
; high_score_entry_placement = i;
;
	.dbg	line, "main.c", 2547
L19B9:	lda     L1963
	sta     _high_score_entry_placement
;
; for (j = 2; j != i; --j)
;
	.dbg	line, "main.c", 2548
	lda     #$02
	sta     L1966
L1FEB:	lda     L1963
	cmp     L1966
	jeq     L1FEC
;
; if (high_scores_vs_value[attack_style][cur_level_vs_setting][j - 1] != NO_SCORE)
;
	.dbg	line, "main.c", 2550
	lda     _attack_style
	jsr     pusha0
	lda     #$30
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_value)
	tay
	txa
	adc     #>(_high_scores_vs_value)
	tax
	tya
	jsr     pushax
	lda     _cur_level_vs_setting
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     L1966
	sec
	sbc     #$01
	bcs     L19D1
	dex
L19D1:	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldeaxi
	jsr     pusheax
	ldx     #$FF
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jeq     L19C6
;
; high_scores_vs_value[attack_style][cur_level_vs_setting][j] = high_scores_vs_value[attack_style][cur_level_vs_setting][j - 1];
;
	.dbg	line, "main.c", 2552
	lda     _attack_style
	jsr     pusha0
	lda     #$30
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_value)
	tay
	txa
	adc     #>(_high_scores_vs_value)
	tax
	tya
	jsr     pushax
	lda     _cur_level_vs_setting
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     L1966
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	lda     _attack_style
	jsr     pusha0
	lda     #$30
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_value)
	tay
	txa
	adc     #>(_high_scores_vs_value)
	tax
	tya
	jsr     pushax
	lda     _cur_level_vs_setting
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     L1966
	sec
	sbc     #$01
	bcs     L19DB
	dex
L19DB:	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldeaxi
	ldy     #$00
	jsr     steaxspidx
;
; memcpy(high_scores_vs_initials[attack_style][cur_level_vs_setting][j], high_scores_vs_initials[attack_style][cur_level_vs_setting][j - 1], 3);
;
	.dbg	line, "main.c", 2553
	lda     _attack_style
	jsr     pusha0
	lda     #$24
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_initials)
	tay
	txa
	adc     #>(_high_scores_vs_initials)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _cur_level_vs_setting
	jsr     mulax9
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     L1966
	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	lda     _attack_style
	jsr     pusha0
	lda     #$24
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_initials)
	tay
	txa
	adc     #>(_high_scores_vs_initials)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _cur_level_vs_setting
	jsr     mulax9
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     L1966
	sec
	sbc     #$01
	bcs     L19E5
	dex
L19E5:	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     _memcpy
;
; for (j = 2; j != i; --j)
;
	.dbg	line, "main.c", 2548
L19C6:	dec     L1966
	jmp     L1FEB
;
; high_scores_vs_value[attack_style][cur_level_vs_setting][i] = cur_score;
;
	.dbg	line, "main.c", 2556
L1FEC:	lda     _attack_style
	jsr     pusha0
	lda     #$30
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_value)
	tay
	txa
	adc     #>(_high_scores_vs_value)
	tax
	tya
	jsr     pushax
	lda     _cur_level_vs_setting
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	jsr     tosaddax
	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     L1963
	jsr     aslax2
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     pushax
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	ldy     #$00
	jsr     steaxspidx
;
; memcpy(high_scores_vs_initials[attack_style][cur_level_vs_setting][i], "---", 3);
;
	.dbg	line, "main.c", 2557
	lda     _attack_style
	jsr     pusha0
	lda     #$24
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_initials)
	tay
	txa
	adc     #>(_high_scores_vs_initials)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _cur_level_vs_setting
	jsr     mulax9
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     L1963
	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	lda     #<(L19F1)
	ldx     #>(L19F1)
	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     _memcpy
;
; cur_score = NO_SCORE;
;
	.dbg	line, "main.c", 2558
	lda     #$FF
	sta     _cur_score
	sta     _cur_score+1
	sta     _cur_score+2
	sta     _cur_score+3
;
; break;
;
	.dbg	line, "main.c", 2559
	jmp     L1FEE
;
; for (i = 0; i < 3; ++i)
;
	.dbg	line, "main.c", 2543
L1FED:	inc     L1963
	jmp     L1FEA
;
; POKE(0x4016, 0);
;
	.dbg	line, "main.c", 2564
L1FEE:	lda     #$00
	sta     $4016
;
; attract_gameplay_enabled = 0;
;
	.dbg	line, "main.c", 2566
	sta     _attract_gameplay_enabled
;
; break;
;
	.dbg	line, "main.c", 2574
	jmp     L1970
;
; high_score_entry_placement = 0xff;
;
	.dbg	line, "main.c", 2580
L1FEF:	lda     #$FF
	sta     _high_score_entry_placement
;
; state = new_state;
;
	.dbg	line, "main.c", 2588
L1970:	ldy     #$00
	lda     (sp),y
	sta     _state
;
; ticks_in_state_large = 0;
;
	.dbg	line, "main.c", 2590
	tya
	sta     _ticks_in_state_large
	sta     _ticks_in_state_large+1
;
; switch (state)
;
	.dbg	line, "main.c", 2592
	lda     _state
;
; }
;
	.dbg	line, "main.c", 2996
	beq     L1A0B
	cmp     #$01
	beq     L1A1A
	cmp     #$02
	beq     L1A29
	cmp     #$03
	jeq     L1A72
	cmp     #$04
	jeq     L1FFB
	cmp     #$06
	jeq     L1AD6
	cmp     #$08
	jeq     L1FFF
	jmp     incsp1
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2596
L1A0B:	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; ppu_off();
;
	.dbg	line, "main.c", 2597
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2598
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(boot_screen);
;
	.dbg	line, "main.c", 2599
	lda     #<(_boot_screen)
	ldx     #>(_boot_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2600
	jsr     _ppu_on_all
;
; break;
;
	.dbg	line, "main.c", 2602
	jmp     incsp1
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2606
L1A1A:	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; ppu_off();
;
	.dbg	line, "main.c", 2607
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2608
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(ty_screen);
;
	.dbg	line, "main.c", 2609
	lda     #<(_ty_screen)
	ldx     #>(_ty_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2610
	jsr     _ppu_on_all
;
; break;
;
	.dbg	line, "main.c", 2612
	jmp     incsp1
;
; pal_bg(palette_bg);
;
	.dbg	line, "main.c", 2616
L1A29:	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	.dbg	line, "main.c", 2617
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 2618
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 2619
	lda     #$00
	sta     _time_of_day
;
; cur_konami_index = 0;
;
	.dbg	line, "main.c", 2620
	sta     _cur_konami_index
;
; attract_gameplay_enabled = 0;
;
	.dbg	line, "main.c", 2622
	sta     _attract_gameplay_enabled
;
; if (prev_state == STATE_OPTIONS || prev_state == STATE_BOOT || prev_state == STATE_TY || prev_state == STATE_SOUND_TEST || prev_state == STATE_HIGH_SCORE_TABLE)
;
	.dbg	line, "main.c", 2625
	lda     L1965
	cmp     #$03
	beq     L1FF1
	lda     L1965
	beq     L1FF1
	cmp     #$01
	beq     L1FF1
	cmp     #$07
	beq     L1FF1
	cmp     #$08
	bne     L1FF2
;
; oam_clear();
;
	.dbg	line, "main.c", 2627
L1FF1:	jsr     _oam_clear
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 2628
	jsr     _draw_menu_sprites
;
; ppu_off();
;
	.dbg	line, "main.c", 2630
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2631
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 2632
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2633
	jsr     _ppu_on_all
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 8 << 3, 12 << 3));
;
	.dbg	line, "main.c", 2635
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; else
;
	.dbg	line, "main.c", 2640
	jmp     incsp1
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2642
L1FF2:	lda     L1965
	cmp     #$06
	bne     L1A4F
;
; fade_to_black();
;
	.dbg	line, "main.c", 2644
	jsr     _fade_to_black
;
; reset_gameplay_area();
;
	.dbg	line, "main.c", 2647
L1A4F:	jsr     _reset_gameplay_area
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 2649
	jsr     _draw_menu_sprites
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 2651
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, 0x1df); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 2652
	jsr     push0
	ldx     #$01
	lda     #$DF
	jsr     _scroll
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 2653
	lda     _music_on
	beq     L1A59
	lda     $4017
	and     #$80
	beq     L2009
	lda     _credits_remaining
	cmp     _game_cost
	bcc     L1A59
	lda     #$00
L2009:	jsr     _music_play
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 8 << 3, 12 << 3));
;
	.dbg	line, "main.c", 2656
L1A59:	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2661
	lda     L1965
	cmp     #$06
	beq     L200B
;
; }
;
	.dbg	line, "main.c", 2997
	jmp     incsp1
;
; fade_from_black();
;
	.dbg	line, "main.c", 2663
L200B:	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 2667
	jmp     incsp1
;
; oam_clear();
;
	.dbg	line, "main.c", 2672
L1A72:	jsr     _oam_clear
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2677
	jsr     _clear_vram_buffer
;
; ppu_off();
;
	.dbg	line, "main.c", 2679
	jsr     _ppu_off
;
; cur_level_vs_setting = MIN(cur_level_vs_setting, 2);
;
	.dbg	line, "main.c", 2683
	lda     _cur_level_vs_setting
	cmp     #$02
	bcs     L1FF8
	jmp     L1FF9
L1FF8:	lda     #$02
L1FF9:	sta     _cur_level_vs_setting
;
; vs_code_index = 0;
;
	.dbg	line, "main.c", 2684
	lda     #$00
	sta     _vs_code_index
;
; bank_bg(1);
;
	.dbg	line, "main.c", 2690
	lda     #$01
	jsr     _bank_bg
;
; bank_spr(0);
;
	.dbg	line, "main.c", 2691
	lda     #$00
	jsr     _bank_spr
;
; pal_bg(palette_vs_options);
;
	.dbg	line, "main.c", 2692
	lda     #<(_palette_vs_options)
	ldx     #>(_palette_vs_options)
	jsr     _pal_bg
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2695
	lda     #$00
	sta     L1963
L1FFA:	lda     L1963
	cmp     #$04
	bcs     L1A8A
;
; pal_col(i + (4 * attack_style), palette_vs_options_active[i]);
;
	.dbg	line, "main.c", 2697
	lda     _attack_style
	asl     a
	asl     a
	clc
	adc     L1963
	jsr     pusha
	ldy     L1963
	lda     _palette_vs_options_active,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2695
	inc     L1963
	jmp     L1FFA
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2704
L1A8A:	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(vs_settings_mode);
;
	.dbg	line, "main.c", 2706
	lda     #<(_vs_settings_mode)
	ldx     #>(_vs_settings_mode)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2707
	jsr     _ppu_on_all
;
; option_state = 0;
;
	.dbg	line, "main.c", 2708
	lda     #$00
	sta     _option_state
;
; break;
;
	.dbg	line, "main.c", 2731
	jmp     incsp1
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2759
L1FFB:	lda     L1965
	cmp     #$06
	bne     L1FFC
;
; reset_gameplay_area();
;
	.dbg	line, "main.c", 2761
	jsr     _reset_gameplay_area
;
; if (prev_state != STATE_PAUSE)
;
	.dbg	line, "main.c", 2764
L1FFC:	lda     L1965
	cmp     #$05
	jeq     L1AC8
;
; oam_clear();
;
	.dbg	line, "main.c", 2766
	jsr     _oam_clear
;
; if (!attract_gameplay_enabled && credits_remaining >= game_cost)
;
	.dbg	line, "main.c", 2769
	lda     _attract_gameplay_enabled
	bne     L1AAD
	tax
	lda     _credits_remaining
	cmp     _game_cost
	bcs     L1FFD
L1AAD:	ldx     #$00
	jmp     L1FFE
;
; credits_remaining -= game_cost;
;
	.dbg	line, "main.c", 2771
L1FFD:	lda     _game_cost
	eor     #$FF
	sec
	adc     _credits_remaining
	sta     _credits_remaining
;
; scroll_y = 239;
;
	.dbg	line, "main.c", 2792
L1FFE:	lda     #$EF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, scroll_y);
;
	.dbg	line, "main.c", 2793
	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 2796
	jsr     _spawn_new_cluster
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 2798
	jsr     _spawn_new_cluster
;
; memfill(attack_row_status, 0, BOARD_WIDTH);
;
	.dbg	line, "main.c", 2800
	jsr     decsp3
	lda     #<(_attack_row_status)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_attack_row_status)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$0A
	jsr     _memfill
;
; srand(tick_count_large);
;
	.dbg	line, "main.c", 2803
	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     _srand
;
; i = rand() % BOARD_WIDTH;
;
	.dbg	line, "main.c", 2806
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	sta     L1963
;
; attack_row_status[i] = 1;
;
	.dbg	line, "main.c", 2807
	ldy     L1963
	lda     #$01
	sta     _attack_row_status,y
;
; require_new_down_button = 1;
;
	.dbg	line, "main.c", 2809
	sta     _require_new_down_button
;
; if (attack_style == ATTACK_ON_TIME)
;
	.dbg	line, "main.c", 2810
	lda     _attack_style
	cmp     #$01
	bne     L1AC8
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 2812
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; if (!attract_gameplay_enabled)
;
	.dbg	line, "main.c", 2817
L1AC8:	lda     _attract_gameplay_enabled
	beq     L200C
;
; }
;
	.dbg	line, "main.c", 2997
	jmp     incsp1
;
; cur_gameplay_music = MUSIC_GAMEPLAY;
;
	.dbg	line, "main.c", 2823
L200C:	lda     #$01
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(MUSIC_GAMEPLAY);
;
	.dbg	line, "main.c", 2824
	lda     _music_on
	bne     L200D
;
; }
;
	.dbg	line, "main.c", 2997
	jmp     incsp1
;
; MUSIC_PLAY_WRAPPER(MUSIC_GAMEPLAY);
;
	.dbg	line, "main.c", 2824
L200D:	lda     #$01
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 2827
	jmp     incsp1
;
; delay(1);
;
	.dbg	line, "main.c", 2840
L1AD6:	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2841
	jsr     _clear_vram_buffer
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 2844
	jsr     _draw_gameplay_sprites
;
; music_stop();
;
	.dbg	line, "main.c", 2846
	jsr     _music_stop
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_GAMEOVER);
;
	.dbg	line, "main.c", 2847
	lda     _music_on
	beq     L1ADC
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_GAMEOVER_SONG);
;
	.dbg	line, "main.c", 2858
L1ADC:	lda     _music_on
	beq     L1AE2
	lda     #$0C
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_bright(5);
;
	.dbg	line, "main.c", 2864
L1AE2:	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2865
	lda     L1964
	jsr     _delay
;
; pal_bright(6);
;
	.dbg	line, "main.c", 2866
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2867
	lda     L1964
	jsr     _delay
;
; pal_bright(7);
;
	.dbg	line, "main.c", 2868
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2869
	lda     L1964
	jsr     _delay
;
; pal_bright(8);
;
	.dbg	line, "main.c", 2870
	lda     #$08
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2871
	lda     L1964
	jsr     _delay
;
; address = get_ppu_addr(cur_nt, 96, 14 << 3);
;
	.dbg	line, "main.c", 2873
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("GAME OVER!", 10, address);
;
	.dbg	line, "main.c", 2874
	jsr     decsp3
	lda     #<(L1AFE)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1AFE)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; pal_bright(7);
;
	.dbg	line, "main.c", 2881
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2882
	lda     L1964
	jsr     _delay
;
; pal_bright(6);
;
	.dbg	line, "main.c", 2883
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2884
	lda     L1964
	jsr     _delay
;
; pal_bright(5);
;
	.dbg	line, "main.c", 2885
	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2886
	lda     L1964
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "main.c", 2887
	lda     #$04
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2888
	lda     L1964
	jsr     _delay
;
; break;
;
	.dbg	line, "main.c", 2889
	jmp     incsp1
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2895
L1FFF:	lda     L1965
	cmp     #$06
	bne     L1B14
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 2897
	lda     _music_on
	beq     L1B16
	lda     $4017
	and     #$80
	beq     L200A
	lda     _credits_remaining
	cmp     _game_cost
	bcc     L1B16
	tya
L200A:	jsr     _music_play
;
; reset_gameplay_area();
;
	.dbg	line, "main.c", 2899
L1B16:	jsr     _reset_gameplay_area
;
; oam_clear();
;
	.dbg	line, "main.c", 2902
L1B14:	jsr     _oam_clear
;
; ppu_off(); // screen off
;
	.dbg	line, "main.c", 2903
	jsr     _ppu_off
;
; cur_initial_index = 0;
;
	.dbg	line, "main.c", 2905
	lda     #$00
	sta     _cur_initial_index
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 2907
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, scroll_y);
;
	.dbg	line, "main.c", 2909
	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; pal_bg(palette_vs_highscore_table);
;
	.dbg	line, "main.c", 2911
	lda     #<(_palette_vs_highscore_table)
	ldx     #>(_palette_vs_highscore_table)
	jsr     _pal_bg
;
; pal_spr(palette_vs_highscore_table);
;
	.dbg	line, "main.c", 2912
	lda     #<(_palette_vs_highscore_table)
	ldx     #>(_palette_vs_highscore_table)
	jsr     _pal_spr
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2913
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(high_score_screen);
;
	.dbg	line, "main.c", 2914
	lda     #<(_high_score_screen)
	ldx     #>(_high_score_screen)
	jsr     _vram_unrle
;
; if (attack_style == ATTACK_NEVER)
;
	.dbg	line, "main.c", 2916
	lda     _attack_style
	cmp     #$02
	bne     L1B3A
;
; vram_adr(NTADR_A(15 - ((sizeof(attack_style_strings[attack_style])) / 2), 3));
;
	.dbg	line, "main.c", 2918
	ldx     #$20
	lda     #$6C
;
; else
;
	.dbg	line, "main.c", 2920
	jmp     L1FDD
;
; vram_adr(NTADR_A(16 - ((sizeof(attack_style_strings[attack_style])) / 2), 3));
;
	.dbg	line, "main.c", 2922
L1B3A:	ldx     #$20
	lda     #$6D
L1FDD:	jsr     _vram_adr
;
; vram_write(attack_style_strings[attack_style], sizeof(attack_style_strings[attack_style]));
;
	.dbg	line, "main.c", 2925
	ldx     #$00
	lda     _attack_style
	jsr     mulax7
	clc
	adc     #<(_attack_style_strings)
	tay
	txa
	adc     #>(_attack_style_strings)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     _vram_write
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2928
	lda     #$00
	sta     L1963
L2005:	lda     L1963
	cmp     #$04
	jcs     L1B5A
;
; difficulty_to_leaderboard_pos(i);
;
	.dbg	line, "main.c", 2931
	jsr     _difficulty_to_leaderboard_pos
;
; for (j = 0; j < 3; ++j)
;
	.dbg	line, "main.c", 2934
	lda     #$00
	sta     L1966
L2006:	lda     L1966
	cmp     #$03
	jcs     L2007
;
; vram_adr(NTADR_A(in_x, in_y + j));
;
	.dbg	line, "main.c", 2936
	ldx     #$00
	lda     _in_y
	clc
	adc     L1966
	bcc     L1FD6
	inx
L1FD6:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _in_x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _vram_adr
;
; vram_write(high_scores_vs_initials[attack_style][i][j], 3);
;
	.dbg	line, "main.c", 2944
	lda     _attack_style
	jsr     pusha0
	lda     #$24
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_initials)
	tay
	txa
	adc     #>(_high_scores_vs_initials)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     L1963
	jsr     mulax9
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     L1966
	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     _vram_write
;
; temp_score = high_scores_vs_value[attack_style][i][j];
;
	.dbg	line, "main.c", 2952
	lda     _attack_style
	jsr     pusha0
	lda     #$30
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_value)
	tay
	txa
	adc     #>(_high_scores_vs_value)
	tax
	tya
	jsr     pushax
	lda     L1963
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     L1966
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldeaxi
	sta     L1968
	stx     L1968+1
	ldy     sreg
	sty     L1968+2
	ldy     sreg+1
	sty     L1968+3
;
; if (temp_score == NO_SCORE)
;
	.dbg	line, "main.c", 2959
	lda     L1968+3
	sta     sreg+1
	lda     L1968+2
	sta     sreg
	ldx     L1968+1
	lda     L1968
	jsr     pusheax
	ldx     #$FF
	stx     sreg
	stx     sreg+1
	txa
	jsr     toseqeax
	beq     L1B80
;
; vram_adr(NTADR_A(in_x + 4, in_y + j));
;
	.dbg	line, "main.c", 2961
	ldx     #$00
	lda     _in_y
	clc
	adc     L1966
	bcc     L1FD7
	inx
L1FD7:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _in_x
	clc
	adc     #$04
	bcc     L1B8A
	inx
L1B8A:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _vram_adr
;
; vram_write("-------", 7);
;
	.dbg	line, "main.c", 2962
	lda     #<(L1B8C)
	ldx     #>(L1B8C)
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     _vram_write
;
; else
;
	.dbg	line, "main.c", 2964
	jmp     L1B65
;
; vram_adr(NTADR_A(in_x + 4, in_y + j));
;
	.dbg	line, "main.c", 2968
L1B80:	ldx     #$00
	lda     _in_y
	clc
	adc     L1966
	bcc     L1FD8
	inx
L1FD8:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _in_x
	clc
	adc     #$04
	bcc     L1B97
	inx
L1B97:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _vram_adr
;
; vram_write("0000000", 7);
;
	.dbg	line, "main.c", 2969
	lda     #<(L1B99)
	ldx     #>(L1B99)
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     _vram_write
;
; k = 0;
;
	.dbg	line, "main.c", 2971
	lda     #$00
	sta     L1967
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 2972
	jmp     L1BA0
;
; digit = temp_score % 10;
;
	.dbg	line, "main.c", 2974
L1B9E:	lda     L1968+3
	sta     sreg+1
	lda     L1968+2
	sta     sreg
	ldx     L1968+1
	lda     L1968
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	sta     L1969
;
; vram_adr(NTADR_A((in_x + 4) + 6 - k, in_y + j));
;
	.dbg	line, "main.c", 2976
	ldx     #$00
	lda     _in_y
	clc
	adc     L1966
	bcc     L1FD9
	inx
L1FD9:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _in_x
	clc
	adc     #$04
	bcc     L1FDE
	inx
	clc
L1FDE:	adc     #$06
	bcc     L1BAD
	inx
L1BAD:	sec
	sbc     L1967
	pha
	txa
	sbc     #$00
	tax
	pla
	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _vram_adr
;
; vram_put('0' + digit);
;
	.dbg	line, "main.c", 2977
	lda     L1969
	clc
	adc     #$30
	jsr     _vram_put
;
; temp_score = temp_score / 10;
;
	.dbg	line, "main.c", 2979
	lda     L1968+3
	sta     sreg+1
	lda     L1968+2
	sta     sreg
	ldx     L1968+1
	lda     L1968
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L1968
	stx     L1968+1
	ldy     sreg
	sty     L1968+2
	ldy     sreg+1
	sty     L1968+3
;
; ++k;
;
	.dbg	line, "main.c", 2980
	inc     L1967
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 2972
L1BA0:	lda     L1968+3
	sta     sreg+1
	lda     L1968+2
	sta     sreg
	ldx     L1968+1
	lda     L1968
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L1B9E
;
; for (j = 0; j < 3; ++j)
;
	.dbg	line, "main.c", 2934
L1B65:	inc     L1966
	jmp     L2006
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2928
L2007:	inc     L1963
	jmp     L2005
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "main.c", 2986
L1B5A:	jsr     _ppu_on_all
;
; break;
;
	.dbg	line, "main.c", 2988
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ inc_lines_cleared (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inc_lines_cleared: near

	.dbg	func, "inc_lines_cleared", "00", extern, "_inc_lines_cleared"

.segment	"BSS"

L1BB7:
	.res	1,$00

.segment	"CODE"

;
; ++lines_cleared_one;
;
	.dbg	line, "main.c", 3002
	inc     _lines_cleared_one
;
; if (lines_cleared_one == 10)
;
	.dbg	line, "main.c", 3004
	lda     _lines_cleared_one
	cmp     #$0A
	beq     L2016
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3060
	jmp     _display_lines_cleared
;
; lines_total = (lines_cleared_hundred * 10) + lines_cleared_ten;
;
	.dbg	line, "main.c", 3007
L2016:	ldx     #$00
	lda     _lines_cleared_hundred
	jsr     mulax10
	clc
	adc     _lines_cleared_ten
	sta     L1BB7
;
; if (cur_level <= lines_total)
;
	.dbg	line, "main.c", 3009
	lda     _cur_level
	sec
	sbc     L1BB7
	sta     tmp1
	lda     tmp1
	beq     L2010
	bcs     L2014
;
; ++cur_level;
;
	.dbg	line, "main.c", 3011
L2010:	inc     _cur_level
;
; if (cur_level <= 29)
;
	.dbg	line, "main.c", 3014
	lda     _cur_level
	cmp     #$1E
	bcs     L2012
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 3016
	cmp     #$1E
	bcs     L2011
	jmp     L1BCD
L2011:	lda     #$1E
L1BCD:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; else if (cur_level < 40) // raise the floor 10 levels.
;
	.dbg	line, "main.c", 3018
	jmp     L2014
L2012:	lda     _cur_level
	cmp     #$28
	bcs     L2014
;
; if (cur_level == 30)
;
	.dbg	line, "main.c", 3020
	cmp     #$1E
	bne     L2013
;
; one_vram_buffer(SKULL_SPRITE, get_ppu_addr(cur_nt, 4 << 3, 9 << 3)); // skull
;
	.dbg	line, "main.c", 3022
	lda     #$3B
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; kill_row_queued = 1;
;
	.dbg	line, "main.c", 3024
L2013:	lda     #$01
	sta     _kill_row_queued
;
; ++time_of_day;
;
	.dbg	line, "main.c", 3028
L2014:	inc     _time_of_day
;
; if (time_of_day >= NUM_TIMES_OF_DAY)
;
	.dbg	line, "main.c", 3029
	lda     _time_of_day
	cmp     #$08
	ldx     #$00
	bcc     L2015
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 3031
	stx     _time_of_day
;
; pal_bg(palette_bg_list[time_of_day]);
;
	.dbg	line, "main.c", 3034
L2015:	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	tay
	txa
	adc     #>(_palette_bg_list)
	tax
	tya
	jsr     _pal_bg
;
; memcpy(temp_pal, palette_sp, sizeof(palette_sp));
;
	.dbg	line, "main.c", 3037
	ldy     #$0F
L1BEB:	lda     _palette_sp,y
	sta     _temp_pal,y
	dey
	bpl     L1BEB
;
; temp_pal[1] = palette_bg_list[time_of_day][1];
;
	.dbg	line, "main.c", 3039
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temp_pal+1
;
; temp_pal[2] = palette_bg_list[time_of_day][2];
;
	.dbg	line, "main.c", 3040
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+2
;
; temp_pal[3] = palette_bg_list[time_of_day][3];
;
	.dbg	line, "main.c", 3041
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+3
;
; temp_pal[6] = palette_bg_list[time_of_day][14];
;
	.dbg	line, "main.c", 3043
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$0E
	lda     (ptr1),y
	sta     _temp_pal+6
;
; temp_pal[7] = palette_bg_list[time_of_day][15];
;
	.dbg	line, "main.c", 3044
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+7
;
; temp_pal[10] = palette_bg_list[time_of_day][2];
;
	.dbg	line, "main.c", 3046
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     _temp_pal+10
;
; pal_spr(temp_pal);
;
	.dbg	line, "main.c", 3048
	lda     #<(_temp_pal)
	ldx     #>(_temp_pal)
	jsr     _pal_spr
;
; display_level();
;
	.dbg	line, "main.c", 3050
	jsr     _display_level
;
; lines_cleared_one = 0;
;
	.dbg	line, "main.c", 3052
	lda     #$00
	sta     _lines_cleared_one
;
; ++lines_cleared_ten;
;
	.dbg	line, "main.c", 3053
	inc     _lines_cleared_ten
;
; if (lines_cleared_ten == 10)
;
	.dbg	line, "main.c", 3054
	lda     _lines_cleared_ten
	cmp     #$0A
	bne     L1C10
;
; lines_cleared_ten = 0;
;
	.dbg	line, "main.c", 3056
	lda     #$00
	sta     _lines_cleared_ten
;
; ++lines_cleared_hundred;
;
	.dbg	line, "main.c", 3057
	inc     _lines_cleared_hundred
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3060
L1C10:	jmp     _display_lines_cleared
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_lines_cleared (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_lines_cleared: near

	.dbg	func, "display_lines_cleared", "00", extern, "_display_lines_cleared"

.segment	"CODE"

;
; one_vram_buffer('0' + lines_cleared_hundred, get_ppu_addr(cur_nt, 4 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3065
	lda     _lines_cleared_hundred
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; one_vram_buffer('0' + lines_cleared_ten, get_ppu_addr(cur_nt, 5 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3066
	lda     _lines_cleared_ten
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$28
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; one_vram_buffer('0' + lines_cleared_one, get_ppu_addr(cur_nt, 6 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3067
	lda     _lines_cleared_one
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jmp     _one_vram_buffer
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_score: near

	.dbg	func, "display_score", "00", extern, "_display_score"

.segment	"BSS"

L1C2D:
	.res	4,$00
L1C2E:
	.res	1,$00

.segment	"CODE"

;
; temp_score = cur_score; //cur_score;
;
	.dbg	line, "main.c", 3075
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	sta     L1C2D
	stx     L1C2D+1
	ldy     sreg
	sty     L1C2D+2
	ldy     sreg+1
	sty     L1C2D+3
;
; multi_vram_buffer_horz("      ", 6, get_ppu_addr(cur_nt, 0, 6 << 3));
;
	.dbg	line, "main.c", 3078
	jsr     decsp3
	lda     #<(L1C32)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1C32)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; i = 0;
;
	.dbg	line, "main.c", 3080
	lda     #$00
	sta     L1C2E
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3081
	jmp     L1C3D
;
; unsigned char digit = temp_score % 10;
;
	.dbg	line, "main.c", 3083
L1C3B:	lda     L1C2D+3
	sta     sreg+1
	lda     L1C2D+2
	sta     sreg
	ldx     L1C2D+1
	lda     L1C2D
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (6 << 3) - (i << 3), 6 << 3));
;
	.dbg	line, "main.c", 3084
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L1C2E
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_score = temp_score / 10;
;
	.dbg	line, "main.c", 3086
	lda     L1C2D+3
	sta     sreg+1
	lda     L1C2D+2
	sta     sreg
	ldx     L1C2D+1
	lda     L1C2D
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L1C2D
	stx     L1C2D+1
	ldy     sreg
	sty     L1C2D+2
	ldy     sreg+1
	sty     L1C2D+3
;
; ++i;
;
	.dbg	line, "main.c", 3087
	inc     L1C2E
;
; }
;
	.dbg	line, "main.c", 3088
	jsr     incsp1
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3081
L1C3D:	lda     L1C2D+3
	sta     sreg+1
	lda     L1C2D+2
	sta     sreg
	ldx     L1C2D+1
	lda     L1C2D
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L1C3B
;
; }
;
	.dbg	line, "main.c", 3089
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_level: near

	.dbg	func, "display_level", "00", extern, "_display_level"

.segment	"BSS"

L1C4D:
	.res	1,$00
L1C4E:
	.res	1,$00

.segment	"CODE"

;
; temp_level = cur_level;
;
	.dbg	line, "main.c", 3121
	lda     _cur_level
	sta     L1C4D
;
; i = 0;
;
	.dbg	line, "main.c", 3122
	lda     #$00
	sta     L1C4E
;
; if (cur_level < 10)
;
	.dbg	line, "main.c", 3124
	tax
	lda     _cur_level
	cmp     #$0A
	jcs     L2018
;
; multi_vram_buffer_horz("00", 2, get_ppu_addr(cur_nt, 5 << 3, 9 << 3));
;
	.dbg	line, "main.c", 3126
	jsr     decsp3
	lda     #<(L1C56)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1C56)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$28
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp_level != 0)
;
	.dbg	line, "main.c", 3129
	jmp     L1C5F
;
; unsigned char digit = temp_level % 10;
;
	.dbg	line, "main.c", 3131
L2017:	lda     L1C4D
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (6 << 3) - (i << 3), 9 << 3));
;
	.dbg	line, "main.c", 3132
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L1C4E
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_level = temp_level / 10;
;
	.dbg	line, "main.c", 3134
	lda     L1C4D
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L1C4D
;
; ++i;
;
	.dbg	line, "main.c", 3135
	inc     L1C4E
;
; }
;
	.dbg	line, "main.c", 3136
	jsr     incsp1
;
; while (temp_level != 0)
;
	.dbg	line, "main.c", 3129
L1C5F:	ldx     #$00
L2018:	lda     L1C4D
	bne     L2017
;
; }
;
	.dbg	line, "main.c", 3137
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ clear_rows_in_data (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_rows_in_data: near

	.dbg	func, "clear_rows_in_data", "00", extern, "_clear_rows_in_data"
	.dbg	sym, "start_y", "00", auto, 0

.segment	"BSS"

L1C6F:
	.res	1,$00
L1C70:
	.res	1,$00
L1C71:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 3142
	jsr     pusha
;
; i = 0;
;
	.dbg	line, "main.c", 3148
	lda     #$00
	sta     L1C70
;
; prev_level = cur_level;
;
	.dbg	line, "main.c", 3149
	lda     _cur_level
	sta     L1C71
;
; memfill(lines_cleared_y, 0xff, 4);
;
	.dbg	line, "main.c", 3152
	jsr     decsp3
	lda     #<(_lines_cleared_y)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lines_cleared_y)
	sta     (sp),y
	lda     #$FF
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$04
	jsr     _memfill
;
; for (local_iy = start_y; local_iy > BOARD_OOB_END; --local_iy)
;
	.dbg	line, "main.c", 3155
	ldy     #$00
	lda     (sp),y
	sta     _local_iy
L201E:	lda     _local_iy
	cmp     #$04
	jcc     L2029
;
; line_complete = 1;
;
	.dbg	line, "main.c", 3159
	lda     #$01
	sta     L1C6F
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3160
	lda     #$00
	sta     _local_ix
L201F:	lda     _local_ix
	cmp     #$0A
	bcs     L1C85
;
; if (game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] == 0 || game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] == 1)
;
	.dbg	line, "main.c", 3163
	ldy     _local_iy
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L2019
	inx
L2019:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	beq     L2033
	ldy     _local_iy
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L201A
	inx
L201A:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	cmp     #$01
	bne     L2023
;
; line_complete = 0;
;
	.dbg	line, "main.c", 3167
	lda     #$00
L2033:	sta     L1C6F
;
; break;
;
	.dbg	line, "main.c", 3168
	jmp     L1C85
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3160
L2023:	inc     _local_ix
	jmp     L201F
;
; if (line_complete)
;
	.dbg	line, "main.c", 3175
L1C85:	lda     L1C6F
	beq     L2028
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 3189
	lda     #$00
	sta     _local_ix
L2024:	lda     _local_ix
	cmp     #$0A
	bcs     L1CA2
;
; if (attack_row_status[local_ix] > ATTACK_QUEUE_SIZE && attack_row_status[local_ix] - (ATTACK_QUEUE_SIZE + 1) >= (BOARD_END_Y_PX_BOARD - local_iy))
;
	.dbg	line, "main.c", 3191
	ldy     _local_ix
	lda     _attack_row_status,y
	cmp     #$04
	bcc     L2027
	ldy     _local_ix
	ldx     #$00
	lda     _attack_row_status,y
	sec
	sbc     #$04
	bcs     L1CB2
	dex
L1CB2:	jsr     pushax
	lda     #$17
	sec
	sbc     _local_iy
	jsr     tosicmp0
	bcc     L2027
;
; hit_reaction_remaining = 60;
;
	.dbg	line, "main.c", 3193
	lda     #$3C
	sta     _hit_reaction_remaining
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 3189
L2027:	inc     _local_ix
	jmp     L2024
;
; inc_lines_cleared();
;
	.dbg	line, "main.c", 3198
L1CA2:	jsr     _inc_lines_cleared
;
; memcpy(&game_board[TILE_TO_BOARD_INDEX(0, local_iy)], empty_row, 10);
;
	.dbg	line, "main.c", 3201
	ldy     _local_iy
	lda     _board_lookup_y,y
	clc
	adc     #<(_game_board)
	tay
	lda     #$00
	adc     #>(_game_board)
	tax
	tya
	jsr     pushax
	lda     #<(_empty_row)
	ldx     #>(_empty_row)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _memcpy
;
; lines_cleared_y[i] = local_iy;
;
	.dbg	line, "main.c", 3205
	ldy     L1C70
	lda     _local_iy
	sta     _lines_cleared_y,y
;
; ++i;
;
	.dbg	line, "main.c", 3208
	inc     L1C70
;
; for (local_iy = start_y; local_iy > BOARD_OOB_END; --local_iy)
;
	.dbg	line, "main.c", 3155
L2028:	dec     _local_iy
	jmp     L201E
;
; if (i == 0 & is_tspin != 0)
;
	.dbg	line, "main.c", 3213
L2029:	lda     L1C70
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L202A
;
; cur_score += (40 * is_tspin * (cur_level + 1));
;
	.dbg	line, "main.c", 3215
	lda     _is_tspin
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L1CCE
	inx
L1CCE:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; display_score();
;
	.dbg	line, "main.c", 3216
	jsr     _display_score
;
; else if (i > 0)
;
	.dbg	line, "main.c", 3218
	jmp     incsp1
L202A:	lda     L1C70
	bne     L2035
;
; }
;
	.dbg	line, "main.c", 3284
	jmp     incsp1
;
; if (prev_level != cur_level)
;
	.dbg	line, "main.c", 3220
L2035:	lda     _cur_level
	cmp     L1C71
	beq     L202C
;
; if (i == 4|| (i == 3 & is_tspin != 0))
;
	.dbg	line, "main.c", 3222
	lda     L1C70
	cmp     #$04
	beq     L202B
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L1CD5
;
; screen_shake_remaining = 5;
;
	.dbg	line, "main.c", 3224
L202B:	lda     #$05
	sta     _screen_shake_remaining
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP_MULTI);
;
	.dbg	line, "main.c", 3225
	lda     _sfx_on
	beq     L202E
	lda     #$08
;
; else
;
	.dbg	line, "main.c", 3227
	jmp     L2034
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP);
;
	.dbg	line, "main.c", 3229
L1CD5:	lda     _sfx_on
	beq     L202E
	lda     #$07
;
; else if (i == 4 || (i == 3 & is_tspin != 0))
;
	.dbg	line, "main.c", 3232
	jmp     L2034
L202C:	lda     L1C70
	cmp     #$04
	beq     L202D
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L1CE9
;
; screen_shake_remaining = 5;
;
	.dbg	line, "main.c", 3236
L202D:	lda     #$05
	sta     _screen_shake_remaining
;
; SFX_PLAY_WRAPPER(SOUND_MULTIROW);
;
	.dbg	line, "main.c", 3237
	lda     _sfx_on
	beq     L202E
	lda     #$03
;
; else
;
	.dbg	line, "main.c", 3239
	jmp     L2034
;
; SFX_PLAY_WRAPPER(SOUND_ROW);
;
	.dbg	line, "main.c", 3242
L1CE9:	lda     _sfx_on
	beq     L202E
	lda     #$02
L2034:	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; switch (i)
;
	.dbg	line, "main.c", 3246
	ldx     #$00
L202E:	lda     L1C70
;
; }
;
	.dbg	line, "main.c", 3272
	cmp     #$01
	beq     L202F
	cmp     #$02
	beq     L2030
	cmp     #$03
	beq     L1D08
	cmp     #$04
	beq     L1D0C
	jmp     L1D0C
;
; line_score_mod = 40;
;
	.dbg	line, "main.c", 3250
L202F:	lda     #$28
;
; break;
;
	.dbg	line, "main.c", 3251
	jmp     L2032
;
; line_score_mod = 100;
;
	.dbg	line, "main.c", 3256
L2030:	lda     #$64
;
; break;
;
	.dbg	line, "main.c", 3257
	jmp     L2032
;
; line_score_mod = 300;
;
	.dbg	line, "main.c", 3262
L1D08:	ldx     #$01
	lda     #$2C
;
; break;
;
	.dbg	line, "main.c", 3263
	jmp     L2032
;
; line_score_mod = 1200;
;
	.dbg	line, "main.c", 3269
L1D0C:	ldx     #$04
	lda     #$B0
L2032:	sta     _line_score_mod
	stx     _line_score_mod+1
;
; cur_score += (line_score_mod * (4*is_tspin + 1) * (cur_level + 1));
;
	.dbg	line, "main.c", 3273
	lda     _line_score_mod
	ldx     _line_score_mod+1
	jsr     pushax
	ldx     #$00
	lda     _is_tspin
	jsr     shlax2
	clc
	adc     #$01
	bcc     L1D14
	inx
L1D14:	jsr     tosumulax
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L1D16
	inx
L1D16:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; display_score();
;
	.dbg	line, "main.c", 3274
	jsr     _display_score
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 3277
	lda     _hit_reaction_remaining
	beq     L1D18
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3279
	jsr     _draw_gameplay_sprites
;
; reveal_empty_rows_to_nt();
;
	.dbg	line, "main.c", 3281
L1D18:	jsr     _reveal_empty_rows_to_nt
;
; }
;
	.dbg	line, "main.c", 3284
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ reveal_empty_rows_to_nt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reveal_empty_rows_to_nt: near

	.dbg	func, "reveal_empty_rows_to_nt", "00", extern, "_reveal_empty_rows_to_nt"

.segment	"BSS"

L1D1D:
	.res	1,$00
L1D1E:
	.res	1,$00

.segment	"CODE"

;
; delay(1);
;
	.dbg	line, "main.c", 3297
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3298
	jsr     _clear_vram_buffer
;
; for (ix = 4; ix >= 0; --ix)
;
	.dbg	line, "main.c", 3301
	lda     #$04
	sta     L1D1D
L2039:	ldx     L1D1D
	bpl     L203C
;
; try_collapse_empty_row_data();
;
	.dbg	line, "main.c", 3340
	jmp     _try_collapse_empty_row_data
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3306
L203C:	lda     #$00
	sta     L1D1E
L203A:	lda     L1D1E
	cmp     #$14
	bcs     L1D2D
;
; copy_board_data[iy] = game_board[TILE_TO_BOARD_INDEX(ix, iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3308
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     L1D1E
	bcc     L1D37
	inx
L1D37:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     L1D1E
	clc
	adc     #$03
	bcc     L2037
	inx
	clc
L2037:	adc     #$01
	bcc     L1D3F
	inx
L1D3F:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     L1D1D
	bpl     L1D41
	dex
L1D41:	clc
	adc     ptr1
	bcc     L2036
	inx
L2036:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3306
	inc     L1D1E
	jmp     L203A
;
; copy_board_data,
;
	.dbg	line, "main.c", 3312
L1D2D:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3313
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3315
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + (ix << 3),
;
	.dbg	line, "main.c", 3316
	lda     L1D1D
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3317
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3321
	lda     #$00
	sta     L1D1E
L203B:	lda     L1D1E
	cmp     #$14
	bcs     L1D50
;
; copy_board_data[iy] = game_board[TILE_TO_BOARD_INDEX(BOARD_END_X_PX_BOARD - ix, iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3323
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     L1D1E
	bcc     L1D5A
	inx
L1D5A:	jsr     pushax
	ldx     #$00
	lda     L1D1E
	clc
	adc     #$03
	bcc     L2038
	inx
	clc
L2038:	adc     #$01
	bcc     L1D62
	inx
L1D62:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	jsr     pusha0
	lda     #$09
	jsr     pusha0
	lda     L1D1D
	bpl     L1D64
	ldx     #$FF
L1D64:	jsr     tossubax
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3321
	inc     L1D1E
	jmp     L203B
;
; copy_board_data,
;
	.dbg	line, "main.c", 3327
L1D50:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3328
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3330
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + ((BOARD_END_X_PX_BOARD - ix) << 3),
;
	.dbg	line, "main.c", 3331
	lda     #$09
	jsr     pusha0
	lda     L1D1D
	bpl     L1D6E
	ldx     #$FF
L1D6E:	jsr     tossubax
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$00
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3332
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; delay(5);
;
	.dbg	line, "main.c", 3335
	lda     #$05
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3336
	jsr     _clear_vram_buffer
;
; for (ix = 4; ix >= 0; --ix)
;
	.dbg	line, "main.c", 3301
	dec     L1D1D
	jpl     L2039
	jmp     L2039
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ try_collapse_empty_row_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_try_collapse_empty_row_data: near

	.dbg	func, "try_collapse_empty_row_data", "00", extern, "_try_collapse_empty_row_data"

.segment	"BSS"

L1D78:
	.res	1,$00
L1D79:
	.res	1,$00
L1D7A:
	.res	1,$00

.segment	"CODE"

;
; iy = BOARD_END_Y_PX_BOARD - lines_cleared_y[0];
;
	.dbg	line, "main.c", 3353
	lda     #$17
	sec
	sbc     _lines_cleared_y
	sta     L1D79
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3357
	lda     #$00
	sta     L1D78
L203D:	lda     L1D78
	cmp     #$0A
	bcs     L2042
;
; if (attack_row_status[ix] > ATTACK_QUEUE_SIZE && attack_row_status[ix] - (ATTACK_QUEUE_SIZE + 1) >= (iy))
;
	.dbg	line, "main.c", 3359
	ldy     L1D78
	lda     _attack_row_status,y
	cmp     #$04
	bcc     L2041
	ldy     L1D78
	ldx     #$00
	lda     _attack_row_status,y
	sec
	sbc     #$04
	bcs     L1D8F
	dex
L1D8F:	cmp     L1D79
	txa
	sbc     #$00
	bcs     L1D94
	jmp     L2041
;
; --attack_row_status[ix];
;
	.dbg	line, "main.c", 3364
L1D92:	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     L1D78
	bcc     L1D9A
	inx
L1D9A:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; delay(1);
;
	.dbg	line, "main.c", 3365
	lda     #$01
	jsr     _delay
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3366
	jsr     _draw_gameplay_sprites
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3367
	jsr     _clear_vram_buffer
;
; while (attack_row_status[ix] > 0)
;
	.dbg	line, "main.c", 3361
L1D94:	ldy     L1D78
	lda     _attack_row_status,y
	bne     L1D92
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3357
L2041:	inc     L1D78
	jmp     L203D
;
; for (i = 3; i >= 0; --i)
;
	.dbg	line, "main.c", 3373
L2042:	lda     #$03
	sta     L1D7A
L2043:	ldx     L1D7A
	bmi     L1DA0
;
; iy = lines_cleared_y[i];
;
	.dbg	line, "main.c", 3378
	ldy     L1D7A
	lda     _lines_cleared_y,y
	sta     L1D79
;
; if (iy != 0xff)
;
	.dbg	line, "main.c", 3380
	cmp     #$FF
	beq     L2044
;
; memcpy(game_board_temp, game_board, sizeof(game_board));
;
	.dbg	line, "main.c", 3384
	ldy     #$00
L1DB5:	lda     _game_board,y
	sta     _game_board_temp,y
	iny
	cpy     #$F0
	bne     L1DB5
;
; memcpy(&game_board[10], game_board_temp, iy * 10);
;
	.dbg	line, "main.c", 3386
	lda     #<(_game_board+10)
	ldx     #>(_game_board+10)
	jsr     pushax
	lda     #<(_game_board_temp)
	ldx     #>(_game_board_temp)
	jsr     pushax
	ldx     #$00
	lda     L1D79
	jsr     mulax10
	jsr     _memcpy
;
; for (i = 3; i >= 0; --i)
;
	.dbg	line, "main.c", 3373
L2044:	dec     L1D7A
	bpl     L2043
	jmp     L2043
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3391
L1DA0:	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ copy_board_to_nt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copy_board_to_nt: near

	.dbg	func, "copy_board_to_nt", "00", extern, "_copy_board_to_nt"

.segment	"CODE"

;
; if (state == STATE_GAME)
;
	.dbg	line, "main.c", 3400
	lda     _state
	cmp     #$04
	bne     L2047
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3402
	jsr     _draw_gameplay_sprites
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3408
L2047:	lda     #$00
	sta     _local_ix
L2048:	lda     _local_ix
	cmp     #$0A
	bcc     L204A
;
; }
;
	.dbg	line, "main.c", 3452
	rts
;
; for (local_iy = 0; local_iy < BOARD_HEIGHT; ++local_iy)
;
	.dbg	line, "main.c", 3411
L204A:	lda     #$00
	sta     _local_iy
L2049:	lda     _local_iy
	cmp     #$14
	bcs     L1DC9
;
; copy_board_data[local_iy] = game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3413
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     _local_iy
	bcc     L1DD3
	inx
L1DD3:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _local_iy
	clc
	adc     #$03
	bcc     L2046
	inx
	clc
L2046:	adc     #$01
	bcc     L1DDB
	inx
L1DDB:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     _local_ix
	bcc     L2045
	inx
L2045:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (local_iy = 0; local_iy < BOARD_HEIGHT; ++local_iy)
;
	.dbg	line, "main.c", 3411
	inc     _local_iy
	jmp     L2049
;
; copy_board_data,
;
	.dbg	line, "main.c", 3422
L1DC9:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3423
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3425
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + (local_ix << 3),
;
	.dbg	line, "main.c", 3426
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3427
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; if (local_ix % 3 == 0)
;
	.dbg	line, "main.c", 3430
	lda     _local_ix
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	cpx     #$00
	bne     L1DC2
	cmp     #$00
	bne     L1DC2
;
; delay(1);
;
	.dbg	line, "main.c", 3436
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3437
	jsr     _clear_vram_buffer
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3408
L1DC2:	inc     _local_ix
	jmp     L2048
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_block_at_bottom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_block_at_bottom: near

	.dbg	func, "add_block_at_bottom", "00", extern, "_add_block_at_bottom"

.segment	"BSS"

L1DF0:
	.res	1,$00
L1DF1:
	.res	1,$00
L1DF2:
	.res	1,$00

.segment	"CODE"

;
; attacks = 0;
;
	.dbg	line, "main.c", 3461
	lda     #$00
	sta     L1DF2
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3468
	sta     L1DF0
L2051:	lda     L1DF0
	sec
	sbc     #$0A
	bvc     L1DFE
	eor     #$80
L1DFE:	jpl     L2059
;
; if (attack_row_status[ix] > 0)
;
	.dbg	line, "main.c", 3470
	ldy     L1DF0
	lda     _attack_row_status,y
	jeq     L2058
;
; if (attack_row_status[ix] >= ATTACK_MAX)
;
	.dbg	line, "main.c", 3472
	ldy     L1DF0
	lda     _attack_row_status,y
	cmp     #$0A
	bcc     L2052
;
; row_to_clear = ix;
;
	.dbg	line, "main.c", 3484
	lda     L1DF0
	sta     _row_to_clear
;
; break;
;
	.dbg	line, "main.c", 3491
	jmp     L2059
;
; ++attacks;
;
	.dbg	line, "main.c", 3493
L2052:	inc     L1DF2
;
; ++attack_row_status[ix];
;
	.dbg	line, "main.c", 3494
	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     L1DF0
	bcc     L1E12
	inx
L1E12:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (attack_row_status[ix] > ATTACK_QUEUE_SIZE)
;
	.dbg	line, "main.c", 3496
	ldy     L1DF0
	lda     _attack_row_status,y
	cmp     #$04
	jcc     L2058
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
	.dbg	line, "main.c", 3498
	lda     #$17
	sta     L1DF1
L2053:	lda     L1DF1
	cmp     #$04
	ldx     #$00
	jcc     L2057
;
; if (game_board[TILE_TO_BOARD_INDEX(ix, iy)] == 0)
;
	.dbg	line, "main.c", 3501
	ldy     L1DF1
	lda     _board_lookup_y,y
	sta     ptr1
	lda     L1DF0
	bpl     L1E29
	dex
L1E29:	clc
	adc     ptr1
	bcc     L204B
	inx
L204B:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L2055
;
; for (; iy <= BOARD_END_Y_PX_BOARD; ++iy)
;
	.dbg	line, "main.c", 3504
	tax
L2054:	lda     L1DF1
	cmp     #$18
	bcs     L2057
;
; game_board[TILE_TO_BOARD_INDEX(ix, iy)] = game_board[TILE_TO_BOARD_INDEX(ix, iy + 1)];
;
	.dbg	line, "main.c", 3506
	ldy     L1DF1
	lda     _board_lookup_y,y
	sta     ptr1
	lda     L1DF0
	bpl     L1E38
	dex
L1E38:	clc
	adc     ptr1
	bcc     L204F
	inx
	clc
L204F:	adc     #<(_game_board)
	sta     sreg
	txa
	adc     #>(_game_board)
	sta     sreg+1
	ldx     #$00
	lda     L1DF1
	clc
	adc     #$01
	bcc     L1E3F
	inx
L1E3F:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     L1DF0
	bpl     L1E41
	dex
L1E41:	clc
	adc     ptr1
	bcc     L204D
	inx
L204D:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (; iy <= BOARD_END_Y_PX_BOARD; ++iy)
;
	.dbg	line, "main.c", 3504
	ldx     #$00
	inc     L1DF1
	jmp     L2054
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
	.dbg	line, "main.c", 3498
L2055:	dec     L1DF1
	jmp     L2053
;
; game_board[TILE_TO_BOARD_INDEX(ix, BOARD_END_Y_PX_BOARD)] = garbage_types[cur_garbage_type]; //     0x60; //0xf7; //(attack_row_status[ix] == (ATTACK_QUEUE_SIZE + 1)) ? 0xf9 : 0xf8;
;
	.dbg	line, "main.c", 3513
L2057:	lda     L1DF0
	bpl     L1E49
	dex
L1E49:	clc
	adc     _board_lookup_y+23
	bcc     L2050
	inx
	clc
L2050:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     _cur_garbage_type
	lda     _garbage_types,y
	ldy     #$00
	sta     (ptr1),y
;
; ++cur_garbage_type;
;
	.dbg	line, "main.c", 3514
	inc     _cur_garbage_type
;
; if (cur_garbage_type >= NUM_GARBAGE_TYPES)
;
	.dbg	line, "main.c", 3515
	lda     _cur_garbage_type
	cmp     #$03
	bcc     L2058
;
; cur_garbage_type = 0;
;
	.dbg	line, "main.c", 3517
	sty     _cur_garbage_type
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3468
L2058:	inc     L1DF0
	jpl     L2051
	jmp     L2051
;
; if (attacks == 0)
;
	.dbg	line, "main.c", 3526
L2059:	lda     L1DF2
	bne     L1E52
;
; attack_row_status[rand() % BOARD_WIDTH] = 1;
;
	.dbg	line, "main.c", 3529
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	clc
	adc     #<(_attack_row_status)
	sta     ptr1
	txa
	adc     #>(_attack_row_status)
	sta     ptr1+1
	lda     #$01
	ldy     #$00
	sta     (ptr1),y
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3533
L1E52:	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_row_at_bottom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_row_at_bottom: near

	.dbg	func, "add_row_at_bottom", "00", extern, "_add_row_at_bottom"

.segment	"CODE"

;
; memfill(&game_board[TILE_TO_BOARD_INDEX(0, BOARD_END_Y_PX_BOARD - kill_row_cur)], 1, BOARD_WIDTH);
;
	.dbg	line, "main.c", 3538
	jsr     decsp3
	lda     #$17
	sec
	sbc     _kill_row_cur
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	clc
	adc     #<(_game_board)
	tay
	lda     #$00
	adc     #>(_game_board)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _memfill
;
; ++kill_row_cur;
;
	.dbg	line, "main.c", 3539
	inc     _kill_row_cur
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3540
	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ reset_gameplay_area (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_gameplay_area: near

	.dbg	func, "reset_gameplay_area", "00", extern, "_reset_gameplay_area"

.segment	"CODE"

;
; memfill(game_board, 0, BOARD_SIZE);
;
	.dbg	line, "main.c", 3545
	jsr     decsp3
	lda     #<(_game_board)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_game_board)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$F0
	jsr     _memfill
;
; lines_cleared_one = lines_cleared_ten = lines_cleared_hundred = cur_score = 0;
;
	.dbg	line, "main.c", 3548
	ldx     #$00
	txa
	sta     _cur_score
	sta     _cur_score+1
	sta     _cur_score+2
	sta     _cur_score+3
	sta     _lines_cleared_hundred
	sta     _lines_cleared_ten
	sta     _lines_cleared_one
;
; cur_level = saved_starting_level;
;
	.dbg	line, "main.c", 3549
	lda     _saved_starting_level
	sta     _cur_level
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 3550
	cmp     #$1E
	bcs     L205A
	lda     _cur_level
	jmp     L1E7D
L205A:	lda     #$1E
L1E7D:	sta     ptr1
	txa
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 3551
	lda     #$FF
	sta     _row_to_clear
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 3552
	sta     _delay_lock_remaining
;
; kill_row_cur = 0;
;
	.dbg	line, "main.c", 3553
	stx     _kill_row_cur
;
; start_delay_remaining = START_DELAY;
;
	.dbg	line, "main.c", 3554
	lda     #$78
	sta     _start_delay_remaining
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 3557
	txa
	sta     _time_of_day
;
; pal_bg(palette_bg_list[time_of_day]);
;
	.dbg	line, "main.c", 3558
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	tay
	txa
	adc     #>(_palette_bg_list)
	tax
	tya
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	.dbg	line, "main.c", 3559
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; one_vram_buffer(0x8, get_ppu_addr(2, 4 << 3, 9 << 3));
;
	.dbg	line, "main.c", 3562
	lda     #$08
	jsr     pusha
	jsr     decsp2
	lda     #$02
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3564
	jsr     _display_lines_cleared
;
; display_score();
;
	.dbg	line, "main.c", 3565
	jsr     _display_score
;
; display_level();
;
	.dbg	line, "main.c", 3566
	jsr     _display_level
;
; oam_clear();
;
	.dbg	line, "main.c", 3568
	jsr     _oam_clear
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 16));
;
	.dbg	line, "main.c", 3571
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$10
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 24));
;
	.dbg	line, "main.c", 3572
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3575
	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ fade_to_black (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_to_black: near

	.dbg	func, "fade_to_black", "00", extern, "_fade_to_black"

.segment	"CODE"

;
; pal_bright(3);
;
	.dbg	line, "main.c", 3659
	lda     #$03
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3660
	lda     #$02
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "main.c", 3661
	lda     #$02
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3662
	lda     #$02
	jsr     _delay
;
; pal_bright(1);
;
	.dbg	line, "main.c", 3663
	lda     #$01
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3664
	lda     #$02
	jsr     _delay
;
; pal_bright(0);
;
	.dbg	line, "main.c", 3665
	lda     #$00
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3666
	lda     #$02
	jmp     _delay
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ fade_from_black (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_from_black: near

	.dbg	func, "fade_from_black", "00", extern, "_fade_from_black"

.segment	"CODE"

;
; pal_bright(1);
;
	.dbg	line, "main.c", 3671
	lda     #$01
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3672
	lda     #$02
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "main.c", 3673
	lda     #$02
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3674
	lda     #$02
	jsr     _delay
;
; pal_bright(3);
;
	.dbg	line, "main.c", 3675
	lda     #$03
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3676
	lda     #$02
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "main.c", 3677
	lda     #$04
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3678
	lda     #$02
	jmp     _delay
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ difficulty_to_leaderboard_pos (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_difficulty_to_leaderboard_pos: near

	.dbg	func, "difficulty_to_leaderboard_pos", "00", extern, "_difficulty_to_leaderboard_pos"
	.dbg	sym, "dif", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 3682
	jsr     pusha
;
; switch (dif)
;
	.dbg	line, "main.c", 3683
	ldy     #$00
	lda     (sp),y
;
; }
;
	.dbg	line, "main.c", 3701
	beq     L205C
	cmp     #$01
	beq     L205D
	cmp     #$02
	beq     L205E
	cmp     #$03
	beq     L205F
	jmp     incsp1
;
; in_x = 4;
;
	.dbg	line, "main.c", 3686
L205C:	lda     #$04
	sta     _in_x
;
; in_y = 12;
;
	.dbg	line, "main.c", 3687
	lda     #$0C
;
; break;
;
	.dbg	line, "main.c", 3688
	jmp     L205B
;
; in_x = 18;
;
	.dbg	line, "main.c", 3690
L205D:	lda     #$12
	sta     _in_x
;
; in_y = 12;
;
	.dbg	line, "main.c", 3691
	lda     #$0C
;
; break;
;
	.dbg	line, "main.c", 3692
	jmp     L205B
;
; in_x = 4;
;
	.dbg	line, "main.c", 3694
L205E:	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 3696
	jmp     L2061
;
; in_x = 18;
;
	.dbg	line, "main.c", 3698
L205F:	lda     #$12
L2061:	sta     _in_x
;
; in_y = 22;
;
	.dbg	line, "main.c", 3699
	lda     #$16
L205B:	sta     _in_y
;
; }
;
	.dbg	line, "main.c", 3702
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"RODATA"

L11A0:
	.word	$0000

.segment	"BSS"

L1106:
	.res	1,$00
L1107:
	.res	2,$00
L1108:
	.res	1,$00

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "main.c", 339
	jsr     _ppu_off
;
; bank_spr(1);
;
	.dbg	line, "main.c", 353
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	.dbg	line, "main.c", 355
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 356
	jsr     _clear_vram_buffer
;
; off_nt = 0;
;
	.dbg	line, "main.c", 359
	lda     #$00
	sta     _off_nt
;
; cur_nt = 2;
;
	.dbg	line, "main.c", 360
	lda     #$02
	sta     _cur_nt
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 362
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 363
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; vram_adr(NTADR_C(0, 0));
;
	.dbg	line, "main.c", 364
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(game_area);
;
	.dbg	line, "main.c", 365
	lda     #<(_game_area)
	ldx     #>(_game_area)
	jsr     _vram_unrle
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 367
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, scroll_y); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 368
	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "main.c", 371
	jsr     _ppu_on_all
;
; attack_style = ATTACK_ON_TIME; // ATTACK_ON_LAND;
;
	.dbg	line, "main.c", 375
	lda     #$01
	sta     _attack_style
;
; music_on = 1;
;
	.dbg	line, "main.c", 376
	sta     _music_on
;
; sfx_on = 1;
;
	.dbg	line, "main.c", 377
	sta     _sfx_on
;
; hard_drops_on = 1;
;
	.dbg	line, "main.c", 378
	sta     _hard_drops_on
;
; block_style = BLOCK_STYLE_CLASSIC;
;
	.dbg	line, "main.c", 379
	sta     _block_style
;
; state = 0xff; // uninitialized so that we don't trigger a "leaving state".
;
	.dbg	line, "main.c", 380
	lda     #$FF
	sta     _state
;
; cur_garbage_type = 0;
;
	.dbg	line, "main.c", 381
	lda     #$00
	sta     _cur_garbage_type
;
; credits_remaining = 0;
;
	.dbg	line, "main.c", 383
	sta     _credits_remaining
;
; free_play_enabled = (DIP1 != 0);
;
	.dbg	line, "main.c", 384
	lda     $4016
	and     #$08
	jsr     boolne
	sta     _free_play_enabled
;
; game_cost = (DIP2 == 0) ? 1 : 2;
;
	.dbg	line, "main.c", 385
	lda     $4016
	and     #$10
	bne     L2080
	lda     #$01
	jmp     L2081
L2080:	lda     #$02
L2081:	sta     _game_cost
;
; music_on = DIP6 == 0;
;
	.dbg	line, "main.c", 386
	lda     $4017
	and     #$20
	jsr     booleq
	sta     _music_on
;
; sfx_on = DIP7 == 0;
;
	.dbg	line, "main.c", 387
	lda     $4017
	and     #$40
	jsr     booleq
	sta     _sfx_on
;
; high_score_entry_placement = 0xff;
;
	.dbg	line, "main.c", 388
	lda     #$FF
	sta     _high_score_entry_placement
;
; PPU_VERSION = ((DIP5 != 0) << 2) | ((DIP4 != 0) << 1) | (DIP3 != 0);
;
	.dbg	line, "main.c", 395
	lda     $4017
	and     #$10
	jsr     boolne
	jsr     aslax2
	jsr     pushax
	lda     $4017
	and     #$08
	jsr     boolne
	asl     a
	bcc     L206E
	inx
L206E:	jsr     tosorax
	jsr     pushax
	lda     $4017
	and     #$04
	jsr     boolne
	jsr     tosora0
	sta     _PPU_VERSION
;
; pal_bright(0);
;
	.dbg	line, "main.c", 397
	lda     #$00
	jsr     _pal_bright
;
; go_to_state(STATE_BOOT);
;
	.dbg	line, "main.c", 398
	lda     #$00
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 399
	jsr     _fade_from_black
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	.dbg	line, "main.c", 448
L1172:	jsr     _ppu_wait_nmi
;
; ++tick_count;
;
	.dbg	line, "main.c", 452
	inc     _tick_count
;
; ++tick_count_large;
;
	.dbg	line, "main.c", 453
	inc     _tick_count_large
	bne     L1179
	inc     _tick_count_large+1
;
; ++ticks_in_state_large;
;
	.dbg	line, "main.c", 454
L1179:	inc     _ticks_in_state_large
	bne     L117B
	inc     _ticks_in_state_large+1
;
; pad1 = pad_poll(0);     // read the first controller
;
	.dbg	line, "main.c", 456
L117B:	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	.dbg	line, "main.c", 457
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; pad2 = pad_poll(1);
;
	.dbg	line, "main.c", 459
	lda     #$01
	jsr     _pad_poll
	sta     _pad2
;
; pad2_new = get_pad_new(1);
;
	.dbg	line, "main.c", 460
	lda     #$01
	jsr     _get_pad_new
	sta     _pad2_new
;
; pad_all = pad1 | pad2;
;
	.dbg	line, "main.c", 464
	lda     _pad2
	ora     _pad1
	sta     _pad_all
;
; pad_all_new = pad1_new | pad2_new;
;
	.dbg	line, "main.c", 465
	lda     _pad2_new
	ora     _pad1_new
	sta     _pad_all_new
;
; if (attract_gameplay_enabled)
;
	.dbg	line, "main.c", 468
	lda     _attract_gameplay_enabled
	jeq     L2085
;
; if ((state == STATE_OPTIONS || state == STATE_GAME))
;
	.dbg	line, "main.c", 470
	lda     _state
	cmp     #$03
	beq     L2082
	cmp     #$04
	jne     L2085
;
; if (pad_all_new != 0)
;
	.dbg	line, "main.c", 472
L2082:	lda     _pad_all_new
	beq     L2084
;
; fade_to_black();
;
	.dbg	line, "main.c", 474
	jsr     _fade_to_black
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 475
	lda     #$02
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 476
	jsr     _fade_from_black
;
; pad_all = pad_all_new = pad1 = pad1_new = pad2 = pad2_new = 0;
;
	.dbg	line, "main.c", 478
	lda     #$00
	sta     _pad2_new
	sta     _pad2
	sta     _pad1_new
	sta     _pad1
	sta     _pad_all_new
	sta     _pad_all
;
; goto skip_attract_input;
;
	.dbg	line, "main.c", 479
	jmp     L2085
;
; pad_all = pad_all_new = pad1 = pad1_new = pad2 = pad2_new = 0;
;
	.dbg	line, "main.c", 481
L2084:	sta     _pad2_new
	sta     _pad2
	sta     _pad1_new
	sta     _pad1
	sta     _pad_all_new
	sta     _pad_all
;
; if (ticks_in_state_large % (30 - cur_level) == 0)
;
	.dbg	line, "main.c", 484
	lda     _ticks_in_state_large
	ldx     _ticks_in_state_large+1
	jsr     pushax
	lda     #$1E
	sec
	sbc     _cur_level
	jsr     tosumoda0
	cpx     #$00
	bne     L2085
	cmp     #$00
	bne     L2085
;
; if (rand() % 2 == 0)
;
	.dbg	line, "main.c", 486
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	cpx     #$00
	bne     L11AC
	cmp     #$00
	bne     L11AC
;
; pad_all_new |= PAD_LEFT;
;
	.dbg	line, "main.c", 488
	lda     _pad_all_new
	ora     #$02
;
; else
;
	.dbg	line, "main.c", 490
	jmp     L207B
;
; pad_all_new |= PAD_RIGHT;
;
	.dbg	line, "main.c", 492
L11AC:	lda     _pad_all_new
	ora     #$01
L207B:	sta     _pad_all_new
;
; pad_all_new |= (rand() % 4 == 0) ? PAD_A : 0;
;
	.dbg	line, "main.c", 494
	lda     _pad_all_new
	jsr     pusha0
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     tosmoda0
	cpx     #$00
	bne     L210E
	cmp     #$00
	bne     L210E
	lda     #$80
	jmp     L11BA
L210E:	lda     #$00
L11BA:	jsr     tosora0
	sta     _pad_all_new
;
; if (maintenance_counter == 0)
;
	.dbg	line, "main.c", 506
L2085:	lda     _maintenance_counter
	jne     L209D
;
; if (CREDITS_QUEUED > 0 || ((prev_4016 & 1 << 2) && !(PEEK(0x4016) & 1 << 2)))
;
	.dbg	line, "main.c", 510
	lda     _CREDITS_QUEUED
	bne     L208D
	lda     _prev_4016
	and     #$04
	jeq     L209E
	lda     $4016
	and     #$04
	jne     L209E
;
; if (credits_remaining < 254)
;
	.dbg	line, "main.c", 512
L208D:	lda     _credits_remaining
	cmp     #$FE
	jcs     L209E
;
; tick_count = 0;
;
	.dbg	line, "main.c", 516
	lda     #$00
	sta     _tick_count
;
; ++credits_remaining;
;
	.dbg	line, "main.c", 517
	inc     _credits_remaining
;
; if ((state == STATE_MENU || state == STATE_HIGH_SCORE_TABLE) && (DIP8 != 0 && credits_remaining == game_cost))
;
	.dbg	line, "main.c", 522
	lda     _state
	cmp     #$02
	beq     L208E
	cmp     #$08
	bne     L2096
L208E:	lda     $4017
	and     #$80
	beq     L2096
	lda     _game_cost
	cmp     _credits_remaining
	bne     L2096
;
; MUSIC_PLAY_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 524
	lda     _music_on
	beq     L2096
	lda     #$00
	jsr     _music_play
;
; if (CREDITS_QUEUED > 0)
;
	.dbg	line, "main.c", 529
L2096:	lda     _CREDITS_QUEUED
	beq     L2097
;
; --CREDITS_QUEUED;
;
	.dbg	line, "main.c", 531
	dec     _CREDITS_QUEUED
;
; maintenance_counter = 6;
;
	.dbg	line, "main.c", 534
	lda     #$06
	sta     _maintenance_counter
;
; POKE(0x4020, 1);
;
	.dbg	line, "main.c", 539
	lda     #$01
	sta     $4020
;
; if (state != STATE_GAME)
;
	.dbg	line, "main.c", 543
L2097:	lda     _state
	cmp     #$04
	beq     L11EE
;
; screen_shake_remaining = 5;
;
	.dbg	line, "main.c", 545
	lda     #$05
	sta     _screen_shake_remaining
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP_MULTI);
;
	.dbg	line, "main.c", 546
	lda     _sfx_on
	beq     L11EE
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (attract_gameplay_enabled && (state == STATE_OPTIONS || state == STATE_GAME))
;
	.dbg	line, "main.c", 549
L11EE:	lda     _attract_gameplay_enabled
	beq     L209E
	lda     _state
	cmp     #$03
	beq     L209C
	cmp     #$04
	bne     L209E
;
; fade_to_black();
;
	.dbg	line, "main.c", 551
L209C:	jsr     _fade_to_black
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 552
	lda     #$02
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 553
	jsr     _fade_from_black
;
; else
;
	.dbg	line, "main.c", 558
	jmp     L209E
;
; --maintenance_counter;
;
	.dbg	line, "main.c", 560
L209D:	dec     _maintenance_counter
;
; if (maintenance_counter == 3)
;
	.dbg	line, "main.c", 564
	lda     _maintenance_counter
	cmp     #$03
	bne     L209E
;
; POKE(0x4020, 0);
;
	.dbg	line, "main.c", 566
	lda     #$00
	sta     $4020
;
; prev_4016 = PEEK(0x4016);
;
	.dbg	line, "main.c", 571
L209E:	lda     $4016
	sta     _prev_4016
;
; clear_vram_buffer(); // do at the beginning of each frame
;
	.dbg	line, "main.c", 574
	jsr     _clear_vram_buffer
;
; switch (state)
;
	.dbg	line, "main.c", 587
	lda     _state
;
; }
;
	.dbg	line, "main.c", 1532
	beq     L209F
	cmp     #$01
	beq     L20A1
	cmp     #$02
	beq     L1224
	cmp     #$03
	jeq     L1287
	cmp     #$04
	jeq     L20E0
	cmp     #$06
	jeq     L1459
	cmp     #$08
	jeq     L1465
	jmp     L2107
;
; if (tick_count == 120 || pad_all_new & PAD_ALL_BUTTONS)
;
	.dbg	line, "main.c", 591
L209F:	lda     _tick_count
	cmp     #$78
	beq     L20A0
	lda     _pad_all_new
	and     #$F0
	jeq     L2107
;
; fade_to_black();
;
	.dbg	line, "main.c", 593
L20A0:	jsr     _fade_to_black
;
; go_to_state(STATE_TY);
;
	.dbg	line, "main.c", 594
	lda     #$01
;
; break;
;
	.dbg	line, "main.c", 597
	jmp     L210D
;
; if (tick_count == 104 || pad_all_new & PAD_ALL_BUTTONS)
;
	.dbg	line, "main.c", 602
L20A1:	lda     _tick_count
	cmp     #$68
	jeq     L2112
;
; break;
;
	.dbg	line, "main.c", 608
	jmp     L2106
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 612
L1224:	jsr     _draw_menu_sprites
;
; if (tick_count % 128 == 0)
;
	.dbg	line, "main.c", 614
	lda     _tick_count
	and     #$7F
	bne     L20A5
;
; if (free_play_enabled) // free play
;
	.dbg	line, "main.c", 617
	lda     _free_play_enabled
	beq     L20A3
;
; multi_vram_buffer_horz(text_free_play, sizeof(text_free_play) - 1, get_ppu_addr(0, 8 << 3, 12 << 3));
;
	.dbg	line, "main.c", 619
	jsr     decsp3
	lda     #<(_text_free_play)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_free_play)
;
; else if (credits_remaining >= game_cost)
;
	.dbg	line, "main.c", 621
	jmp     L211E
L20A3:	lda     _credits_remaining
	cmp     _game_cost
	bcc     L20A4
;
; multi_vram_buffer_horz(text_push_start, sizeof(text_push_start) - 1, get_ppu_addr(0, 8 << 3, 12 << 3));
;
	.dbg	line, "main.c", 623
	jsr     decsp3
	lda     #<(_text_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_push_start)
;
; else
;
	.dbg	line, "main.c", 625
	jmp     L211E
;
; if (game_cost - credits_remaining == 1)
;
	.dbg	line, "main.c", 627
L20A4:	lda     _game_cost
	sec
	sbc     _credits_remaining
	cmp     #$01
	bne     L123F
;
; multi_vram_buffer_horz(text_insert_1_coin, sizeof(text_insert_1_coin) - 1, get_ppu_addr(0, 8 << 3, 12 << 3));
;
	.dbg	line, "main.c", 629
	jsr     decsp3
	lda     #<(_text_insert_1_coin)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_insert_1_coin)
;
; else
;
	.dbg	line, "main.c", 631
	jmp     L211E
;
; multi_vram_buffer_horz(text_insert_2_coin, sizeof(text_insert_2_coin) - 1, get_ppu_addr(0, 8 << 3, 12 << 3));
;
	.dbg	line, "main.c", 633
L123F:	jsr     decsp3
	lda     #<(_text_insert_2_coin)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_insert_2_coin)
;
; else if (tick_count % 128 == 96)
;
	.dbg	line, "main.c", 640
	jmp     L211E
L20A5:	lda     _tick_count
	and     #$7F
	cmp     #$60
	bne     L20A6
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 8 << 3, 12 << 3));
;
	.dbg	line, "main.c", 643
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
L211E:	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (pad2_new & (PAD_SELECT))
;
	.dbg	line, "main.c", 664
L20A6:	lda     _pad2_new
	and     #$20
	beq     L20A7
;
; fade_to_black();
;
	.dbg	line, "main.c", 666
	jsr     _fade_to_black
;
; auto_forward_leaderboards = 1;
;
	.dbg	line, "main.c", 667
	lda     #$01
	sta     _auto_forward_leaderboards
;
; go_to_state(STATE_HIGH_SCORE_TABLE);
;
	.dbg	line, "main.c", 668
	lda     #$08
;
; else if (((pad1_new & PAD_SELECT) || (pad_all_new & (PAD_START | PAD_A | PAD_B))) && (credits_remaining >= game_cost || free_play_enabled)) // free play
;
	.dbg	line, "main.c", 672
	jmp     L210B
L20A7:	lda     _pad1_new
	and     #$20
	bne     L20A8
	lda     _pad_all_new
	and     #$D0
	beq     L20AE
L20A8:	lda     _credits_remaining
	cmp     _game_cost
	bcs     L20AD
	lda     _free_play_enabled
	beq     L20AE
;
; srand(tick_count_large);
;
	.dbg	line, "main.c", 677
L20AD:	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     _srand
;
; fade_to_black();
;
	.dbg	line, "main.c", 689
	jsr     _fade_to_black
;
; go_to_state(STATE_OPTIONS);
;
	.dbg	line, "main.c", 690
	lda     #$03
L210B:	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 691
	jsr     _fade_from_black
;
; if ((credits_remaining < game_cost) && ticks_in_state_large > (15 * 60 * 1))
;
	.dbg	line, "main.c", 698
L20AE:	lda     _credits_remaining
	cmp     _game_cost
	jcs     L2107
	lda     _ticks_in_state_large
	cmp     #$85
	lda     _ticks_in_state_large+1
	sbc     #$03
	jcc     L2107
;
; fade_to_black();
;
	.dbg	line, "main.c", 700
	jsr     _fade_to_black
;
; attract_gameplay_enabled = 1;
;
	.dbg	line, "main.c", 701
	lda     #$01
	sta     _attract_gameplay_enabled
;
; go_to_state(STATE_OPTIONS);
;
	.dbg	line, "main.c", 702
	lda     #$03
;
; break;
;
	.dbg	line, "main.c", 706
	jmp     L210D
;
; if (ticks_in_state_large <= AUTO_FORWARD_DELAY)
;
	.dbg	line, "main.c", 714
L1287:	lda     _ticks_in_state_large+1
	cmp     #$07
	bne     L128B
	lda     _ticks_in_state_large
	cmp     #$09
L128B:	jcs     L20B1
;
; oam_clear();
;
	.dbg	line, "main.c", 716
	jsr     _oam_clear
;
; temp_secs = ((AUTO_FORWARD_DELAY - ticks_in_state_large) / 60);
;
	.dbg	line, "main.c", 717
	lda     #$08
	sec
	sbc     _ticks_in_state_large
	pha
	lda     #$07
	sbc     _ticks_in_state_large+1
	tax
	pla
	jsr     pushax
	lda     #$3C
	jsr     tosudiva0
	sta     L1107
	stx     L1107+1
;
; digit = (temp_secs) % 10;
;
	.dbg	line, "main.c", 718
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	sta     L1108
;
; oam_spr(27 << 3, 2 << 3, '0' + digit, 0);
;
	.dbg	line, "main.c", 719
	jsr     decsp3
	lda     #$D8
	ldy     #$02
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     L1108
	clc
	adc     #$30
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; temp_secs = temp_secs / 10;
;
	.dbg	line, "main.c", 720
	lda     L1107
	ldx     L1107+1
	jsr     pushax
	lda     #$0A
	jsr     tosudiva0
	sta     L1107
	stx     L1107+1
;
; digit = (temp_secs) % 10;
;
	.dbg	line, "main.c", 721
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	sta     L1108
;
; oam_spr(26 << 3, 2 << 3, '0' + digit, 0);
;
	.dbg	line, "main.c", 722
	jsr     decsp3
	lda     #$D0
	ldy     #$02
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     L1108
	clc
	adc     #$30
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; switch ((option_state))
;
	.dbg	line, "main.c", 725
L20B1:	lda     _option_state
;
; }
;
	.dbg	line, "main.c", 897
	beq     L20B2
	cmp     #$01
	jeq     L20C3
	jmp     L2107
;
; if (pad_all_new & PAD_RIGHT)
;
	.dbg	line, "main.c", 729
L20B2:	lda     _pad_all_new
	and     #$01
	beq     L20B8
;
; if (attack_style < ATTACK_NUM - 1)
;
	.dbg	line, "main.c", 731
	lda     _attack_style
	cmp     #$02
	jcs     L20BE
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 733
	lda     #$00
	sta     L1106
L20B3:	lda     L1106
	cmp     #$04
	bcs     L20B4
;
; pal_col(i + (4 * attack_style), palette_vs_options_inactive[i]);
;
	.dbg	line, "main.c", 735
	lda     _attack_style
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_inactive,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 733
	inc     L1106
	jmp     L20B3
;
; ++attack_style;
;
	.dbg	line, "main.c", 738
L20B4:	inc     _attack_style
;
; SFX_PLAY_WRAPPER(SOUND_MENU_HIGH);
;
	.dbg	line, "main.c", 739
	lda     _sfx_on
	beq     L20B6
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 741
	lda     #$00
L20B6:	sta     L1106
L20B7:	lda     L1106
	cmp     #$04
	jcs     L20BE
;
; pal_col(i + (4 * attack_style), palette_vs_options_active[i]);
;
	.dbg	line, "main.c", 743
	lda     _attack_style
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_active,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 741
	inc     L1106
	jmp     L20B7
;
; else if (pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 747
L20B8:	lda     _pad_all_new
	and     #$02
	beq     L20BE
;
; if (attack_style > 0)
;
	.dbg	line, "main.c", 749
	lda     _attack_style
	beq     L20BE
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 751
	lda     #$00
	sta     L1106
L20B9:	lda     L1106
	cmp     #$04
	bcs     L20BA
;
; pal_col(i + (4 * attack_style), palette_vs_options_inactive[i]);
;
	.dbg	line, "main.c", 753
	lda     _attack_style
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_inactive,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 751
	inc     L1106
	jmp     L20B9
;
; --attack_style;
;
	.dbg	line, "main.c", 756
L20BA:	dec     _attack_style
;
; SFX_PLAY_WRAPPER(SOUND_MENU_LOW);
;
	.dbg	line, "main.c", 757
	lda     _sfx_on
	beq     L20BC
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 759
	lda     #$00
L20BC:	sta     L1106
L20BD:	lda     L1106
	cmp     #$04
	bcs     L20BE
;
; pal_col(i + (4 * attack_style), palette_vs_options_active[i]);
;
	.dbg	line, "main.c", 761
	lda     _attack_style
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_active,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 759
	inc     L1106
	jmp     L20BD
;
; if (pad_all_new & (PAD_A | PAD_B | PAD_SELECT | PAD_START) || ticks_in_state_large > AUTO_FORWARD_DELAY)
;
	.dbg	line, "main.c", 765
L20BE:	lda     _pad_all_new
	and     #$F0
	bne     L20BF
	lda     _ticks_in_state_large
	cmp     #$09
	lda     _ticks_in_state_large+1
	sbc     #$07
	jcc     L2107
;
; fade_to_black();
;
	.dbg	line, "main.c", 767
L20BF:	jsr     _fade_to_black
;
; oam_clear();
;
	.dbg	line, "main.c", 768
	jsr     _oam_clear
;
; ppu_off();
;
	.dbg	line, "main.c", 769
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 770
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(vs_settings_difficulty);
;
	.dbg	line, "main.c", 771
	lda     #<(_vs_settings_difficulty)
	ldx     #>(_vs_settings_difficulty)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 772
	jsr     _ppu_on_all
;
; option_state = 1;
;
	.dbg	line, "main.c", 773
	lda     #$01
	sta     _option_state
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 774
	lda     #$00
	sta     L1106
L20C0:	lda     L1106
	cmp     #$04
	bcs     L20C1
;
; pal_col(i + (4 * attack_style), palette_vs_options_inactive[i]);
;
	.dbg	line, "main.c", 776
	lda     _attack_style
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_inactive,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 774
	inc     L1106
	jmp     L20C0
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 778
L20C1:	lda     #$00
	sta     L1106
L20C2:	lda     L1106
	cmp     #$04
	jcs     L207F
;
; pal_col(i + (4 * cur_level_vs_setting), palette_vs_options_active[i]);
;
	.dbg	line, "main.c", 780
	lda     _cur_level_vs_setting
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_active,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 778
	inc     L1106
	jmp     L20C2
;
; if (vs_code_index < VS_CODE_LEN)
;
	.dbg	line, "main.c", 789
L20C3:	lda     _vs_code_index
	cmp     #$07
	bcs     L20C6
;
; if (pad_all_new != 0)
;
	.dbg	line, "main.c", 791
	lda     _pad_all_new
	jeq     L20C8
;
; if (pad_all_new & vs_code[vs_code_index])
;
	.dbg	line, "main.c", 793
	ldy     _vs_code_index
	lda     _vs_code,y
	and     _pad_all_new
	pha
	pla
	beq     L20C5
;
; ++vs_code_index;
;
	.dbg	line, "main.c", 795
	inc     _vs_code_index
;
; if (vs_code_index == VS_CODE_LEN)
;
	.dbg	line, "main.c", 796
	lda     _vs_code_index
	cmp     #$07
	jne     L20C8
;
; music_stop();
;
	.dbg	line, "main.c", 798
	jsr     _music_stop
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP_MULTI)
;
	.dbg	line, "main.c", 799
	lda     _sfx_on
	beq     L133A
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; cur_level_vs_setting = 3;
;
	.dbg	line, "main.c", 800
L133A:	lda     #$03
	sta     _cur_level_vs_setting
;
; pal_bg(palette_vs_options_skulls);
;
	.dbg	line, "main.c", 801
	lda     #<(_palette_vs_options_skulls)
	ldx     #>(_palette_vs_options_skulls)
	jsr     _pal_bg
;
; ticks_in_state_large = MAX(ticks_in_state_large, AUTO_FORWARD_DELAY - (5 * 60));
;
	.dbg	line, "main.c", 802
	lda     _ticks_in_state_large+1
	cmp     #$05
	bne     L134B
	lda     _ticks_in_state_large
	cmp     #$DC
L134B:	bcs     L134C
	ldx     #$05
	lda     #$DC
	jmp     L1351
L134C:	lda     _ticks_in_state_large
	ldx     _ticks_in_state_large+1
L1351:	sta     _ticks_in_state_large
	stx     _ticks_in_state_large+1
;
; else
;
	.dbg	line, "main.c", 805
	jmp     L20C8
;
; vs_code_index = 0;
;
	.dbg	line, "main.c", 807
L20C5:	sta     _vs_code_index
;
; else
;
	.dbg	line, "main.c", 811
	jmp     L20C8
;
; for (i = 0; i < 8; ++i)
;
	.dbg	line, "main.c", 813
L20C6:	lda     #$00
	sta     L1106
L20C7:	lda     L1106
	cmp     #$08
	bcs     L20C8
;
; one_vram_buffer(0x01, get_ppu_addr(0, rand() % 256, rand() % 240));
;
	.dbg	line, "main.c", 815
	lda     #$01
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	jsr     _rand
	jsr     pushax
	ldx     #$01
	lda     #$00
	jsr     tosmodax
	ldy     #$00
	sta     (sp),y
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     tosmoda0
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; for (i = 0; i < 8; ++i)
;
	.dbg	line, "main.c", 813
	inc     L1106
	jmp     L20C7
;
; if (vs_code_index < VS_CODE_LEN && pad_all_new & PAD_RIGHT)
;
	.dbg	line, "main.c", 819
L20C8:	lda     _vs_code_index
	cmp     #$07
	bcs     L20D0
	lda     _pad_all_new
	and     #$01
	beq     L20D0
;
; if (cur_level_vs_setting < 2)
;
	.dbg	line, "main.c", 821
	lda     _cur_level_vs_setting
	cmp     #$02
	jcs     L20D8
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 823
	lda     #$00
	sta     L1106
L20CB:	lda     L1106
	cmp     #$04
	bcs     L20CC
;
; pal_col(i + (4 * cur_level_vs_setting), palette_vs_options_inactive[i]);
;
	.dbg	line, "main.c", 825
	lda     _cur_level_vs_setting
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_inactive,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 823
	inc     L1106
	jmp     L20CB
;
; ++cur_level_vs_setting;
;
	.dbg	line, "main.c", 828
L20CC:	inc     _cur_level_vs_setting
;
; SFX_PLAY_WRAPPER(SOUND_MENU_HIGH);
;
	.dbg	line, "main.c", 829
	lda     _sfx_on
	beq     L20CE
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 831
	lda     #$00
L20CE:	sta     L1106
L20CF:	lda     L1106
	cmp     #$04
	jcs     L20D8
;
; pal_col(i + (4 * cur_level_vs_setting), palette_vs_options_active[i]);
;
	.dbg	line, "main.c", 833
	lda     _cur_level_vs_setting
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_active,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 831
	inc     L1106
	jmp     L20CF
;
; else if (vs_code_index < VS_CODE_LEN && pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 837
L20D0:	lda     _vs_code_index
	cmp     #$07
	bcs     L20D8
	lda     _pad_all_new
	and     #$02
	beq     L20D8
;
; if (cur_level_vs_setting > 0)
;
	.dbg	line, "main.c", 839
	lda     _cur_level_vs_setting
	beq     L20D8
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 841
	lda     #$00
	sta     L1106
L20D3:	lda     L1106
	cmp     #$04
	bcs     L20D4
;
; pal_col(i + (4 * cur_level_vs_setting), palette_vs_options_inactive[i]);
;
	.dbg	line, "main.c", 843
	lda     _cur_level_vs_setting
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_inactive,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 841
	inc     L1106
	jmp     L20D3
;
; --cur_level_vs_setting;
;
	.dbg	line, "main.c", 846
L20D4:	dec     _cur_level_vs_setting
;
; SFX_PLAY_WRAPPER(SOUND_MENU_LOW);
;
	.dbg	line, "main.c", 847
	lda     _sfx_on
	beq     L20D6
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 849
	lda     #$00
L20D6:	sta     L1106
L20D7:	lda     L1106
	cmp     #$04
	bcs     L20D8
;
; pal_col(i + (4 * cur_level_vs_setting), palette_vs_options_active[i]);
;
	.dbg	line, "main.c", 851
	lda     _cur_level_vs_setting
	asl     a
	asl     a
	clc
	adc     L1106
	jsr     pusha
	ldy     L1106
	lda     _palette_vs_options_active,y
	jsr     _pal_col
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 849
	inc     L1106
	jmp     L20D7
;
; if (pad_all_new & (PAD_A | PAD_B | PAD_SELECT | PAD_START) || (ticks_in_state_large > AUTO_FORWARD_DELAY))
;
	.dbg	line, "main.c", 855
L20D8:	lda     _pad_all_new
	and     #$F0
	bne     L20D9
	lda     _ticks_in_state_large
	cmp     #$09
	lda     _ticks_in_state_large+1
	sbc     #$07
	jcc     L2107
;
; music_stop();
;
	.dbg	line, "main.c", 857
L20D9:	jsr     _music_stop
;
; SFX_PLAY_WRAPPER(SOUND_START);
;
	.dbg	line, "main.c", 858
	lda     _sfx_on
	beq     L13C0
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; switch (cur_level_vs_setting)
;
	.dbg	line, "main.c", 860
L13C0:	lda     _cur_level_vs_setting
;
; }
;
	.dbg	line, "main.c", 879
	beq     L207E
	cmp     #$01
	beq     L20DC
	cmp     #$02
	beq     L20DD
	cmp     #$03
	beq     L20DE
	jmp     L20DF
;
; cur_level = 9;
;
	.dbg	line, "main.c", 866
L20DC:	lda     #$09
;
; break;
;
	.dbg	line, "main.c", 867
	jmp     L207E
;
; cur_level = 19;
;
	.dbg	line, "main.c", 869
L20DD:	lda     #$13
;
; break;
;
	.dbg	line, "main.c", 870
	jmp     L207E
;
; cur_level = 29;
;
	.dbg	line, "main.c", 873
L20DE:	lda     #$1D
;
; break;
;
	.dbg	line, "main.c", 874
	jmp     L207E
;
; cur_level = 0;
;
	.dbg	line, "main.c", 877
L20DF:	lda     #$00
L207E:	sta     _cur_level
;
; fade_to_black();
;
	.dbg	line, "main.c", 881
	jsr     _fade_to_black
;
; ppu_off();
;
	.dbg	line, "main.c", 882
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 884
	jsr     _clear_vram_buffer
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 885
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 886
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 887
	jsr     _ppu_on_all
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 888
	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 892
	jmp     L210D
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 1114
L20E0:	lda     _hit_reaction_remaining
	beq     L20E1
;
; --hit_reaction_remaining;
;
	.dbg	line, "main.c", 1116
	dec     _hit_reaction_remaining
;
; if (row_to_clear >= 0)
;
	.dbg	line, "main.c", 1119
L20E1:	ldx     _row_to_clear
	bmi     L20E2
;
; --attack_row_status[row_to_clear];
;
	.dbg	line, "main.c", 1122
	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     _row_to_clear
	bcc     L13F8
	inx
L13F8:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (attack_row_status[row_to_clear] == 0)
;
	.dbg	line, "main.c", 1123
	ldy     _row_to_clear
	lda     _attack_row_status,y
	bne     L20E2
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 1125
	lda     #$FF
	sta     _row_to_clear
;
; if (attack_style != ATTACK_NEVER && attack_queued)
;
	.dbg	line, "main.c", 1130
L20E2:	lda     _attack_style
	cmp     #$02
	beq     L1400
	lda     _attack_queued
	beq     L1400
;
; add_block_at_bottom();
;
	.dbg	line, "main.c", 1134
	jsr     _add_block_at_bottom
;
; clear_rows_in_data(BOARD_END_Y_PX_BOARD);
;
	.dbg	line, "main.c", 1136
	lda     #$17
	jsr     _clear_rows_in_data
;
; attack_queued = 0;
;
	.dbg	line, "main.c", 1137
	lda     #$00
	sta     _attack_queued
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 1138
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; if (kill_row_queued)
;
	.dbg	line, "main.c", 1141
L1400:	lda     _kill_row_queued
	beq     L20E5
;
; add_row_at_bottom();
;
	.dbg	line, "main.c", 1143
	jsr     _add_row_at_bottom
;
; kill_row_queued = 0;
;
	.dbg	line, "main.c", 1144
	lda     #$00
	sta     _kill_row_queued
;
; if (delay_spawn_remaining != -1)
;
	.dbg	line, "main.c", 1149
L20E5:	lda     _delay_spawn_remaining
	cmp     #$FF
	beq     L1410
;
; if (horz_button_delay > 0)
;
	.dbg	line, "main.c", 1153
	lda     _horz_button_delay
	beq     L20E6
;
; --horz_button_delay;
;
	.dbg	line, "main.c", 1155
	dec     _horz_button_delay
;
; --delay_spawn_remaining;
;
	.dbg	line, "main.c", 1157
L20E6:	dec     _delay_spawn_remaining
;
; if (delay_spawn_remaining == 0)
;
	.dbg	line, "main.c", 1158
	bne     L141E
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 1160
	jsr     _spawn_new_cluster
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 1161
	lda     #$FF
	sta     _delay_lock_remaining
;
; else
;
	.dbg	line, "main.c", 1164
	jmp     L141E
;
; movement();
;
	.dbg	line, "main.c", 1166
L1410:	jsr     _movement
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 1171
L141E:	jsr     _draw_gameplay_sprites
;
; if (attack_style == ATTACK_ON_TIME && attack_queue_ticks_remaining != 0)
;
	.dbg	line, "main.c", 1175
	lda     _attack_style
	cmp     #$01
	bne     L1428
	lda     _attack_queue_ticks_remaining
	ora     _attack_queue_ticks_remaining+1
	beq     L1428
;
; --attack_queue_ticks_remaining;
;
	.dbg	line, "main.c", 1177
	lda     _attack_queue_ticks_remaining
	sec
	sbc     #$01
	sta     _attack_queue_ticks_remaining
	bcs     L1427
	dec     _attack_queue_ticks_remaining+1
;
; if (attack_queue_ticks_remaining == 0)
;
	.dbg	line, "main.c", 1179
L1427:	lda     _attack_queue_ticks_remaining
	ora     _attack_queue_ticks_remaining+1
	bne     L1428
;
; attack_queued = 1;
;
	.dbg	line, "main.c", 1181
	lda     #$01
	sta     _attack_queued
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 1182
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; if (!attract_gameplay_enabled)
;
	.dbg	line, "main.c", 1189
L1428:	lda     _attract_gameplay_enabled
	jne     L2107
;
; local_t = 0;
;
	.dbg	line, "main.c", 1192
	sta     _local_t
	sta     _local_t+1
;
; for (local_iy = 0; local_iy < STRESS_MUSIC_LEVEL * 10; ++local_iy)
;
	.dbg	line, "main.c", 1193
	sta     _local_iy
L20EA:	lda     _local_iy
	cmp     #$46
	bcs     L1434
;
; if (game_board[local_iy + ((BOARD_OOB_END + 1) * 10)] != 0)
;
	.dbg	line, "main.c", 1195
	ldx     #$00
	lda     _local_iy
	clc
	adc     #$28
	bcc     L1440
	inx
L1440:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	beq     L20EB
;
; local_t = 1;
;
	.dbg	line, "main.c", 1198
	ldx     #$00
	lda     #$01
	sta     _local_t
	stx     _local_t+1
;
; if (cur_gameplay_music == MUSIC_GAMEPLAY)
;
	.dbg	line, "main.c", 1200
	lda     _cur_gameplay_music
	cmp     #$01
	bne     L20EB
;
; cur_gameplay_music = MUSIC_STRESS;
;
	.dbg	line, "main.c", 1202
	lda     #$02
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(MUSIC_STRESS);
;
	.dbg	line, "main.c", 1203
	lda     _music_on
	beq     L1434
	lda     #$02
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 1204
	jmp     L1434
;
; for (local_iy = 0; local_iy < STRESS_MUSIC_LEVEL * 10; ++local_iy)
;
	.dbg	line, "main.c", 1193
L20EB:	inc     _local_iy
	jmp     L20EA
;
; if (local_t == 0 && cur_gameplay_music == MUSIC_STRESS)
;
	.dbg	line, "main.c", 1209
L1434:	lda     _local_t
	ora     _local_t+1
	jne     L2107
	lda     _cur_gameplay_music
	cmp     #$02
	jne     L2107
;
; cur_gameplay_music = MUSIC_GAMEPLAY;
;
	.dbg	line, "main.c", 1211
	lda     #$01
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(MUSIC_GAMEPLAY);
;
	.dbg	line, "main.c", 1212
	lda     _music_on
	jeq     L2107
	lda     #$01
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 1241
	jmp     L2107
;
; if (ticks_in_state_large > (60 * 10) || (pad_all_new & (PAD_B | PAD_A | PAD_SELECT | PAD_START)))
;
	.dbg	line, "main.c", 1268
L1459:	lda     _ticks_in_state_large
	cmp     #$59
	lda     _ticks_in_state_large+1
	sbc     #$02
	bcs     L20ED
	lda     _pad_all_new
	and     #$F0
	jeq     L2107
;
; fade_to_black();
;
	.dbg	line, "main.c", 1272
L20ED:	jsr     _fade_to_black
;
; go_to_state(STATE_HIGH_SCORE_TABLE);
;
	.dbg	line, "main.c", 1273
	lda     #$08
;
; break;
;
	.dbg	line, "main.c", 1289
	jmp     L210D
;
; oam_clear();
;
	.dbg	line, "main.c", 1358
L1465:	jsr     _oam_clear
;
; if (IS_PRIMARY_CPU && high_score_entry_placement < 3)
;
	.dbg	line, "main.c", 1359
	lda     _high_score_entry_placement
	cmp     #$03
	jcs     L1467
;
; temp_table = high_scores_vs_initials[attack_style][cur_level_vs_setting][high_score_entry_placement];
;
	.dbg	line, "main.c", 1366
	lda     _attack_style
	jsr     pusha0
	lda     #$24
	jsr     tosmula0
	clc
	adc     #<(_high_scores_vs_initials)
	tay
	txa
	adc     #>(_high_scores_vs_initials)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _cur_level_vs_setting
	jsr     mulax9
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     _high_score_entry_placement
	jsr     mulax3
	jsr     tosaddax
	sta     _temp_table
	stx     _temp_table+1
;
; if (temp_table[cur_initial_index] == '-')
;
	.dbg	line, "main.c", 1368
	ldy     _cur_initial_index
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	cmp     #$2D
	bne     L1471
;
; temp_table[cur_initial_index] = 'A';
;
	.dbg	line, "main.c", 1370
	lda     _temp_table
	ldx     _temp_table+1
	clc
	adc     _cur_initial_index
	bcc     L2063
	inx
L2063:	sta     ptr1
	stx     ptr1+1
	lda     #$41
	ldy     #$00
	sta     (ptr1),y
;
; difficulty_to_leaderboard_pos(cur_level_vs_setting);
;
	.dbg	line, "main.c", 1374
L1471:	lda     _cur_level_vs_setting
	jsr     _difficulty_to_leaderboard_pos
;
; in_id = (ticks_in_state_large % 128 < 64) ? 0 : 2;
;
	.dbg	line, "main.c", 1376
	lda     _ticks_in_state_large
	and     #$7F
	cmp     #$40
	bcs     L20F1
	lda     #$00
	jmp     L20F2
L20F1:	lda     #$02
L20F2:	sta     _in_id
;
; oam_spr((in_x + 0) << 3, (in_y + high_score_entry_placement) << 3, temp_table[0], (cur_initial_index == 0) ? in_id : 2);
;
	.dbg	line, "main.c", 1378
	jsr     decsp3
	lda     _in_x
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     _in_y
	clc
	adc     _high_score_entry_placement
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
	lda     _temp_table+1
	sta     ptr1+1
	lda     _temp_table
	sta     ptr1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _cur_initial_index
	bne     L20F3
	lda     _in_id
	jmp     L20F4
L20F3:	lda     #$02
L20F4:	jsr     _oam_spr
;
; if (cur_initial_index > 0)
;
	.dbg	line, "main.c", 1379
	lda     _cur_initial_index
	beq     L20F7
;
; oam_spr((in_x + 1) << 3, (in_y + high_score_entry_placement) << 3, temp_table[1], (cur_initial_index == 1) ? in_id : 2);
;
	.dbg	line, "main.c", 1381
	jsr     decsp3
	lda     _in_x
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     _in_y
	clc
	adc     _high_score_entry_placement
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
	lda     _temp_table+1
	sta     ptr1+1
	lda     _temp_table
	sta     ptr1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     _cur_initial_index
	cmp     #$01
	bne     L20F5
	lda     _in_id
	jmp     L20F6
L20F5:	lda     #$02
L20F6:	jsr     _oam_spr
;
; if (cur_initial_index > 1)
;
	.dbg	line, "main.c", 1383
L20F7:	lda     _cur_initial_index
	cmp     #$02
	bcc     L149E
;
; oam_spr((in_x + 2) << 3, (in_y + high_score_entry_placement) << 3, temp_table[2], in_id);
;
	.dbg	line, "main.c", 1385
	jsr     decsp3
	lda     _in_x
	clc
	adc     #$02
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     _in_y
	clc
	adc     _high_score_entry_placement
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
	lda     _temp_table+1
	sta     ptr1+1
	lda     _temp_table
	sta     ptr1
	iny
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
	lda     _in_id
	jsr     _oam_spr
;
; if (ticks_in_state_large > AUTO_FORWARD_DELAY)
;
	.dbg	line, "main.c", 1391
L149E:	lda     _ticks_in_state_large
	cmp     #$09
	lda     _ticks_in_state_large+1
	sbc     #$07
	bcc     L20F8
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP);
;
	.dbg	line, "main.c", 1393
	lda     _sfx_on
	beq     L14AC
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; fade_to_black();
;
	.dbg	line, "main.c", 1394
L14AC:	jsr     _fade_to_black
;
; auto_forward_leaderboards = 1;
;
	.dbg	line, "main.c", 1395
	lda     #$01
	sta     _auto_forward_leaderboards
;
; go_to_state(STATE_HIGH_SCORE_TABLE);
;
	.dbg	line, "main.c", 1396
	lda     #$08
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 1397
	jsr     _fade_from_black
;
; if (pad_all_new & PAD_RIGHT)
;
	.dbg	line, "main.c", 1400
L20F8:	lda     _pad_all_new
	and     #$01
	beq     L20F9
;
; ticks_in_state_large = 0;
;
	.dbg	line, "main.c", 1403
	lda     #$00
	sta     _ticks_in_state_large
	sta     _ticks_in_state_large+1
;
; ++temp_table[cur_initial_index];
;
	.dbg	line, "main.c", 1406
	lda     _temp_table
	ldx     _temp_table+1
	clc
	adc     _cur_initial_index
	bcc     L2067
	inx
L2067:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (temp_table[cur_initial_index] > 'Z')
;
	.dbg	line, "main.c", 1409
	lda     _temp_table
	ldx     _temp_table+1
	ldy     _cur_initial_index
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	cmp     #$5B
	jcc     L2107
;
; temp_table[cur_initial_index] = last_initials[cur_initial_index];
;
	.dbg	line, "main.c", 1411
	lda     _temp_table
	ldx     _temp_table+1
	clc
	adc     _cur_initial_index
	bcc     L2069
	inx
L2069:	sta     ptr1
	stx     ptr1+1
	ldy     _cur_initial_index
	lda     _last_initials,y
	ldy     #$00
	sta     (ptr1),y
;
; else if (pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 1414
	jmp     L2107
L20F9:	lda     _pad_all_new
	and     #$02
	beq     L20FA
;
; ticks_in_state_large = 0;
;
	.dbg	line, "main.c", 1416
	lda     #$00
	sta     _ticks_in_state_large
	sta     _ticks_in_state_large+1
;
; --temp_table[cur_initial_index];
;
	.dbg	line, "main.c", 1417
	lda     _temp_table
	ldx     _temp_table+1
	clc
	adc     _cur_initial_index
	bcc     L206A
	inx
L206A:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (temp_table[cur_initial_index] < 'A')
;
	.dbg	line, "main.c", 1419
	lda     _temp_table
	ldx     _temp_table+1
	ldy     _cur_initial_index
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	cmp     #$41
	jcs     L2107
;
; temp_table[cur_initial_index] = 'Z';
;
	.dbg	line, "main.c", 1421
	lda     _temp_table
	ldx     _temp_table+1
	clc
	adc     _cur_initial_index
	bcc     L206C
	inx
L206C:	sta     ptr1
	stx     ptr1+1
	lda     #$5A
	ldy     #$00
	sta     (ptr1),y
;
; else if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1424
	jmp     L2107
L20FA:	lda     _pad_all_new
	and     #$80
	beq     L20FB
;
; ticks_in_state_large = 0;
;
	.dbg	line, "main.c", 1426
	lda     #$00
	sta     _ticks_in_state_large
	sta     _ticks_in_state_large+1
;
; ++cur_initial_index;
;
	.dbg	line, "main.c", 1427
	inc     _cur_initial_index
;
; if (cur_initial_index >= 3)
;
	.dbg	line, "main.c", 1429
	lda     _cur_initial_index
	cmp     #$03
	jcc     L2107
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP);
;
	.dbg	line, "main.c", 1431
	lda     _sfx_on
	beq     L14DB
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; fade_to_black();
;
	.dbg	line, "main.c", 1432
L14DB:	jsr     _fade_to_black
;
; auto_forward_leaderboards = 1;
;
	.dbg	line, "main.c", 1433
	lda     #$01
	sta     _auto_forward_leaderboards
;
; go_to_state(STATE_HIGH_SCORE_TABLE);
;
	.dbg	line, "main.c", 1434
	lda     #$08
;
; else if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1438
	jmp     L210D
L20FB:	lda     _pad_all_new
	and     #$40
	jeq     L2107
;
; if (cur_initial_index > 0)
;
	.dbg	line, "main.c", 1440
	lda     _cur_initial_index
	jeq     L2107
;
; ticks_in_state_large = 0;
;
	.dbg	line, "main.c", 1442
	lda     #$00
	sta     _ticks_in_state_large
	sta     _ticks_in_state_large+1
;
; temp_table[cur_initial_index] = '-';
;
	.dbg	line, "main.c", 1443
	lda     _temp_table
	ldx     _temp_table+1
	clc
	adc     _cur_initial_index
	bcc     L206D
	inx
L206D:	sta     ptr1
	stx     ptr1+1
	lda     #$2D
	ldy     #$00
	sta     (ptr1),y
;
; --cur_initial_index;
;
	.dbg	line, "main.c", 1444
	dec     _cur_initial_index
;
; else
;
	.dbg	line, "main.c", 1452
	jmp     L2107
;
; oam_spr(80 + tentacle_offsets[(tick_count / 16) % 4], 24, 14, 0);
;
	.dbg	line, "main.c", 1455
L1467:	jsr     decsp3
	lda     _tick_count
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$03
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_tentacle_offsets)
	sta     ptr1+1
	ldy     #<(_tentacle_offsets)
	lda     (ptr1),y
	clc
	adc     #$50
	ldy     #$02
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(160 - tentacle_offsets[(tick_count / 16) % 4], 24, 14, 0 | OAM_FLIP_H);
;
	.dbg	line, "main.c", 1456
	jsr     decsp3
	lda     #$A0
	jsr     pusha0
	lda     _tick_count
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$03
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_tentacle_offsets)
	sta     ptr1+1
	ldy     #<(_tentacle_offsets)
	lda     (ptr1),y
	jsr     tossuba0
	ldy     #$02
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     #$40
	jsr     _oam_spr
;
; if (auto_forward_leaderboards && ticks_in_state_large > (60 * 10))
;
	.dbg	line, "main.c", 1458
	lda     _auto_forward_leaderboards
	beq     L2100
	lda     _ticks_in_state_large
	cmp     #$59
	lda     _ticks_in_state_large+1
	sbc     #$02
	bcc     L2100
;
; if (attack_style > 0)
;
	.dbg	line, "main.c", 1460
	lda     _attack_style
	beq     L20FD
;
; --attack_style;
;
	.dbg	line, "main.c", 1462
	dec     _attack_style
;
; else
;
	.dbg	line, "main.c", 1464
	jmp     L20FE
;
; attack_style = ATTACK_NUM - 1;
;
	.dbg	line, "main.c", 1466
L20FD:	lda     #$02
	sta     _attack_style
;
; --auto_forward_leaderboards;
;
	.dbg	line, "main.c", 1469
L20FE:	dec     _auto_forward_leaderboards
;
; else
;
	.dbg	line, "main.c", 1477
	beq     L2112
;
; ticks_in_state_large = 0;
;
	.dbg	line, "main.c", 1479
	lda     #$00
	sta     _ticks_in_state_large
	sta     _ticks_in_state_large+1
;
; fade_to_black();
;
	.dbg	line, "main.c", 1480
	jsr     _fade_to_black
;
; go_to_state(STATE_HIGH_SCORE_TABLE);
;
	.dbg	line, "main.c", 1481
	lda     #$08
;
; else if (pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 1485
	jmp     L210D
L2100:	lda     _pad_all_new
	and     #$02
	beq     L2103
;
; if (attack_style > 0)
;
	.dbg	line, "main.c", 1487
	lda     _attack_style
	beq     L2101
;
; --attack_style;
;
	.dbg	line, "main.c", 1489
	dec     _attack_style
;
; else
;
	.dbg	line, "main.c", 1491
	jmp     L2102
;
; attack_style = ATTACK_NUM - 1;
;
	.dbg	line, "main.c", 1493
L2101:	lda     #$02
	sta     _attack_style
;
; auto_forward_leaderboards = 1;
;
	.dbg	line, "main.c", 1496
L2102:	lda     #$01
	sta     _auto_forward_leaderboards
;
; fade_to_black();
;
	.dbg	line, "main.c", 1497
	jsr     _fade_to_black
;
; go_to_state(STATE_HIGH_SCORE_TABLE);
;
	.dbg	line, "main.c", 1498
	lda     #$08
;
; else if (pad_all_new & PAD_RIGHT)
;
	.dbg	line, "main.c", 1501
	jmp     L210D
L2103:	lda     _pad_all_new
	and     #$01
	beq     L2106
;
; if (attack_style < ATTACK_NUM - 1)
;
	.dbg	line, "main.c", 1503
	lda     _attack_style
	cmp     #$02
	bcs     L2104
;
; ++attack_style;
;
	.dbg	line, "main.c", 1505
	inc     _attack_style
;
; else
;
	.dbg	line, "main.c", 1507
	jmp     L2105
;
; attack_style = 0;
;
	.dbg	line, "main.c", 1509
L2104:	lda     #$00
	sta     _attack_style
;
; auto_forward_leaderboards = 1;
;
	.dbg	line, "main.c", 1512
L2105:	lda     #$01
	sta     _auto_forward_leaderboards
;
; fade_to_black();
;
	.dbg	line, "main.c", 1513
	jsr     _fade_to_black
;
; go_to_state(STATE_HIGH_SCORE_TABLE);
;
	.dbg	line, "main.c", 1514
	lda     #$08
;
; else if (pad_all_new & (PAD_A | PAD_B | PAD_SELECT | PAD_START))
;
	.dbg	line, "main.c", 1522
	jmp     L210D
L2106:	lda     _pad_all_new
	and     #$F0
	beq     L2107
;
; fade_to_black();
;
	.dbg	line, "main.c", 1524
L2112:	jsr     _fade_to_black
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 1525
	lda     #$02
L210D:	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 1526
L207F:	jsr     _fade_from_black
;
; if (screen_shake_remaining > 0)
;
	.dbg	line, "main.c", 1536
L2107:	lda     _screen_shake_remaining
	beq     L2109
;
; --screen_shake_remaining;
;
	.dbg	line, "main.c", 1538
	dec     _screen_shake_remaining
;
; scroll((rand() % 2), scroll_y - (rand() % 2));
;
	.dbg	line, "main.c", 1539
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	jsr     pushax
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	jsr     tossubax
	jsr     _scroll
;
; else
;
	.dbg	line, "main.c", 1541
	jmp     L1172
;
; scroll(0, scroll_y); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 1543
L2109:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; while (1)
;
	.dbg	line, "main.c", 446
	jmp     L1172
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_block_occupied (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_block_occupied: near

	.dbg	func, "is_block_occupied", "00", extern, "_is_block_occupied"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2216
	jsr     pusha
;
; if (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD)
;
	.dbg	line, "main.c", 2218
	ldy     #$00
	lda     (sp),y
	cmp     #$18
	bcs     L2120
	iny
	lda     (sp),y
	cmp     #$0A
	bcc     L17E5
;
; return 1;
;
	.dbg	line, "main.c", 2221
L2120:	ldx     #$00
	lda     #$01
	jmp     incsp2
;
; if (game_board[TILE_TO_BOARD_INDEX(x, y)]) // != 5 && game_board[TILE_TO_BOARD_INDEX(x,y)] != 0)
;
	.dbg	line, "main.c", 2225
L17E5:	dey
	lda     (sp),y
	tay
	lda     _board_lookup_y,y
	sta     ptr1
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L211F
	inx
L211F:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	ldx     #$00
	lda     (ptr1),y
	beq     L17E4
;
; return 1;
;
	.dbg	line, "main.c", 2227
	lda     #$01
	jmp     incsp2
;
; }
;
	.dbg	line, "main.c", 2230
L17E4:	jmp     incsp2
	.dbg	line

.endproc

