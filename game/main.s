;
; File generated by cc65 v 2.18 - Git dc4142e
;
	.fopt		compiler,"cc65 v 2.18 - Git dc4142e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "main.c", 106781, 1613448915
	.dbg		file, "LIB/neslib.h", 9361, 1608948989
	.dbg		file, "LIB/nesdoug.h", 6862, 1608948989
	.dbg		file, "BG/game_area.h", 4059, 1609910372
	.dbg		file, "BG/title_screen.h", 2757, 1613366409
	.dbg		file, "BG/boot_screen.h", 1422, 1610339359
	.dbg		file, "BG/options_screen.h", 2359, 1608948989
	.dbg		file, "BG/sound_screen.h", 1418, 1608948989
	.dbg		file, "BG/ty_screen.h", 1872, 1608948989
	.dbg		file, "../include/stdlib.h", 6147, 1608948990
	.dbg		file, "main.h", 27324, 1613387665
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_spr", "00", extern, "_oam_spr"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "oam_set", "00", extern, "_oam_set"
	.dbg		sym, "music_play", "00", extern, "_music_play"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "music_pause", "00", extern, "_music_pause"
	.dbg		sym, "sfx_play", "00", extern, "_sfx_play"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "memfill", "00", extern, "_memfill"
	.dbg		sym, "delay", "00", extern, "_delay"
	.dbg		sym, "set_vram_buffer", "00", extern, "_set_vram_buffer"
	.dbg		sym, "one_vram_buffer", "00", extern, "_one_vram_buffer"
	.dbg		sym, "multi_vram_buffer_horz", "00", extern, "_multi_vram_buffer_horz"
	.dbg		sym, "multi_vram_buffer_vert", "00", extern, "_multi_vram_buffer_vert"
	.dbg		sym, "clear_vram_buffer", "00", extern, "_clear_vram_buffer"
	.dbg		sym, "get_pad_new", "00", extern, "_get_pad_new"
	.dbg		sym, "get_ppu_addr", "00", extern, "_get_ppu_addr"
	.dbg		sym, "rand", "00", extern, "_rand"
	.dbg		sym, "srand", "00", extern, "_srand"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_set
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_memfill
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_multi_vram_buffer_vert
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_ppu_addr
	.export		_game_area
	.export		_title_screen
	.export		_boot_screen
	.export		_options_screen
	.export		_sound_screen
	.export		_ty_screen
	.import		_rand
	.import		_srand
	.export		_tick_count
	.export		_tick_count_large
	.export		_ticks_in_state_large
	.export		_hit_reaction_remaining
	.export		_attack_queue_ticks_remaining
	.export		_attack_delay
	.export		_pad_all
	.export		_pad_all_new
	.export		_pad1
	.export		_pad1_new
	.export		_pad2
	.export		_pad2_new
	.export		_scroll_y
	.export		_cur_option
	.export		_attack_style
	.export		_high_scores
	.export		_music_on
	.export		_sfx_on
	.export		_block_style
	.export		_starting_levels
	.export		_saved_starting_level
	.export		_hard_drops_on
	.export		_hard_drop_hold_remaining
	.export		_hard_drop_tap_required
	.export		_state
	.export		_konami_code
	.export		_cur_konami_index
	.export		_cur_block
	.export		_fall_rate
	.export		_cur_level
	.export		_def_line
	.export		_def_square
	.export		_def_L_rev
	.export		_def_L
	.export		_def_S
	.export		_def_Z
	.export		_def_T
	.export		_cluster_defs_classic
	.export		_bag
	.export		_bag_index
	.export		_randomize_bag
	.export		_swap
	.export		_cur_rot
	.export		_srs_rotate_lookup
	.export		_cur_cluster
	.export		_next_cluster
	.export		_held_cluster_id
	.export		_held_cluster_rot
	.export		_held_cluster_def
	.export		_staging_cluster_id
	.export		_staging_cluster_rot
	.export		_empty_row_hold
	.export		_empty_row_hold_sky
	.export		_can_hold_cluster
	.export		_hold_cluster
	.export		_attack_row_status
	.export		_cluster_sprites
	.export		_cluster_offsets
	.export		_find_ghost_delta_y
	.export		_horz_button_delay
	.export		_button_delay
	.export		_require_new_down_button
	.export		_fall_frame_counter
	.export		_lines_cleared_one
	.export		_lines_cleared_ten
	.export		_lines_cleared_hundred
	.export		_cur_score
	.export		_last_lines
	.export		_combo_count
	.export		_cur_nt
	.export		_off_nt
	.export		_hit
	.export		_temp_fall_frame_counter
	.export		_old_x
	.export		_id
	.export		_min_y
	.export		_max_y
	.export		_in_x
	.export		_in_y
	.export		_in_id
	.export		_local_start_x
	.export		_local_start_y
	.export		_local_ix
	.export		_local_iy
	.export		_local_t
	.export		_local_bit
	.export		_local_row_status
	.export		_OOB_TOP
	.export		_test_song
	.export		_test_song_active
	.export		_test_sound
	.export		_cur_gameplay_music
	.export		_select_gameplay_music
	.export		_attack_queued
	.export		_tentacle_offsets
	.export		_garbage_types
	.export		_cur_garbage_type
	.export		_delay_lock_remaining
	.export		_delay_lock_skip
	.export		_delay_spawn_remaining
	.export		_spawn_queued
	.export		_row_to_clear
	.export		_kill_row_cur
	.export		_kill_row_queued
	.export		_start_delay_remaining
	.export		_board_lookup_y
	.export		_mask
	.export		_address
	.export		_time_of_day
	.export		_temp_pal
	.export		_lines_cleared_y
	.export		_line_score_mod
	.export		_game_board
	.export		_game_board_temp
	.export		_empty_row
	.export		_full_row
	.export		_full_col
	.export		_option_empty
	.export		_option_icon
	.export		_copy_board_data
	.export		_palette_bg
	.export		_palette_sp
	.export		_palette_bg_options
	.export		_palette_bg_list
	.export		_fall_rates_per_level
	.export		_attack_style_strings
	.export		_off_on_string
	.export		_block_style_strings
	.export		_hard_drop_types
	.export		_screen_shake_remaining
	.export		_text_push_start
	.export		_clear_push_start
	.export		_metasprite_tentacle_title
	.export		_draw_menu_sprites
	.export		_draw_gameplay_sprites
	.export		_movement
	.export		_set_block
	.export		_set_block_nt
	.export		_put_cur_cluster
	.export		_is_block_occupied
	.export		_is_perfect_clear
	.export		_is_cluster_colliding
	.export		_morton_compact_one_by_one
	.export		_spawn_new_cluster
	.export		_rotate_cur_cluster
	.export		_rotate_srs
	.export		_check_tspin
	.export		_is_tspin
	.export		_is_last_rotate
	.export		_go_to_state
	.export		_inc_lines_cleared
	.export		_display_lines_cleared
	.export		_display_score
	.export		_display_combo
	.export		_display_highscore
	.export		_display_level
	.export		_clear_rows_in_data
	.export		_reveal_empty_rows_to_nt
	.export		_try_collapse_empty_row_data
	.export		_copy_board_to_nt
	.export		_add_block_at_bottom
	.export		_add_row_at_bottom
	.export		_reset_gameplay_area
	.export		_display_song
	.export		_display_sound
	.export		_display_options
	.export		_fade_to_black
	.export		_fade_from_black
	.export		_difficulty_to_leaderboard_pos
	.export		_main

.segment	"DATA"

_high_scores:
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
_state:
	.byte	$00
_cur_block:
	.byte	$00
	.byte	$00
_fall_rate:
	.byte	$30
_cur_level:
	.byte	$00
_cluster_defs_classic:
	.addr	_def_Z
	.addr	_def_S
	.addr	_def_line
	.addr	_def_square
	.addr	_def_T
	.addr	_def_L
	.addr	_def_L_rev
_bag:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
_bag_index:
	.byte	$00
_held_cluster_id:
	.byte	$FF
_held_cluster_rot:
	.byte	$00
_staging_cluster_id:
	.byte	$FF
_staging_cluster_rot:
	.byte	$00
_select_gameplay_music:
	.byte	$01

.segment	"RODATA"

_game_area:
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$BF
	.byte	$14
	.byte	$01
	.byte	$12
	.byte	$09
	.byte	$07
	.byte	$01
	.byte	$11
	.byte	$BF
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$8B
	.byte	$08
	.byte	$CF
	.byte	$14
	.byte	$AE
	.byte	$AF
	.byte	$B7
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$B8
	.byte	$AF
	.byte	$AE
	.byte	$11
	.byte	$CF
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$4C
	.byte	$49
	.byte	$4E
	.byte	$45
	.byte	$53
	.byte	$08
	.byte	$97
	.byte	$98
	.byte	$09
	.byte	$02
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$09
	.byte	$05
	.byte	$BF
	.byte	$BE
	.byte	$A8
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$48
	.byte	$4F
	.byte	$4C
	.byte	$44
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$30
	.byte	$09
	.byte	$02
	.byte	$08
	.byte	$A7
	.byte	$98
	.byte	$09
	.byte	$02
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$09
	.byte	$05
	.byte	$CF
	.byte	$CE
	.byte	$A8
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$12
	.byte	$C7
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$C8
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$53
	.byte	$43
	.byte	$4F
	.byte	$52
	.byte	$45
	.byte	$08
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$12
	.byte	$01
	.byte	$12
	.byte	$11
	.byte	$12
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$30
	.byte	$09
	.byte	$04
	.byte	$08
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$45
	.byte	$56
	.byte	$45
	.byte	$4C
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$12
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$01
	.byte	$12
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$78
	.byte	$79
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$30
	.byte	$30
	.byte	$08
	.byte	$01
	.byte	$12
	.byte	$14
	.byte	$13
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$13
	.byte	$11
	.byte	$03
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$63
	.byte	$64
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$8B
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$79
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$01
	.byte	$04
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$73
	.byte	$74
	.byte	$13
	.byte	$14
	.byte	$1B
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$88
	.byte	$89
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$14
	.byte	$85
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$61
	.byte	$81
	.byte	$94
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$63
	.byte	$64
	.byte	$14
	.byte	$85
	.byte	$01
	.byte	$14
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$86
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$13
	.byte	$14
	.byte	$01
	.byte	$71
	.byte	$91
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$92
	.byte	$73
	.byte	$74
	.byte	$13
	.byte	$00
	.byte	$12
	.byte	$13
	.byte	$86
	.byte	$87
	.byte	$87
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$03
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$01
	.byte	$61
	.byte	$62
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$06
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$01
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$82
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$83
	.byte	$84
	.byte	$03
	.byte	$81
	.byte	$94
	.byte	$81
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$61
	.byte	$62
	.byte	$93
	.byte	$94
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0E
	.byte	$1D
	.byte	$0E
	.byte	$0D
	.byte	$87
	.byte	$A4
	.byte	$1F
	.byte	$72
	.byte	$90
	.byte	$13
	.byte	$91
	.byte	$81
	.byte	$91
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$82
	.byte	$86
	.byte	$0F
	.byte	$0F
	.byte	$1F
	.byte	$86
	.byte	$1E
	.byte	$86
	.byte	$87
	.byte	$0F
	.byte	$A4
	.byte	$0F
	.byte	$1F
	.byte	$72
	.byte	$63
	.byte	$61
	.byte	$62
	.byte	$91
	.byte	$00
	.byte	$09
	.byte	$0B
	.byte	$94
	.byte	$84
	.byte	$00
	.byte	$63
	.byte	$64
	.byte	$1F
	.byte	$0F
	.byte	$A4
	.byte	$1D
	.byte	$00
	.byte	$0F
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$72
	.byte	$73
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$84
	.byte	$94
	.byte	$64
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$86
	.byte	$0F
	.byte	$1F
	.byte	$61
	.byte	$62
	.byte	$81
	.byte	$84
	.byte	$90
	.byte	$00
	.byte	$81
	.byte	$94
	.byte	$72
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$94
	.byte	$73
	.byte	$74
	.byte	$83
	.byte	$84
	.byte	$63
	.byte	$64
	.byte	$63
	.byte	$64
	.byte	$1F
	.byte	$00
	.byte	$62
	.byte	$84
	.byte	$91
	.byte	$94
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$83
	.byte	$84
	.byte	$90
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$82
	.byte	$92
	.byte	$93
	.byte	$93
	.byte	$94
	.byte	$73
	.byte	$74
	.byte	$92
	.byte	$93
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$94
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$2A
	.byte	$2B
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$83
	.byte	$2A
	.byte	$2B
	.byte	$00
	.byte	$82
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$92
	.byte	$93
	.byte	$00
	.byte	$72
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$66
	.byte	$67
	.byte	$B9
	.byte	$10
	.byte	$C9
	.byte	$B9
	.byte	$00
	.byte	$90
	.byte	$29
	.byte	$9C
	.byte	$9D
	.byte	$29
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$29
	.byte	$95
	.byte	$96
	.byte	$29
	.byte	$00
	.byte	$82
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$05
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$05
	.byte	$00
	.byte	$61
	.byte	$BE
	.byte	$AC
	.byte	$AD
	.byte	$BE
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$BE
	.byte	$A5
	.byte	$A6
	.byte	$BE
	.byte	$64
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$75
	.byte	$76
	.byte	$05
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FF
	.byte	$72
	.byte	$71
	.byte	$CE
	.byte	$BC
	.byte	$BD
	.byte	$CE
	.byte	$14
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$03
	.byte	$03
	.byte	$14
	.byte	$CE
	.byte	$B5
	.byte	$B6
	.byte	$CE
	.byte	$74
	.byte	$82
	.byte	$6B
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$5F
	.byte	$6A
	.byte	$00
	.byte	$81
	.byte	$12
	.byte	$CC
	.byte	$CD
	.byte	$12
	.byte	$11
	.byte	$12
	.byte	$AF
	.byte	$12
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$AF
	.byte	$03
	.byte	$14
	.byte	$12
	.byte	$C5
	.byte	$C6
	.byte	$12
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$6B
	.byte	$05
	.byte	$09
	.byte	$07
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$05
	.byte	$09
	.byte	$06
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$04
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$04
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$05
	.byte	$75
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$15
	.byte	$05
	.byte	$15
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$55
	.byte	$05
	.byte	$05
	.byte	$45
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$80
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$59
	.byte	$AA
	.byte	$56
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$FC
	.byte	$77
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$54
	.byte	$55
	.byte	$00
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$09
	.byte	$00
_title_screen:
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$25
	.byte	$DD
	.byte	$DE
	.byte	$09
	.byte	$12
	.byte	$3E
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$EF
	.byte	$FE
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E9
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$B3
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D5
	.byte	$D6
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$3A
	.byte	$DF
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$DA
	.byte	$C4
	.byte	$E4
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$B0
	.byte	$EA
	.byte	$C4
	.byte	$E4
	.byte	$E5
	.byte	$E0
	.byte	$E4
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$E7
	.byte	$E5
	.byte	$E1
	.byte	$E6
	.byte	$E7
	.byte	$05
	.byte	$EE
	.byte	$D9
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E8
	.byte	$E6
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$E9
	.byte	$B1
	.byte	$B2
	.byte	$05
	.byte	$E5
	.byte	$D0
	.byte	$B3
	.byte	$C4
	.byte	$D4
	.byte	$05
	.byte	$05
	.byte	$D4
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$E4
	.byte	$D5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$EE
	.byte	$05
	.byte	$B0
	.byte	$08
	.byte	$D2
	.byte	$D3
	.byte	$E4
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E5
	.byte	$E8
	.byte	$E6
	.byte	$E5
	.byte	$E8
	.byte	$E9
	.byte	$E5
	.byte	$E8
	.byte	$E8
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E5
	.byte	$E6
	.byte	$E5
	.byte	$E6
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$3D
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$ED
	.byte	$DB
	.byte	$50
	.byte	$55
	.byte	$53
	.byte	$48
	.byte	$08
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$DC
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$3C
	.byte	$08
	.byte	$09
	.byte	$28
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$95
	.byte	$96
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$9C
	.byte	$9D
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$A5
	.byte	$A6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$AC
	.byte	$AD
	.byte	$08
	.byte	$09
	.byte	$17
	.byte	$B5
	.byte	$B6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$BC
	.byte	$BD
	.byte	$08
	.byte	$09
	.byte	$17
	.byte	$C5
	.byte	$C6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$CC
	.byte	$CD
	.byte	$08
	.byte	$09
	.byte	$16
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$08
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0F
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$08
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$0E
	.byte	$02
	.byte	$27
	.byte	$28
	.byte	$14
	.byte	$08
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$15
	.byte	$03
	.byte	$25
	.byte	$26
	.byte	$14
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$15
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$A8
	.byte	$98
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$13
	.byte	$8B
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$A8
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$15
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$6E
	.byte	$6F
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$14
	.byte	$A8
	.byte	$99
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$A7
	.byte	$98
	.byte	$01
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$7E
	.byte	$7F
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$14
	.byte	$A8
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$01
	.byte	$14
	.byte	$01
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$8E
	.byte	$8F
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$14
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$BF
	.byte	$14
	.byte	$01
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$9E
	.byte	$9F
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$14
	.byte	$11
	.byte	$BF
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$CF
	.byte	$14
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$07
	.byte	$14
	.byte	$11
	.byte	$CF
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$20
	.byte	$20
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$01
	.byte	$14
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$07
	.byte	$14
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$C0
	.byte	$F0
	.byte	$09
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$09
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$09
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$09
	.byte	$13
	.byte	$55
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$40
	.byte	$55
	.byte	$66
	.byte	$51
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
_boot_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A8
	.byte	$8E
	.byte	$00
	.byte	$43
	.byte	$52
	.byte	$45
	.byte	$41
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$00
	.byte	$42
	.byte	$59
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$01
	.byte	$6C
	.byte	$44
	.byte	$45
	.byte	$53
	.byte	$49
	.byte	$47
	.byte	$4E
	.byte	$2C
	.byte	$43
	.byte	$4F
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$41
	.byte	$54
	.byte	$54
	.byte	$00
	.byte	$48
	.byte	$55
	.byte	$47
	.byte	$48
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$47
	.byte	$41
	.byte	$4D
	.byte	$45
	.byte	$00
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$41
	.byte	$4C
	.byte	$4C
	.byte	$45
	.byte	$52
	.byte	$00
	.byte	$5A
	.byte	$4F
	.byte	$4C
	.byte	$54
	.byte	$41
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$2C
	.byte	$53
	.byte	$46
	.byte	$58
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$55
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$33
	.byte	$42
	.byte	$4F
	.byte	$58
	.byte	$00
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$41
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$50
	.byte	$41
	.byte	$59
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$53
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$49
	.byte	$53
	.byte	$49
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$2E
	.byte	$00
	.byte	$4D
	.byte	$41
	.byte	$47
	.byte	$52
	.byte	$49
	.byte	$00
	.byte	$01
	.byte	$6E
	.byte	$8E
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$44
	.byte	$49
	.byte	$43
	.byte	$41
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$00
	.byte	$54
	.byte	$4F
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$01
	.byte	$30
	.byte	$41
	.byte	$42
	.byte	$49
	.byte	$47
	.byte	$41
	.byte	$49
	.byte	$4C
	.byte	$2C
	.byte	$45
	.byte	$4C
	.byte	$49
	.byte	$41
	.byte	$4E
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$45
	.byte	$4C
	.byte	$53
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$35
	.byte	$56
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$49
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$2E
	.byte	$30
	.byte	$00
	.byte	$53
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$31
	.byte	$2E
	.byte	$30
	.byte	$31
	.byte	$2E
	.byte	$31
	.byte	$31
	.byte	$00
	.byte	$01
	.byte	$4D
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$8A
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$A8
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$20
	.byte	$88
	.byte	$AA
	.byte	$5A
	.byte	$5A
	.byte	$55
	.byte	$55
	.byte	$91
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$A0
	.byte	$50
	.byte	$54
	.byte	$55
	.byte	$A5
	.byte	$AA
	.byte	$AA
	.byte	$A2
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$01
	.byte	$00
_options_screen:
	.byte	$01
	.byte	$08
	.byte	$01
	.byte	$25
	.byte	$DD
	.byte	$DE
	.byte	$01
	.byte	$12
	.byte	$3E
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$10
	.byte	$EF
	.byte	$FE
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E9
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$B3
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D5
	.byte	$D6
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$3A
	.byte	$DF
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$DA
	.byte	$C4
	.byte	$E4
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$B0
	.byte	$EA
	.byte	$C4
	.byte	$E4
	.byte	$E5
	.byte	$E0
	.byte	$E4
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$E7
	.byte	$E5
	.byte	$E1
	.byte	$E6
	.byte	$E7
	.byte	$05
	.byte	$EE
	.byte	$D9
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E8
	.byte	$E6
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$E9
	.byte	$B1
	.byte	$B2
	.byte	$05
	.byte	$E5
	.byte	$D0
	.byte	$B3
	.byte	$C4
	.byte	$D4
	.byte	$05
	.byte	$05
	.byte	$D4
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$E4
	.byte	$D5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$EE
	.byte	$05
	.byte	$B0
	.byte	$08
	.byte	$D2
	.byte	$D3
	.byte	$E4
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$E5
	.byte	$E8
	.byte	$E6
	.byte	$E5
	.byte	$E8
	.byte	$E9
	.byte	$E5
	.byte	$E8
	.byte	$E8
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E5
	.byte	$E6
	.byte	$E5
	.byte	$E6
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$14
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$3D
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$ED
	.byte	$DB
	.byte	$50
	.byte	$55
	.byte	$53
	.byte	$48
	.byte	$20
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$DC
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$3C
	.byte	$08
	.byte	$01
	.byte	$28
	.byte	$09
	.byte	$0A
	.byte	$08
	.byte	$01
	.byte	$13
	.byte	$0B
	.byte	$0C
	.byte	$08
	.byte	$01
	.byte	$06
	.byte	$15
	.byte	$19
	.byte	$08
	.byte	$01
	.byte	$15
	.byte	$1C
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$25
	.byte	$26
	.byte	$08
	.byte	$4C
	.byte	$45
	.byte	$56
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$32
	.byte	$00
	.byte	$4D
	.byte	$4F
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$4C
	.byte	$41
	.byte	$53
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$08
	.byte	$01
	.byte	$23
	.byte	$18
	.byte	$08
	.byte	$01
	.byte	$0C
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$4F
	.byte	$4E
	.byte	$08
	.byte	$01
	.byte	$36
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$4E
	.byte	$08
	.byte	$01
	.byte	$2B
	.byte	$15
	.byte	$08
	.byte	$01
	.byte	$03
	.byte	$69
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$2E
	.byte	$44
	.byte	$52
	.byte	$4F
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$4E
	.byte	$08
	.byte	$01
	.byte	$07
	.byte	$6D
	.byte	$08
	.byte	$01
	.byte	$07
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$01
	.byte	$10
	.byte	$7C
	.byte	$7D
	.byte	$08
	.byte	$01
	.byte	$0C
	.byte	$20
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$01
	.byte	$0D
	.byte	$48
	.byte	$49
	.byte	$2D
	.byte	$53
	.byte	$43
	.byte	$4F
	.byte	$52
	.byte	$45
	.byte	$08
	.byte	$08
	.byte	$30
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$01
	.byte	$0F
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$C0
	.byte	$F0
	.byte	$01
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$00
_sound_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$67
	.byte	$9C
	.byte	$9D
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$95
	.byte	$96
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$AC
	.byte	$AD
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$BC
	.byte	$BD
	.byte	$8E
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$54
	.byte	$45
	.byte	$53
	.byte	$54
	.byte	$8F
	.byte	$B5
	.byte	$B6
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$CC
	.byte	$CD
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$C5
	.byte	$C6
	.byte	$00
	.byte	$01
	.byte	$89
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$00
	.byte	$54
	.byte	$52
	.byte	$41
	.byte	$43
	.byte	$4B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$46
	.byte	$58
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$30
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$30
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$50
	.byte	$4C
	.byte	$41
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$50
	.byte	$4C
	.byte	$41
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$44
	.byte	$4F
	.byte	$57
	.byte	$4E
	.byte	$00
	.byte	$4E
	.byte	$45
	.byte	$58
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$52
	.byte	$49
	.byte	$47
	.byte	$48
	.byte	$54
	.byte	$00
	.byte	$4E
	.byte	$45
	.byte	$58
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4C
	.byte	$45
	.byte	$46
	.byte	$54
	.byte	$00
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$86
	.byte	$2D
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$53
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$45
	.byte	$4C
	.byte	$45
	.byte	$43
	.byte	$54
	.byte	$00
	.byte	$54
	.byte	$4F
	.byte	$00
	.byte	$51
	.byte	$55
	.byte	$49
	.byte	$54
	.byte	$2D
	.byte	$00
	.byte	$01
	.byte	$84
	.byte	$AA
	.byte	$01
	.byte	$18
	.byte	$5A
	.byte	$AA
	.byte	$01
	.byte	$03
	.byte	$5A
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$AA
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$AA
	.byte	$01
	.byte	$11
	.byte	$0A
	.byte	$01
	.byte	$06
	.byte	$0A
	.byte	$01
	.byte	$00
_ty_screen:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$46
	.byte	$8E
	.byte	$00
	.byte	$53
	.byte	$50
	.byte	$45
	.byte	$43
	.byte	$49
	.byte	$41
	.byte	$4C
	.byte	$00
	.byte	$54
	.byte	$48
	.byte	$41
	.byte	$4E
	.byte	$4B
	.byte	$53
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$38
	.byte	$30
	.byte	$31
	.byte	$00
	.byte	$50
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$4A
	.byte	$45
	.byte	$4B
	.byte	$55
	.byte	$54
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$28
	.byte	$41
	.byte	$47
	.byte	$45
	.byte	$4E
	.byte	$54
	.byte	$42
	.byte	$41
	.byte	$53
	.byte	$45
	.byte	$59
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$4C
	.byte	$49
	.byte	$44
	.byte	$4E
	.byte	$41
	.byte	$52
	.byte	$49
	.byte	$51
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$42
	.byte	$45
	.byte	$4E
	.byte	$00
	.byte	$4C
	.byte	$41
	.byte	$52
	.byte	$53
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$4D
	.byte	$2D
	.byte	$54
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$42
	.byte	$45
	.byte	$4E
	.byte	$4A
	.byte	$59
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$4D
	.byte	$45
	.byte	$4D
	.byte	$42
	.byte	$4C
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$42
	.byte	$52
	.byte	$4F
	.byte	$4B
	.byte	$45
	.byte	$00
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$44
	.byte	$49
	.byte	$4F
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$55
	.byte	$55
	.byte	$4E
	.byte	$41
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$2B
	.byte	$43
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$48
	.byte	$52
	.byte	$49
	.byte	$53
	.byte	$43
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$4E
	.byte	$45
	.byte	$53
	.byte	$2D
	.byte	$44
	.byte	$4F
	.byte	$55
	.byte	$47
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$55
	.byte	$00
	.byte	$41
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$4B
	.byte	$48
	.byte	$49
	.byte	$4E
	.byte	$00
	.byte	$50
	.byte	$4D
	.byte	$59
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$2D
	.byte	$44
	.byte	$4F
	.byte	$47
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$53
	.byte	$48
	.byte	$49
	.byte	$52
	.byte	$55
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$44
	.byte	$52
	.byte	$45
	.byte	$58
	.byte	$45
	.byte	$47
	.byte	$41
	.byte	$52
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$53
	.byte	$4F
	.byte	$4C
	.byte	$45
	.byte	$00
	.byte	$47
	.byte	$4F
	.byte	$4F
	.byte	$53
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$27
	.byte	$45
	.byte	$52
	.byte	$49
	.byte	$43
	.byte	$49
	.byte	$43
	.byte	$58
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$54
	.byte	$45
	.byte	$50
	.byte	$50
	.byte	$4C
	.byte	$45
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$46
	.byte	$49
	.byte	$53
	.byte	$4B
	.byte	$42
	.byte	$49
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$54
	.byte	$48
	.byte	$45
	.byte	$00
	.byte	$41
	.byte	$53
	.byte	$4D
	.byte	$00
	.byte	$4C
	.byte	$49
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$25
	.byte	$49
	.byte	$4E
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$54
	.byte	$48
	.byte	$45
	.byte	$4D
	.byte	$45
	.byte	$54
	.byte	$41
	.byte	$4C
	.byte	$42
	.byte	$45
	.byte	$41
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$2E
	.byte	$02
	.byte	$02
	.byte	$41
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$59
	.byte	$4F
	.byte	$55
	.byte	$21
	.byte	$00
	.byte	$02
	.byte	$23
	.byte	$80
	.byte	$A0
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$65
	.byte	$55
	.byte	$55
	.byte	$01
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$AA
	.byte	$80
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$50
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$5A
	.byte	$84
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$66
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$0A
	.byte	$02
	.byte	$03
	.byte	$0A
	.byte	$02
	.byte	$00
_attack_delay:
	.word	$0258
_starting_levels:
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
_konami_code:
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$40
	.byte	$80
	.byte	$10
_def_line:
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$06
	.byte	$0C
	.byte	$0E
	.byte	$08
	.byte	$09
	.byte	$0C
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$0B
_def_square:
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
_def_L_rev:
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$09
_def_L:
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$09
_def_S:
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$09
_def_Z:
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$04
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$08
_def_T:
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$09
	.byte	$06
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$09
	.byte	$03
	.byte	$01
_srs_rotate_lookup:
	.byte	$0E
	.byte	$0D
	.byte	$38
	.byte	$0E
	.byte	$12
	.byte	$1A
	.byte	$25
	.byte	$04
	.byte	$1A
	.byte	$26
	.byte	$1A
	.byte	$0D
	.byte	$2C
	.byte	$1A
	.byte	$06
	.byte	$0E
	.byte	$25
	.byte	$10
	.byte	$0E
	.byte	$32
	.byte	$0B
	.byte	$1E
	.byte	$20
	.byte	$14
	.byte	$26
	.byte	$1B
	.byte	$0A
	.byte	$1C
	.byte	$28
	.byte	$12
	.byte	$0E
	.byte	$1E
	.byte	$02
	.byte	$3C
	.byte	$09
	.byte	$1A
	.byte	$0A
	.byte	$36
	.byte	$00
	.byte	$31
_empty_row_hold:
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
_empty_row_hold_sky:
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$06
_cluster_sprites:
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
_cluster_offsets:
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
_button_delay:
	.byte	$05
_OOB_TOP:
	.byte	$28
_tentacle_offsets:
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$00
_garbage_types:
	.byte	$60
	.byte	$70
	.byte	$2F
_board_lookup_y:
	.byte	$00
	.byte	$0A
	.byte	$14
	.byte	$1E
	.byte	$28
	.byte	$32
	.byte	$3C
	.byte	$46
	.byte	$50
	.byte	$5A
	.byte	$64
	.byte	$6E
	.byte	$78
	.byte	$82
	.byte	$8C
	.byte	$96
	.byte	$A0
	.byte	$AA
	.byte	$B4
	.byte	$BE
	.byte	$C8
	.byte	$D2
	.byte	$DC
	.byte	$E6
_empty_row:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_full_row:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_full_col:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_option_empty:
	.byte	$00
	.byte	$00
_option_icon:
	.byte	$25
	.byte	$26
_palette_bg:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
_palette_sp:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$16
	.byte	$31
	.byte	$36
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$36
_palette_bg_options:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$22
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
_palette_bg_list:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$1A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$1C
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$0C
	.byte	$23
	.byte	$34
	.byte	$0F
	.byte	$00
	.byte	$07
	.byte	$10
	.byte	$0F
	.byte	$1A
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$16
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$1C
	.byte	$10
	.byte	$0F
	.byte	$00
	.byte	$07
	.byte	$22
	.byte	$0F
	.byte	$1B
	.byte	$07
	.byte	$17
	.byte	$0F
	.byte	$0C
	.byte	$11
	.byte	$22
	.byte	$0F
	.byte	$0C
	.byte	$22
	.byte	$27
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$27
	.byte	$0F
	.byte	$1A
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$22
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$26
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$1C
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$23
	.byte	$32
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$23
	.byte	$26
	.byte	$36
_fall_rates_per_level:
	.byte	$30
	.byte	$2B
	.byte	$26
	.byte	$21
	.byte	$1C
	.byte	$17
	.byte	$12
	.byte	$0D
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
_attack_style_strings:
	.byte	$46,$49,$58,$45,$44,$00
	.res	1,$00
	.byte	$54,$49,$4D,$45,$44,$00
	.res	1,$00
	.byte	$43,$4C,$41,$53,$53,$49,$43
_off_on_string:
	.byte	$4F,$46,$46,$00
	.byte	$4F,$4E,$00
	.res	1,$00
_block_style_strings:
	.byte	$4D,$4F,$44,$45,$52,$4E,$00
	.byte	$43,$4C,$41,$53,$53,$49,$43
_hard_drop_types:
	.byte	$4F,$46,$46,$00
	.byte	$54,$41,$50,$00
	.byte	$48,$4F,$4C,$44
_text_push_start:
	.byte	$50,$55,$53,$48,$20,$53,$54,$41,$52,$54,$00
_clear_push_start:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
_metasprite_tentacle_title:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$80
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$81
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$90
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$91
	.byte	$01
	.byte	$80
L154F:
	.byte	$42,$2D,$51,$55,$49,$54,$20,$20,$20,$20,$00
L1545:
	.byte	$41,$2D,$52,$45,$53,$54,$41,$52,$54,$20,$00
L153B:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00
L1624:
	.byte	$30,$30,$30,$30,$30,$30,$30,$00
L15E0:
	.byte	$20,$20,$20,$20,$20,$20,$00
L16DC	:=	L15E0+1
L1743	:=	L15E0+1
L177C:
	.byte	$43,$4C,$45,$41,$52,$00
L1738:
	.byte	$54,$53,$50,$49,$4E,$00
L16D1	:=	L1738+0
L172B:
	.byte	$42,$54,$42,$2D,$54,$00
L1600	:=	L154F+7
L194A	:=	L1624+4
L196F	:=	L1624+4
L1648	:=	L1624+5

.segment	"BSS"

.segment	"ZEROPAGE"
_tick_count:
	.res	1,$00
_tick_count_large:
	.res	2,$00
_ticks_in_state_large:
	.res	2,$00
_hit_reaction_remaining:
	.res	1,$00
_attack_queue_ticks_remaining:
	.res	2,$00
_pad_all:
	.res	1,$00
_pad_all_new:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_pad2:
	.res	1,$00
_pad2_new:
	.res	1,$00
_scroll_y:
	.res	2,$00
_cur_option:
	.res	1,$00
_attack_style:
	.res	1,$00
_music_on:
	.res	1,$00
_sfx_on:
	.res	1,$00
_block_style:
	.res	1,$00
_saved_starting_level:
	.res	1,$00
_hard_drops_on:
	.res	1,$00
_hard_drop_hold_remaining:
	.res	1,$00
_hard_drop_tap_required:
	.res	1,$00
_cur_konami_index:
	.res	1,$00
_cur_rot:
	.res	1,$00
_cur_cluster:
	.res	22,$00
_next_cluster:
	.res	22,$00
_held_cluster_def:
	.res	16,$00
_can_hold_cluster:
	.res	1,$00
_attack_row_status:
	.res	10,$00
_horz_button_delay:
	.res	1,$00
_require_new_down_button:
	.res	1,$00
_fall_frame_counter:
	.res	1,$00
_lines_cleared_one:
	.res	1,$00
_lines_cleared_ten:
	.res	1,$00
_lines_cleared_hundred:
	.res	1,$00
_cur_score:
	.res	4,$00
_last_lines:
	.res	1,$00
_combo_count:
	.res	1,$00
_cur_nt:
	.res	1,$00
_off_nt:
	.res	1,$00
_hit:
	.res	1,$00
_temp_fall_frame_counter:
	.res	1,$00
_old_x:
	.res	1,$00
_id:
	.res	1,$00
_min_y:
	.res	1,$00
_max_y:
	.res	1,$00
_in_x:
	.res	1,$00
_in_y:
	.res	1,$00
_in_id:
	.res	1,$00
_local_start_x:
	.res	1,$00
_local_start_y:
	.res	1,$00
_local_ix:
	.res	1,$00
_local_iy:
	.res	1,$00
_local_t:
	.res	2,$00
_local_bit:
	.res	1,$00
_local_row_status:
	.res	1,$00
_test_song:
	.res	1,$00
_test_song_active:
	.res	1,$00
_test_sound:
	.res	1,$00
_cur_gameplay_music:
	.res	1,$00
_attack_queued:
	.res	1,$00
_cur_garbage_type:
	.res	1,$00
_delay_lock_remaining:
	.res	1,$00
_delay_lock_skip:
	.res	1,$00
_delay_spawn_remaining:
	.res	1,$00
_spawn_queued:
	.res	1,$00
_row_to_clear:
	.res	1,$00
_kill_row_cur:
	.res	1,$00
_kill_row_queued:
	.res	1,$00
_start_delay_remaining:
	.res	1,$00
_mask:
	.res	2,$00
_address:
	.res	2,$00
_time_of_day:
	.res	1,$00
_temp_pal:
	.res	16,$00
_lines_cleared_y:
	.res	4,$00
_line_score_mod:
	.res	2,$00
.segment	"BSS"
_game_board:
	.res	240,$00
_game_board_temp:
	.res	240,$00
_copy_board_data:
	.res	20,$00
_screen_shake_remaining:
	.res	1,$00
_is_tspin:
	.res	1,$00
_is_last_rotate:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ randomize_bag (unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_randomize_bag: near

	.dbg	func, "randomize_bag", "00", extern, "_randomize_bag"
	.dbg	sym, "arr", "00", auto, 1
	.dbg	sym, "n", "00", auto, 0
	.dbg	sym, "i", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2562
	jsr     pusha
;
; for (i = n - 1; i > 0; i--)
;
	.dbg	line, "main.c", 2566
	jsr     decsp1
	ldy     #$01
	lda     (sp),y
	sec
	sbc     #$01
	dey
L1AC3:	sta     (sp),y
	lda     (sp),y
	beq     L1315
;
; unsigned char j = rand() % (i + 1);
;
	.dbg	line, "main.c", 2569
	jsr     _rand
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L131F
	inx
L131F:	jsr     tosumodax
	jsr     pusha
;
; swap(&arr[i], &arr[j]);
;
	.dbg	line, "main.c", 2572
	ldy     #$01
	lda     (sp),y
	clc
	ldy     #$03
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$05
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     _swap
;
; }
;
	.dbg	line, "main.c", 2573
	jsr     incsp1
;
; for (i = n - 1; i > 0; i--)
;
	.dbg	line, "main.c", 2566
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L1AC3
;
; }
;
	.dbg	line, "main.c", 2574
L1315:	jmp     incsp4
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ swap (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_swap: near

	.dbg	func, "swap", "00", extern, "_swap"
	.dbg	sym, "a", "00", auto, 2
	.dbg	sym, "b", "00", auto, 0
	.dbg	sym, "temp", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2577
	jsr     pushax
;
; unsigned char temp = *a;
;
	.dbg	line, "main.c", 2578
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
;
; *a = *b;
;
	.dbg	line, "main.c", 2579
	ldy     #$06
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
;
; *b = temp;
;
	.dbg	line, "main.c", 2580
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (sp),y
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2581
	jmp     incsp5
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ hold_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hold_cluster: near

	.dbg	func, "hold_cluster", "00", extern, "_hold_cluster"

.segment	"BSS"

L1A38:
	.res	1,$00
L1A39:
	.res	1,$00

.segment	"CODE"

;
; can_hold_cluster = 0;
;
	.dbg	line, "main.c", 4129
	lda     #$00
	sta     _can_hold_cluster
;
; if (held_cluster_id == 255) //Nothing is held
;
	.dbg	line, "main.c", 4131
	lda     _held_cluster_id
	cmp     #$FF
	bne     L1ACC
;
; held_cluster_id = cur_cluster.id;
;
	.dbg	line, "main.c", 4134
	lda     _cur_cluster+21
	sta     _held_cluster_id
;
; held_cluster_rot = cur_rot;
;
	.dbg	line, "main.c", 4135
	lda     _cur_rot
	sta     _held_cluster_rot
;
; memcpy(held_cluster_def, cluster_defs_classic[held_cluster_id], (4 * 4));
;
	.dbg	line, "main.c", 4136
	lda     #<(_held_cluster_def)
	ldx     #>(_held_cluster_def)
	jsr     pushax
	ldx     #$00
	lda     _held_cluster_id
	asl     a
	bcc     L1AC9
	inx
	clc
L1AC9:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 4139
	jsr     _spawn_new_cluster
;
; can_hold_cluster = 1;
;
	.dbg	line, "main.c", 4140
	lda     #$01
	sta     _can_hold_cluster
;
; else
;
	.dbg	line, "main.c", 4142
	jmp     L1ACD
;
; staging_cluster_id = held_cluster_id;
;
	.dbg	line, "main.c", 4145
L1ACC:	lda     _held_cluster_id
	sta     _staging_cluster_id
;
; staging_cluster_rot = held_cluster_rot;
;
	.dbg	line, "main.c", 4146
	lda     _held_cluster_rot
	sta     _staging_cluster_rot
;
; held_cluster_id = cur_cluster.id;
;
	.dbg	line, "main.c", 4149
	lda     _cur_cluster+21
	sta     _held_cluster_id
;
; held_cluster_rot = cur_rot;
;
	.dbg	line, "main.c", 4150
	lda     _cur_rot
	sta     _held_cluster_rot
;
; memcpy(held_cluster_def, cluster_defs_classic[held_cluster_id], (4 * 4));
;
	.dbg	line, "main.c", 4151
	lda     #<(_held_cluster_def)
	ldx     #>(_held_cluster_def)
	jsr     pushax
	ldx     #$00
	lda     _held_cluster_id
	asl     a
	bcc     L1ACA
	inx
	clc
L1ACA:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; cur_cluster.id = staging_cluster_id; //id
;
	.dbg	line, "main.c", 4154
	lda     _staging_cluster_id
	sta     _cur_cluster+21
;
; cur_rot = staging_cluster_rot;
;
	.dbg	line, "main.c", 4155
	lda     _staging_cluster_rot
	sta     _cur_rot
;
; cur_block.x = 3; // Reset the block.
;
	.dbg	line, "main.c", 4156
	lda     #$03
	sta     _cur_block
;
; cur_block.y = cluster_offsets[staging_cluster_id];
;
	.dbg	line, "main.c", 4157
	ldy     _staging_cluster_id
	lda     _cluster_offsets,y
	sta     _cur_block+1
;
; memcpy(cur_cluster.def, cluster_defs_classic[staging_cluster_id], 4 * 4); //cluster_defs_classic[id]
;
	.dbg	line, "main.c", 4158
	lda     #<(_cur_cluster+4)
	ldx     #>(_cur_cluster+4)
	jsr     pushax
	ldx     #$00
	lda     _staging_cluster_id
	asl     a
	bcc     L1ACB
	inx
	clc
L1ACB:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4);
;
	.dbg	line, "main.c", 4159
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; cur_cluster.sprite = cluster_sprites[staging_cluster_id]; //cluster_sprites[id]
;
	.dbg	line, "main.c", 4160
	ldy     _staging_cluster_id
	lda     _cluster_sprites,y
	sta     _cur_cluster+20
;
; local_iy = 0;
;
	.dbg	line, "main.c", 4164
L1ACD:	lda     #$00
	sta     _local_iy
;
; local_ix = 0;
;
	.dbg	line, "main.c", 4165
	sta     _local_ix
;
; local_t = cluster_sprites[held_cluster_id];
;
	.dbg	line, "main.c", 4166
	ldy     _held_cluster_id
	sta     _local_t+1
	lda     _cluster_sprites,y
	sta     _local_t
;
; delay(1);
;
	.dbg	line, "main.c", 4169
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 4170
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 32));
;
	.dbg	line, "main.c", 4173
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 40));
;
	.dbg	line, "main.c", 4174
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$28
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; delay(1);
;
	.dbg	line, "main.c", 4176
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 4177
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 48));
;
	.dbg	line, "main.c", 4179
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold_sky, 4, get_ppu_addr(cur_nt, 220, 56));
;
	.dbg	line, "main.c", 4180
	jsr     decsp3
	lda     #<(_empty_row_hold_sky)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold_sky)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$38
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; for (l = 0; l < 4; ++l)
;
	.dbg	line, "main.c", 4182
	lda     #$00
	sta     L1A38
L1ACE:	lda     L1A38
	cmp     #$04
	bcc     L1AD7
;
; }
;
	.dbg	line, "main.c", 4195
	rts
;
; m = held_cluster_def[held_cluster_rot][l];
;
	.dbg	line, "main.c", 4185
L1AD7:	ldx     #$00
	lda     _held_cluster_rot
	jsr     aslax2
	clc
	adc     #<(_held_cluster_def)
	sta     ptr1
	txa
	adc     #>(_held_cluster_def)
	sta     ptr1+1
	ldy     L1A38
	lda     (ptr1),y
	sta     L1A39
;
; local_ix = morton_compact_one_by_one(m >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 4188
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(m >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 4189
	lda     L1A39
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; one_vram_buffer(local_t, get_ppu_addr(cur_nt,
;
	.dbg	line, "main.c", 4191
	lda     _local_t
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
;
; 220 + (local_ix << 3),
;
	.dbg	line, "main.c", 4192
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$DC
	dey
	sta     (sp),y
;
; 32 - ((held_cluster_id == 3 || (held_cluster_id != 2 && held_cluster_rot == 2)) ? 8 : 0) + (local_iy << 3))); //8 + (local_iy << 3)
;
	.dbg	line, "main.c", 4193
	lda     #$20
	jsr     pusha0
	lda     _held_cluster_id
	cmp     #$03
	beq     L1AD5
	cmp     #$02
	beq     L1ACF
	lda     _held_cluster_rot
	cmp     #$02
	beq     L1AD5
L1ACF:	lda     #$00
	jmp     L1ABE
L1AD5:	lda     #$08
L1ABE:	jsr     tossuba0
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _local_iy
	jsr     aslax3
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	pla
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; for (l = 0; l < 4; ++l)
;
	.dbg	line, "main.c", 4182
	inc     L1A38
	jmp     L1ACE
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ find_ghost_delta_y (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_find_ghost_delta_y: near

	.dbg	func, "find_ghost_delta_y", "00", extern, "_find_ghost_delta_y"

.segment	"BSS"

L11E7:
	.res	1,$00
L11E8:
	.res	1,$00
L11E9:
	.res	1,$00
L11EA:
	.res	1,$00
L11EB:
	.res	1,$00

.segment	"CODE"

;
; if (cur_cluster.id == 2) //Is I
;
	.dbg	line, "main.c", 2349
	lda     _cur_cluster+21
	cmp     #$02
	bne     L1AF8
;
; if (cur_rot & 1) //Is Vertical
;
	.dbg	line, "main.c", 2351
	lda     _cur_rot
	and     #$01
	beq     L1AF6
;
; local_ix = 1;
;
	.dbg	line, "main.c", 2353
	lda     #$01
	sta     _local_ix
;
; local_iy = 4;
;
	.dbg	line, "main.c", 2354
	lda     #$04
	sta     _local_iy
;
; if (cur_rot == 1)
;
	.dbg	line, "main.c", 2355
	lda     _cur_rot
	cmp     #$01
	bne     L1AFC
;
; x = 2;
;
	.dbg	line, "main.c", 2357
	lda     #$02
;
; else
;
	.dbg	line, "main.c", 2360
	jmp     L1B0B
;
; local_ix = 4;
;
	.dbg	line, "main.c", 2368
L1AF6:	lda     #$04
	sta     _local_ix
;
; local_iy = 1;
;
	.dbg	line, "main.c", 2369
	lda     #$01
	sta     _local_iy
;
; if (cur_rot == 0)
;
	.dbg	line, "main.c", 2370
	lda     _cur_rot
	bne     L1AF7
;
; x = 0;
;
	.dbg	line, "main.c", 2372
	sta     L11E7
;
; y = 1;
;
	.dbg	line, "main.c", 2373
	lda     #$01
;
; else
;
	.dbg	line, "main.c", 2375
	jmp     L1AEB
;
; x = 0;
;
	.dbg	line, "main.c", 2377
L1AF7:	lda     #$00
	sta     L11E7
;
; y = 2;
;
	.dbg	line, "main.c", 2378
	lda     #$02
;
; else if (cur_cluster.id == 3) //Is Square
;
	.dbg	line, "main.c", 2382
	jmp     L1AEB
L1AF8:	lda     _cur_cluster+21
	cmp     #$03
	bne     L1AF9
;
; local_ix = 2;
;
	.dbg	line, "main.c", 2384
	lda     #$02
	sta     _local_ix
;
; local_iy = 2;
;
	.dbg	line, "main.c", 2385
	sta     _local_iy
;
; x = 1;
;
	.dbg	line, "main.c", 2386
	lda     #$01
	sta     L11E7
;
; else
;
	.dbg	line, "main.c", 2389
	jmp     L1AEB
;
; if (cur_rot & 1) //Is Vertical
;
	.dbg	line, "main.c", 2391
L1AF9:	lda     _cur_rot
	and     #$01
	beq     L1AFB
;
; local_ix = 2;
;
	.dbg	line, "main.c", 2393
	lda     #$02
	sta     _local_ix
;
; local_iy = 3;
;
	.dbg	line, "main.c", 2394
	lda     #$03
	sta     _local_iy
;
; if (cur_rot == 1)
;
	.dbg	line, "main.c", 2395
	lda     _cur_rot
	cmp     #$01
;
; else
;
	.dbg	line, "main.c", 2400
	beq     L1B0B
;
; x = 0;
;
	.dbg	line, "main.c", 2402
	lda     #$00
	sta     L11E7
;
; else //Is flat
;
	.dbg	line, "main.c", 2406
	jmp     L1AEB
;
; local_ix = 3;
;
	.dbg	line, "main.c", 2408
L1AFB:	lda     #$03
	sta     _local_ix
;
; local_iy = 2;
;
	.dbg	line, "main.c", 2409
	lda     #$02
	sta     _local_iy
;
; if (cur_rot == 0)
;
	.dbg	line, "main.c", 2410
	lda     _cur_rot
	bne     L1AFC
;
; x = 0;
;
	.dbg	line, "main.c", 2412
	sta     L11E7
;
; else
;
	.dbg	line, "main.c", 2415
	jmp     L1AEB
;
; x = 1;
;
	.dbg	line, "main.c", 2417
L1AFC:	lda     #$01
L1B0B:	sta     L11E7
;
; y = 0;
;
	.dbg	line, "main.c", 2418
	lda     #$00
L1AEB:	sta     L11E8
;
; for (delta_y = 0; delta_y < BOARD_END_Y_PX_BOARD - (cur_block.y + y); delta_y++)
;
	.dbg	line, "main.c", 2422
	lda     #$00
	sta     L11E9
L1AFD:	lda     L11E9
	jsr     pusha0
	lda     #$17
	jsr     pusha0
	lda     _cur_block+1
	clc
	adc     L11E8
	bcc     L1AD8
	ldx     #$01
L1AD8:	jsr     tossubax
	jsr     tosicmp
	jcs     L1B00
;
; (cur_block.y + (local_iy + y) + delta_y) > BOARD_END_Y_PX_BOARD
;
	.dbg	line, "main.c", 2425
	ldx     #$00
	lda     _local_iy
	clc
	adc     L11E8
	bcc     L1AEC
	inx
	clc
L1AEC:	adc     _cur_block+1
	bcc     L1AED
	inx
	clc
L1AED:	adc     L11E9
	bcc     L1ADA
	inx
;
; || game_board[TILE_TO_BOARD_INDEX((cur_block.x + (local_ix) + x), (cur_block.y + (local_iy) + y + delta_y))] 
;
	.dbg	line, "main.c", 2427
L1ADA:	cmp     #$18
	txa
	sbc     #$00
	jcs     L1B00
	ldx     #$00
	lda     _cur_block+1
	clc
	adc     _local_iy
	bcc     L1AEE
	inx
	clc
L1AEE:	adc     L11E8
	bcc     L1AEF
	inx
	clc
L1AEF:	adc     L11E9
	bcc     L1ADD
	inx
L1ADD:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     _cur_block
	clc
	adc     _local_ix
	bcc     L1AF0
	inx
	clc
L1AF0:	adc     L11E7
	bcc     L1AF1
	inx
	clc
L1AF1:	adc     ptr1
	bcc     L1AE8
	inx
L1AE8:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
;
; || game_board[TILE_TO_BOARD_INDEX((cur_block.x + x), (cur_block.y + y + delta_y))])
;
	.dbg	line, "main.c", 2428
	lda     (ptr1),y
	bne     L1B00
	tax
	lda     _cur_block+1
	clc
	adc     L11E8
	bcc     L1AF2
	inx
	clc
L1AF2:	adc     L11E9
	bcc     L1AE1
	inx
L1AE1:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     _cur_block
	clc
	adc     L11E7
	bcc     L1AF3
	inx
	clc
L1AF3:	adc     ptr1
	bcc     L1AE9
	inx
L1AE9:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L1B00
;
; for (delta_y = 0; delta_y < BOARD_END_Y_PX_BOARD - (cur_block.y + y); delta_y++)
;
	.dbg	line, "main.c", 2422
	inc     L11E9
	jmp     L1AFD
;
; delta_y -= (delta_y < 4 ? 0 : 4); //It may require four steps to refine collision detection
;
	.dbg	line, "main.c", 2434
L1B00:	lda     L11E9
	cmp     #$04
	bcs     L1B01
	lda     #$00
	jmp     L1B03
L1B01:	lda     #$04
L1B03:	eor     #$FF
	sec
	adc     L11E9
	sta     L11E9
;
; for (/*delta_y = 0*/; delta_y < BOARD_END_Y_PX_BOARD /*+1-(cur_block.y)*/; delta_y++)
;
	.dbg	line, "main.c", 2437
	ldx     #$00
L1B04:	lda     L11E9
	cmp     #$17
	jcs     L1B09
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2439
	lda     #$00
	sta     L11EA
	tax
L1B05:	lda     L11EA
	cmp     #$04
	bcs     L1B08
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 2442
	ldy     L11EA
	lda     _cur_cluster,y
	sta     L11EB
;
; local_ix = morton_compact_one_by_one(j >> 0);
;
	.dbg	line, "main.c", 2445
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1);
;
	.dbg	line, "main.c", 2446
	lda     L11EB
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2448
	lda     _cur_block
	clc
	adc     _local_ix
	sta     L11E7
;
; y = cur_block.y + local_iy + delta_y;
;
	.dbg	line, "main.c", 2449
	lda     _cur_block+1
	clc
	adc     _local_iy
	bcc     L1AF4
	clc
L1AF4:	adc     L11E9
	sta     L11E8
;
; if (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD || game_board[TILE_TO_BOARD_INDEX(x, y)])
;
	.dbg	line, "main.c", 2451
	cmp     #$18
	bcs     L1B06
	lda     L11E7
	cmp     #$0A
	bcs     L1B06
	ldy     L11E8
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     L11E7
	bcc     L1AE6
	inx
L1AE6:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L1B06
	tax
	jmp     L1B07
;
; return delta_y - 1;
;
	.dbg	line, "main.c", 2454
L1B06:	lda     L11E9
	sec
	sbc     #$01
	ldx     #$00
	rts
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2439
L1B07:	inc     L11EA
	jmp     L1B05
;
; for (/*delta_y = 0*/; delta_y < BOARD_END_Y_PX_BOARD /*+1-(cur_block.y)*/; delta_y++)
;
	.dbg	line, "main.c", 2437
L1B08:	inc     L11E9
	jmp     L1B04
;
; return 0;
;
	.dbg	line, "main.c", 2459
L1B09:	lda     #$00
;
; }
;
	.dbg	line, "main.c", 2460
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ draw_menu_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_menu_sprites: near

	.dbg	func, "draw_menu_sprites", "00", extern, "_draw_menu_sprites"

.segment	"BSS"

L0F02:
	.res	1,$00

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "main.c", 1567
	jsr     _oam_clear
;
; t = tick_count % 64;
;
	.dbg	line, "main.c", 1570
	lda     _tick_count
	and     #$3F
	sta     L0F02
;
; if (t > 48)
;
	.dbg	line, "main.c", 1571
	cmp     #$31
	bcc     L1B0D
;
; local_ix = 0x69;
;
	.dbg	line, "main.c", 1573
	lda     #$69
;
; else if (t > 32)
;
	.dbg	line, "main.c", 1575
	jmp     L1B0C
L1B0D:	lda     L0F02
	cmp     #$21
	bcc     L1B0E
;
; local_ix = 0x68;
;
	.dbg	line, "main.c", 1577
	lda     #$68
;
; else if (t > 16)
;
	.dbg	line, "main.c", 1579
	jmp     L1B0C
L1B0E:	lda     L0F02
	cmp     #$11
	bcc     L1B0F
;
; local_ix = 0x67;
;
	.dbg	line, "main.c", 1581
	lda     #$67
;
; else
;
	.dbg	line, "main.c", 1583
	jmp     L1B0C
;
; local_ix = 0x66;
;
	.dbg	line, "main.c", 1585
L1B0F:	lda     #$66
L1B0C:	sta     _local_ix
;
; oam_spr(10 << 3, 23 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1588
	jsr     decsp3
	lda     #$50
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(22 << 3, 23 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1589
	jsr     decsp3
	lda     #$B0
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_meta_spr(19 << 3, 14 << 3, metasprite_tentacle_title);
;
	.dbg	line, "main.c", 1591
	jsr     decsp2
	lda     #$98
	ldy     #$01
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     #<(_metasprite_tentacle_title)
	ldx     #>(_metasprite_tentacle_title)
	jmp     _oam_meta_spr
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ draw_gameplay_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_gameplay_sprites: near

	.dbg	func, "draw_gameplay_sprites", "00", extern, "_draw_gameplay_sprites"

.segment	"BSS"

L0F26:
	.res	1,$00
L0F27:
	.res	1,$00
L0F28:
	.res	1,$00
L0F29:
	.res	1,$00
L0F2A:
	.res	1,$00

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "main.c", 1622
	jsr     _oam_clear
;
; local_start_x = (cur_block.x << 3) + BOARD_START_X_PX;
;
	.dbg	line, "main.c", 1628
	lda     _cur_block
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	sta     _local_start_x
;
; local_start_y = (cur_block.y << 3) + BOARD_START_Y_PX;
;
	.dbg	line, "main.c", 1629
	lda     _cur_block+1
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	sta     _local_start_y
;
; ghost_y = find_ghost_delta_y();
;
	.dbg	line, "main.c", 1632
	jsr     _find_ghost_delta_y
	sta     L0F2A
;
; ghost_y = (cur_block.y + ghost_y << 3) + BOARD_START_Y_PX;
;
	.dbg	line, "main.c", 1633
	lda     _cur_block+1
	clc
	adc     L0F2A
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	sta     L0F2A
;
; if (cur_block.y != 255)
;
	.dbg	line, "main.c", 1637
	lda     _cur_block+1
	cmp     #$FF
	jeq     L1B1E
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 1639
	lda     #$00
	sta     L0F28
L1B1D:	lda     L0F28
	cmp     #$04
	jcs     L1B1E
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 1642
	ldy     L0F28
	lda     _cur_cluster,y
	sta     L0F29
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 1645
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 1646
	lda     L0F29
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; if (local_start_y + (local_iy << 3) > OOB_TOP)
;
	.dbg	line, "main.c", 1651
	ldx     #$00
	lda     _local_iy
	jsr     aslax3
	clc
	adc     _local_start_y
	bcc     L1B14
	inx
L1B14:	sec
	sbc     _OOB_TOP
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L0F3E
	beq     L0F3E
;
; if (ghost_y != local_start_y)
;
	.dbg	line, "main.c", 1654
	lda     _local_start_y
	cmp     L0F2A
	beq     L0F51
;
; oam_spr(local_start_x + (local_ix << 3), ghost_y + (local_iy << 3), GHOST_BLOCK_SPRITE, 0);
;
	.dbg	line, "main.c", 1657
	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     _local_start_x
	ldy     #$02
	sta     (sp),y
	lda     _local_iy
	asl     a
	asl     a
	asl     a
	clc
	adc     L0F2A
	dey
	sta     (sp),y
	lda     #$F7
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(local_start_x + (local_ix << 3), local_start_y + (local_iy << 3), cur_cluster.sprite, 0);
;
	.dbg	line, "main.c", 1660
L0F51:	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     _local_start_x
	ldy     #$02
	sta     (sp),y
	lda     _local_iy
	asl     a
	asl     a
	asl     a
	clc
	adc     _local_start_y
	dey
	sta     (sp),y
	lda     _cur_cluster+20
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 1639
L0F3E:	inc     L0F28
	jmp     L1B1D
;
; if (attack_style != ATTACK_NEVER)
;
	.dbg	line, "main.c", 1667
L1B1E:	lda     _attack_style
	cmp     #$02
	jeq     L1B24
;
; shake_offset = 0;
;
	.dbg	line, "main.c", 1669
	lda     #$00
	sta     L0F26
;
; if (attack_style == ATTACK_ON_TIME)
;
	.dbg	line, "main.c", 1670
	lda     _attack_style
	cmp     #$01
	bne     L1B20
;
; if (attack_queue_ticks_remaining < 120)
;
	.dbg	line, "main.c", 1672
	lda     _attack_queue_ticks_remaining+1
	cmp     #$00
	bne     L0F69
	lda     _attack_queue_ticks_remaining
	cmp     #$78
L0F69:	bcs     L0F67
;
; speed = tick_count >> 2;
;
	.dbg	line, "main.c", 1674
	lda     _tick_count
;
; else if (attack_queue_ticks_remaining < 300)
;
	.dbg	line, "main.c", 1676
	jmp     L1B28
L0F67:	lda     _attack_queue_ticks_remaining+1
	cmp     #$01
	bne     L0F6F
	lda     _attack_queue_ticks_remaining
	cmp     #$2C
L0F6F:	bcs     L1B1F
;
; speed = tick_count >> 3;
;
	.dbg	line, "main.c", 1678
	lda     _tick_count
;
; else
;
	.dbg	line, "main.c", 1680
	jmp     L1B2A
;
; speed = tick_count >> 5;
;
	.dbg	line, "main.c", 1682
L1B1F:	lda     _tick_count
	lsr     a
;
; else
;
	.dbg	line, "main.c", 1685
	jmp     L1B2C
;
; speed = tick_count >> 4;
;
	.dbg	line, "main.c", 1687
L1B20:	lda     _tick_count
L1B2C:	lsr     a
L1B2A:	lsr     a
L1B28:	lsr     a
	lsr     a
	sta     L0F27
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 1691
	lda     #$00
	sta     _local_ix
L1B21:	lda     _local_ix
	cmp     #$0A
	jcs     L1B24
;
; local_row_status = attack_row_status[local_ix];
;
	.dbg	line, "main.c", 1693
	ldy     _local_ix
	lda     _attack_row_status,y
	sta     _local_row_status
;
; if (local_row_status > 0)
;
	.dbg	line, "main.c", 1694
	lda     _local_row_status
	jeq     L1B23
;
; for (local_iy = 0; local_iy < local_row_status /*&& local_iy < ATTACK_QUEUE_SIZE*/; ++local_iy)
;
	.dbg	line, "main.c", 1696
	lda     #$00
	sta     _local_iy
	tax
L1B22:	lda     _local_iy
	cmp     _local_row_status
	jcs     L1B23
;
; shake_offset = tentacle_offsets[((local_iy + speed) & 3)]; // &3 = %4 = number of entries in array.
;
	.dbg	line, "main.c", 1706
	clc
	adc     L0F27
	and     #$03
	sta     ptr1
	txa
	clc
	adc     #>(_tentacle_offsets)
	sta     ptr1+1
	ldy     #<(_tentacle_offsets)
	lda     (ptr1),y
	sta     L0F26
;
; if (local_iy == local_row_status - 1)
;
	.dbg	line, "main.c", 1709
	lda     _local_row_status
	sec
	sbc     #$01
	bcs     L0F96
	dex
L0F96:	cpx     #$00
	bne     L0F94
	cmp     _local_iy
	bne     L0F94
;
; BOARD_START_X_PX + (local_ix << 3) + shake_offset,
;
	.dbg	line, "main.c", 1712
	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	clc
	adc     L0F26
	ldy     #$02
	sta     (sp),y
;
; (BOARD_END_Y_PX) + (ATTACK_QUEUE_SIZE << 3) - (local_iy << 3),
;
	.dbg	line, "main.c", 1713
	lda     #$E0
	jsr     pusha0
	lda     _local_iy
	jsr     aslax3
	jsr     tossubax
	ldy     #$01
	sta     (sp),y
;
; 0xf9,
;
	.dbg	line, "main.c", 1714
	lda     #$F9
;
; else
;
	.dbg	line, "main.c", 1717
	jmp     L1B2B
;
; BOARD_START_X_PX + (local_ix << 3) + shake_offset,
;
	.dbg	line, "main.c", 1720
L0F94:	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	clc
	adc     L0F26
	ldy     #$02
	sta     (sp),y
;
; (BOARD_END_Y_PX) + (ATTACK_QUEUE_SIZE << 3) - (local_iy << 3),
;
	.dbg	line, "main.c", 1721
	lda     #$E0
	jsr     pusha0
	lda     _local_iy
	jsr     aslax3
	jsr     tossubax
	ldy     #$01
	sta     (sp),y
;
; 0xf8,
;
	.dbg	line, "main.c", 1722
	lda     #$F8
L1B2B:	dey
	sta     (sp),y
;
; 1);
;
	.dbg	line, "main.c", 1723
	lda     #$01
	jsr     _oam_spr
;
; for (local_iy = 0; local_iy < local_row_status /*&& local_iy < ATTACK_QUEUE_SIZE*/; ++local_iy)
;
	.dbg	line, "main.c", 1696
	ldx     #$00
	inc     _local_iy
	jmp     L1B22
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 1691
L1B23:	inc     _local_ix
	jmp     L1B21
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 1739
L1B24:	lda     _hit_reaction_remaining
	beq     L1B25
;
; oam_spr((3 << 3) /*+ r*/, (24 << 3), 0x65, 1);
;
	.dbg	line, "main.c", 1743
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C0
	dey
	sta     (sp),y
	lda     #$65
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 25 << 3, 0x64, 1);
;
	.dbg	line, "main.c", 1744
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x74, 1);
;
	.dbg	line, "main.c", 1745
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$74
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr
;
; if (attack_style == ATTACK_NEVER)
;
	.dbg	line, "main.c", 1766
L1B25:	lda     _attack_style
	cmp     #$02
	bne     L0FC2
;
; oam_spr(3 << 3, 25 << 3, 0x63, 1);
;
	.dbg	line, "main.c", 1769
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$63
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x73, 1);
;
	.dbg	line, "main.c", 1770
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$73
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr
;
; local_t = tick_count_large % BLINK_LEN;
;
	.dbg	line, "main.c", 1776
L0FC2:	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     pushax
	ldx     #$01
	lda     #$2C
	jsr     tosumodax
	sta     _local_t
	stx     _local_t+1
;
; if (local_t > BLINK_LEN - 5)
;
	.dbg	line, "main.c", 1778
	cmp     #$28
	txa
	sbc     #$01
	bcc     L0FD2
;
; oam_spr(3 << 3, 25 << 3, 0x62, 1);
;
	.dbg	line, "main.c", 1780
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$62
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x72, 1);
;
	.dbg	line, "main.c", 1781
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$72
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr
;
; else if (local_t > (BLINK_LEN - 10))
;
	.dbg	line, "main.c", 1783
L0FD2:	lda     _local_t
	cmp     #$23
	lda     _local_t+1
	sbc     #$01
	bcc     L0FE0
;
; oam_spr(3 << 3, 25 << 3, 0x63, 1);
;
	.dbg	line, "main.c", 1785
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$63
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x73, 1);
;
	.dbg	line, "main.c", 1786
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$73
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr
;
; else if (local_t > BLINK_LEN - 15)
;
	.dbg	line, "main.c", 1788
L0FE0:	lda     _local_t
	cmp     #$1E
	lda     _local_t+1
	sbc     #$01
	bcc     L0FEF
;
; oam_spr(3 << 3, 25 << 3, 0x62, 1);
;
	.dbg	line, "main.c", 1790
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$62
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x72, 1);
;
	.dbg	line, "main.c", 1791
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$72
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr
;
; }
;
	.dbg	line, "main.c", 1824
L0FEF:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

	.dbg	func, "movement", "00", extern, "_movement"

.segment	"BSS"

L0FFD:
	.res	1,$00
L0FFE:
	.res	1,$00

.segment	"CODE"

;
; hit = 0;
;
	.dbg	line, "main.c", 1830
	lda     #$00
	sta     _hit
;
; temp_fall_frame_counter = 0;
;
	.dbg	line, "main.c", 1831
	sta     _temp_fall_frame_counter
;
; old_x = 0;
;
	.dbg	line, "main.c", 1832
	sta     _old_x
;
; delay_lock_skip = 0;
;
	.dbg	line, "main.c", 1833
	sta     _delay_lock_skip
;
; if (start_delay_remaining == 0)
;
	.dbg	line, "main.c", 1835
	lda     _start_delay_remaining
	bne     L1B34
;
; --fall_frame_counter;
;
	.dbg	line, "main.c", 1837
	dec     _fall_frame_counter
;
; else
;
	.dbg	line, "main.c", 1839
	jmp     L1B35
;
; --start_delay_remaining;
;
	.dbg	line, "main.c", 1841
L1B34:	dec     _start_delay_remaining
;
; if (pad_all_new & PAD_SELECT)
;
	.dbg	line, "main.c", 1847
L1B35:	lda     _pad_all_new
	and     #$20
	beq     L1B36
;
; if (can_hold_cluster)
;
	.dbg	line, "main.c", 1886
	lda     _can_hold_cluster
	beq     L1B36
;
; hold_cluster();
;
	.dbg	line, "main.c", 1887
	jsr     _hold_cluster
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1893
L1B36:	lda     _pad_all_new
	and     #$80
	beq     L1B37
;
; rotate_cur_cluster(1);
;
	.dbg	line, "main.c", 1895
	lda     #$01
;
; else if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1897
	jmp     L1B31
L1B37:	lda     _pad_all_new
	and     #$40
	beq     L1B38
;
; rotate_cur_cluster(-1);
;
	.dbg	line, "main.c", 1899
	lda     #$FF
L1B31:	jsr     _rotate_cur_cluster
;
; if (horz_button_delay > 0)
;
	.dbg	line, "main.c", 1902
L1B38:	lda     _horz_button_delay
	beq     L1B39
;
; --horz_button_delay;
;
	.dbg	line, "main.c", 1904
	dec     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1907
L1B39:	lda     _cur_block
	sta     _old_x
;
; if (((pad_all & PAD_RIGHT) && horz_button_delay == 0) || (pad_all_new & PAD_RIGHT))
;
	.dbg	line, "main.c", 1908
	lda     _pad_all
	and     #$01
	beq     L1B3D
	lda     _horz_button_delay
	beq     L1B40
L1B3D:	lda     _pad_all_new
	and     #$01
	beq     L1B42
;
; horz_button_delay = button_delay;
;
	.dbg	line, "main.c", 1910
L1B40:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad_all_new & PAD_RIGHT))
;
	.dbg	line, "main.c", 1911
	lda     _pad_all_new
	and     #$01
	beq     L1B41
;
; horz_button_delay <<= 1;
;
	.dbg	line, "main.c", 1913
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1918
L1B41:	lda     _cur_block
	sta     _old_x
;
; cur_block.x += 1;
;
	.dbg	line, "main.c", 1919
	inc     _cur_block
;
; else if (((pad_all & PAD_LEFT) && horz_button_delay == 0) || pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 1928
	jmp     L1B6E
L1B42:	lda     _pad_all
	and     #$02
	beq     L1B46
	lda     _horz_button_delay
	beq     L1B49
L1B46:	lda     _pad_all_new
	and     #$02
	beq     L1B4B
;
; horz_button_delay = button_delay;
;
	.dbg	line, "main.c", 1930
L1B49:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad_all_new & PAD_LEFT))
;
	.dbg	line, "main.c", 1931
	lda     _pad_all_new
	and     #$02
	beq     L1B4A
;
; horz_button_delay <<= 1;
;
	.dbg	line, "main.c", 1934
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1939
L1B4A:	lda     _cur_block
	sta     _old_x
;
; cur_block.x -= 1; // note: wrap around
;
	.dbg	line, "main.c", 1940
	dec     _cur_block
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 1946
L1B6E:	lda     _is_last_rotate
	sta     L0FFE
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 1947
	lda     #$00
	sta     _is_last_rotate
;
; if (cur_block.x != old_x && is_cluster_colliding())
;
	.dbg	line, "main.c", 1953
L1B4B:	lda     _old_x
	cmp     _cur_block
	beq     L1B4D
	jsr     _is_cluster_colliding
	tax
	beq     L1B4D
;
; cur_block.x = old_x;
;
	.dbg	line, "main.c", 1955
	lda     _old_x
	sta     _cur_block
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 1956
	lda     L0FFE
	sta     _is_last_rotate
;
; temp_fall_frame_counter = fall_frame_counter;
;
	.dbg	line, "main.c", 1983
L1B4D:	lda     _fall_frame_counter
	sta     _temp_fall_frame_counter
;
; hard_drop_performed = 0;
;
	.dbg	line, "main.c", 1985
	lda     #$00
	sta     L0FFD
;
; if (hard_drops_on && pad_all & PAD_UP && (pad_all & (PAD_LEFT | PAD_RIGHT)) == 0)
;
	.dbg	line, "main.c", 1986
	lda     _hard_drops_on
	beq     L1B59
	lda     _pad_all
	and     #$08
	beq     L1B59
	lda     _pad_all
	and     #$03
	bne     L1B59
;
; if ((pad_all & PAD_UP && hard_drop_tap_required == 0) || pad_all_new & PAD_UP)
;
	.dbg	line, "main.c", 1988
	lda     _pad_all
	and     #$08
	beq     L1B54
	lda     _hard_drop_tap_required
	beq     L1B57
L1B54:	lda     _pad_all_new
	and     #$08
	beq     L1B5C
;
; --hard_drop_hold_remaining;
;
	.dbg	line, "main.c", 1990
L1B57:	dec     _hard_drop_hold_remaining
;
; if (hard_drop_hold_remaining == 0)
;
	.dbg	line, "main.c", 1992
	bne     L1B5C
;
; hard_drop_performed = 1;
;
	.dbg	line, "main.c", 1994
	lda     #$01
	sta     L0FFD
;
; hard_drop_tap_required = 1;
;
	.dbg	line, "main.c", 1995
	sta     _hard_drop_tap_required
;
; while (!is_cluster_colliding())
;
	.dbg	line, "main.c", 1998
	jmp     L106F
;
; ++cur_block.y;
;
	.dbg	line, "main.c", 2000
L1B58:	inc     _cur_block+1
;
; cur_score += 2;
;
	.dbg	line, "main.c", 2001
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	lda     #$02
	jsr     laddeqa
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2002
	lda     _is_last_rotate
	sta     L0FFE
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2003
	lda     #$00
	sta     _is_last_rotate
;
; while (!is_cluster_colliding())
;
	.dbg	line, "main.c", 1998
L106F:	jsr     _is_cluster_colliding
	tax
	beq     L1B58
;
; display_score();
;
	.dbg	line, "main.c", 2005
	jsr     _display_score
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 2007
	lda     #$01
	sta     _delay_lock_skip
;
; else
;
	.dbg	line, "main.c", 2015
	jmp     L1B5C
;
; if ((pad_all & (PAD_LEFT | PAD_RIGHT)) == 0)
;
	.dbg	line, "main.c", 2017
L1B59:	lda     _pad_all
	and     #$03
	bne     L1B5A
;
; hard_drop_tap_required = 0;
;
	.dbg	line, "main.c", 2019
	sta     _hard_drop_tap_required
;
; if (hard_drops_on == 1) // tap
;
	.dbg	line, "main.c", 2021
L1B5A:	lda     _hard_drops_on
	cmp     #$01
;
; else if (hard_drops_on == 2) // hold
;
	.dbg	line, "main.c", 2025
	beq     L1B33
	cmp     #$02
	bne     L1B5C
;
; hard_drop_hold_remaining = HARD_DROP_HOLD_TIME;
;
	.dbg	line, "main.c", 2027
L1B33:	sta     _hard_drop_hold_remaining
;
; if (hard_drop_performed == 0)
;
	.dbg	line, "main.c", 2031
L1B5C:	lda     L0FFD
	bne     L1B67
;
; if (pad_all_new & PAD_DOWN || delay_lock_remaining != -1)
;
	.dbg	line, "main.c", 2037
	lda     _pad_all_new
	and     #$04
	bne     L1B5D
	lda     _delay_lock_remaining
	cmp     #$FF
	beq     L1B60
;
; if (pad_all_new & PAD_DOWN)
;
	.dbg	line, "main.c", 2039
L1B5D:	lda     _pad_all_new
	and     #$04
	beq     L1B5F
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 2042
	lda     #$01
	sta     _delay_lock_skip
;
; require_new_down_button = 0;
;
	.dbg	line, "main.c", 2044
	lda     #$00
L1B5F:	sta     _require_new_down_button
;
; fall_frame_counter = 0;
;
	.dbg	line, "main.c", 2047
	sta     _fall_frame_counter
;
; else if ((pad_all & PAD_DOWN) && require_new_down_button == 0)
;
	.dbg	line, "main.c", 2049
	jmp     L1B66
L1B60:	lda     _pad_all
	and     #$04
	beq     L1B66
	lda     _require_new_down_button
	bne     L1B66
;
; fall_frame_counter = MIN(fall_frame_counter, 1);
;
	.dbg	line, "main.c", 2052
	lda     _fall_frame_counter
	bne     L1B64
	jmp     L1B65
L1B64:	lda     #$01
L1B65:	sta     _fall_frame_counter
;
; cur_score += 1;
;
	.dbg	line, "main.c", 2053
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq1
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2054
	lda     _is_last_rotate
	sta     L0FFE
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2055
	lda     #$00
	sta     _is_last_rotate
;
; if (fall_frame_counter == 0)
;
	.dbg	line, "main.c", 2059
L1B66:	lda     _fall_frame_counter
	bne     L1B67
;
; start_delay_remaining = 0;
;
	.dbg	line, "main.c", 2064
	sta     _start_delay_remaining
;
; cur_block.y += 1;
;
	.dbg	line, "main.c", 2066
	inc     _cur_block+1
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2067
	lda     _is_last_rotate
	sta     L0FFE
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2068
	lda     #$00
	sta     _is_last_rotate
;
; fall_frame_counter = fall_rate;
;
	.dbg	line, "main.c", 2069
	lda     _fall_rate
	sta     _fall_frame_counter
;
; if (fall_rate > DELAY_LOCK_LEN)
;
	.dbg	line, "main.c", 2075
L1B67:	lda     _fall_rate
	cmp     #$10
	lda     #$00
	bcc     L1B69
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 2077
	lda     #$01
	sta     _delay_lock_skip
;
; hit = 0;
;
	.dbg	line, "main.c", 2082
	lda     #$00
L1B69:	sta     _hit
;
; if (is_cluster_colliding())
;
	.dbg	line, "main.c", 2085
	jsr     _is_cluster_colliding
	tax
	beq     L10C3
;
; if (delay_lock_remaining == -1)
;
	.dbg	line, "main.c", 2087
	lda     _delay_lock_remaining
	cmp     #$FF
	bne     L10C5
;
; delay_lock_remaining = DELAY_LOCK_LEN - fall_rate;
;
	.dbg	line, "main.c", 2089
	lda     #$0F
	sec
	sbc     _fall_rate
	cmp     #$80
	sta     _delay_lock_remaining
;
; --delay_lock_remaining;
;
	.dbg	line, "main.c", 2095
L10C5:	dec     _delay_lock_remaining
;
; cur_block.y -= 1;
;
	.dbg	line, "main.c", 2101
	dec     _cur_block+1
;
; if (delay_lock_remaining == 0 || delay_lock_skip)
;
	.dbg	line, "main.c", 2102
	lda     _delay_lock_remaining
	beq     L10D0
	lda     _delay_lock_skip
	beq     L10D9
;
; hit = 1;
;
	.dbg	line, "main.c", 2104
L10D0:	lda     #$01
	sta     _hit
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 2105
	lda     L0FFE
	sta     _is_last_rotate
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 2111
L10C3:	lda     #$FF
	sta     _delay_lock_remaining
;
; if (hit)
;
	.dbg	line, "main.c", 2114
L10D9:	lda     _hit
	beq     L10DC
;
; is_tspin = check_tspin();
;
	.dbg	line, "main.c", 2116
	jsr     _check_tspin
	sta     _is_tspin
;
; put_cur_cluster();
;
	.dbg	line, "main.c", 2117
	jsr     _put_cur_cluster
;
; delay_spawn_remaining = DELAY_SPAWN_LEN;
;
	.dbg	line, "main.c", 2120
	lda     #$05
	sta     _delay_spawn_remaining
;
; display_score();
;
	.dbg	line, "main.c", 2121
	jsr     _display_score
;
; display_combo();
;
	.dbg	line, "main.c", 2122
	jmp     _display_combo
;
; }
;
	.dbg	line, "main.c", 2125
L10DC:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ set_block (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_block: near

	.dbg	func, "set_block", "00", extern, "_set_block"

.segment	"CODE"

;
; if (in_y <= BOARD_OOB_END)
;
	.dbg	line, "main.c", 2171
	lda     _in_y
	cmp     #$04
;
; return;
;
	.dbg	line, "main.c", 2174
	bcc     L111B
;
; address = get_ppu_addr(cur_nt, (in_x << 3) + BOARD_START_X_PX, (in_y << 3) + BOARD_START_Y_PX);
;
	.dbg	line, "main.c", 2177
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     _in_x
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
	lda     _in_y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(in_id, address);
;
	.dbg	line, "main.c", 2178
	lda     _in_id
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; game_board[TILE_TO_BOARD_INDEX(in_x, in_y)] = in_id;
;
	.dbg	line, "main.c", 2181
	ldy     _in_y
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _in_x
	bcc     L1B70
	inx
	clc
L1B70:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	lda     _in_id
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2182
L111B:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ set_block_nt (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_block_nt: near

	.dbg	func, "set_block_nt", "00", extern, "_set_block_nt"
	.dbg	sym, "x", "00", auto, 3
	.dbg	sym, "y", "00", auto, 2
	.dbg	sym, "id", "00", auto, 1
	.dbg	sym, "nt", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2185
	jsr     pusha
;
; if (y <= BOARD_OOB_END)
;
	.dbg	line, "main.c", 2186
	ldy     #$02
	lda     (sp),y
	cmp     #$04
;
; return;
;
	.dbg	line, "main.c", 2189
	bcc     L1133
;
; address = get_ppu_addr(nt, (x << 3) + BOARD_START_X_PX, (y << 3) + BOARD_START_Y_PX);
;
	.dbg	line, "main.c", 2192
	jsr     decsp2
	lda     (sp),y
	dey
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$00
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(id, address);
;
	.dbg	line, "main.c", 2193
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; game_board[TILE_TO_BOARD_INDEX(x, y)] = id;
;
	.dbg	line, "main.c", 2195
	ldy     #$02
	lda     (sp),y
	tay
	lda     _board_lookup_y,y
	sta     ptr1
	ldx     #$00
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L1B72
	inx
	clc
L1B72:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2196
L1133:	jmp     incsp4
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ put_cur_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_cur_cluster: near

	.dbg	func, "put_cur_cluster", "00", extern, "_put_cur_cluster"

.segment	"BSS"

L114C:
	.res	1,$00
L114D:
	.res	1,$00

.segment	"CODE"

;
; max_y = 0;
;
	.dbg	line, "main.c", 2214
	lda     #$00
	sta     _max_y
;
; min_y = 0xff; // max
;
	.dbg	line, "main.c", 2215
	lda     #$FF
	sta     _min_y
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2217
	lda     #$00
	sta     L114C
L1B75:	lda     L114C
	cmp     #$04
	bcs     L1153
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 2220
	ldy     L114C
	lda     _cur_cluster,y
	sta     L114D
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2223
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2224
	lda     L114D
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; in_x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2228
	lda     _cur_block
	clc
	adc     _local_ix
	sta     _in_x
;
; in_y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2229
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     _in_y
;
; in_id = cur_cluster.sprite;
;
	.dbg	line, "main.c", 2230
	lda     _cur_cluster+20
	sta     _in_id
;
; if (in_y < min_y)
;
	.dbg	line, "main.c", 2234
	lda     _in_y
	cmp     _min_y
	bcs     L1B76
;
; min_y = in_y;
;
	.dbg	line, "main.c", 2236
	sta     _min_y
;
; if (in_y > max_y)
;
	.dbg	line, "main.c", 2238
L1B76:	lda     _in_y
	sec
	sbc     _max_y
	bcc     L116E
	beq     L116E
;
; max_y = in_y;
;
	.dbg	line, "main.c", 2240
	lda     _in_y
	sta     _max_y
;
; set_block();
;
	.dbg	line, "main.c", 2243
L116E:	jsr     _set_block
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2217
	inc     L114C
	jmp     L1B75
;
; SFX_PLAY_WRAPPER(SOUND_LAND);
;
	.dbg	line, "main.c", 2248
L1153:	lda     _sfx_on
	beq     L1B77
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; cur_block.y = 255;
;
	.dbg	line, "main.c", 2261
L1B77:	lda     #$FF
	sta     _cur_block+1
;
; oam_set(0);
;
	.dbg	line, "main.c", 2265
	lda     #$00
	jsr     _oam_set
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2267
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2268
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2269
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2270
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; if (attack_style == ATTACK_ON_LAND)
;
	.dbg	line, "main.c", 2273
	lda     _attack_style
	bne     L1191
;
; attack_queued = 1;
;
	.dbg	line, "main.c", 2275
	lda     #$01
	sta     _attack_queued
;
; clear_rows_in_data(max_y, 0);
;
	.dbg	line, "main.c", 2284
L1191:	lda     _max_y
	jsr     pusha
	lda     #$00
	jmp     _clear_rows_in_data
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_block_occupied (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_block_occupied: near

	.dbg	func, "is_block_occupied", "00", extern, "_is_block_occupied"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2290
	jsr     pusha
;
; return (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD || game_board[TILE_TO_BOARD_INDEX(x, y)]);
;
	.dbg	line, "main.c", 2291
	ldy     #$00
	lda     (sp),y
	cmp     #$18
	bcs     L1B79
	iny
	lda     (sp),y
	cmp     #$0A
	bcs     L1B79
	dey
	lda     (sp),y
	tay
	lda     _board_lookup_y,y
	sta     ptr1
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L1B78
	inx
L1B78:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L1B79
	tax
	jmp     incsp2
L1B79:	lda     #$01
	ldx     #$00
;
; }
;
	.dbg	line, "main.c", 2292
	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_perfect_clear (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_perfect_clear: near

	.dbg	func, "is_perfect_clear", "00", extern, "_is_perfect_clear"

.segment	"CODE"

;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 2297
	lda     #$00
	sta     _local_ix
	tax
L1B7C:	lda     _local_ix
	cmp     #$0A
	bcs     L1B80
;
; for (local_iy = 0; local_iy <= BOARD_END_Y_PX_BOARD; ++local_iy)
;
	.dbg	line, "main.c", 2299
	lda     #$00
	sta     _local_iy
	tax
L1B7D:	lda     _local_iy
	cmp     #$18
	bcs     L1B7F
;
; if (game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] != 0)
;
	.dbg	line, "main.c", 2301
	ldy     _local_iy
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L1B7B
	inx
L1B7B:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	ldx     #$00
	lda     (ptr1),y
	beq     L1B7E
;
; return 0;
;
	.dbg	line, "main.c", 2303
	txa
	rts
;
; for (local_iy = 0; local_iy <= BOARD_END_Y_PX_BOARD; ++local_iy)
;
	.dbg	line, "main.c", 2299
L1B7E:	inc     _local_iy
	jmp     L1B7D
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 2297
L1B7F:	inc     _local_ix
	jmp     L1B7C
;
; return 1;
;
	.dbg	line, "main.c", 2307
L1B80:	lda     #$01
;
; }
;
	.dbg	line, "main.c", 2308
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_cluster_colliding (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_cluster_colliding: near

	.dbg	func, "is_cluster_colliding", "00", extern, "_is_cluster_colliding"

.segment	"BSS"

L11C0:
	.res	1,$00
L11C1:
	.res	1,$00
L11C2:
	.res	1,$00
L11C3:
	.res	1,$00

.segment	"CODE"

;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2317
	lda     #$00
	sta     L11C2
	tax
L1B84:	lda     L11C2
	cmp     #$04
	bcs     L1B87
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 2320
	ldy     L11C2
	lda     _cur_cluster,y
	sta     L11C3
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2323
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2324
	lda     L11C3
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2326
	lda     _cur_block
	clc
	adc     _local_ix
	sta     L11C0
;
; y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2327
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     L11C1
;
; if (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD || game_board[TILE_TO_BOARD_INDEX(x, y)])
;
	.dbg	line, "main.c", 2329
	cmp     #$18
	bcs     L1B85
	lda     L11C0
	cmp     #$0A
	bcs     L1B85
	ldy     L11C1
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     L11C0
	bcc     L1B83
	inx
L1B83:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L1B85
	tax
	jmp     L1B86
;
; return 1;
;
	.dbg	line, "main.c", 2332
L1B85:	ldx     #$00
	lda     #$01
	rts
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2317
L1B86:	inc     L11C2
	jmp     L1B84
;
; return 0;
;
	.dbg	line, "main.c", 2336
L1B87:	txa
;
; }
;
	.dbg	line, "main.c", 2337
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ morton_compact_one_by_one (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_morton_compact_one_by_one: near

	.dbg	func, "morton_compact_one_by_one", "00", extern, "_morton_compact_one_by_one"
	.dbg	sym, "x", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2672
	jsr     pusha
;
; x &= 0x55;
;
	.dbg	line, "main.c", 2673
	ldy     #$00
	lda     (sp),y
	and     #$55
	sta     (sp),y
;
; x = ((x ^ (x >> 1)) & 0x33);
;
	.dbg	line, "main.c", 2674
	lsr     a
	eor     (sp),y
	and     #$33
	sta     (sp),y
;
; x = ((x ^ (x >> 2)) & 0x0f);
;
	.dbg	line, "main.c", 2675
	lsr     a
	lsr     a
	eor     (sp),y
	and     #$0F
	sta     (sp),y
;
; return x;
;
	.dbg	line, "main.c", 2676
	ldx     #$00
	lda     (sp),y
;
; }
;
	.dbg	line, "main.c", 2677
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_new_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_new_cluster: near

	.dbg	func, "spawn_new_cluster", "00", extern, "_spawn_new_cluster"

.segment	"BSS"

L128D:
	.res	1,$00
L128E:
	.res	1,$00

.segment	"CODE"

;
; id = 0;
;
	.dbg	line, "main.c", 2472
	lda     #$00
	sta     _id
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 2474
	lda     #$FF
	sta     _delay_lock_remaining
;
; require_new_down_button = 1;
;
	.dbg	line, "main.c", 2476
	lda     #$01
	sta     _require_new_down_button
;
; fall_frame_counter = fall_rate;
;
	.dbg	line, "main.c", 2477
	lda     _fall_rate
	sta     _fall_frame_counter
;
; can_hold_cluster = 1;
;
	.dbg	line, "main.c", 2480
	lda     #$01
	sta     _can_hold_cluster
;
; cur_rot = 0;
;
	.dbg	line, "main.c", 2483
	lda     #$00
	sta     _cur_rot
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2484
	sta     _is_last_rotate
;
; memcpy(cur_cluster.def, next_cluster.def, 4 * 4);
;
	.dbg	line, "main.c", 2487
	ldy     #$0F
L12A1:	lda     _next_cluster+4,y
	sta     _cur_cluster+4,y
	dey
	bpl     L12A1
;
; memcpy(cur_cluster.layout, cur_cluster.def[0], 4);
;
	.dbg	line, "main.c", 2488
	ldy     #$03
L12A7:	lda     _cur_cluster+4,y
	sta     _cur_cluster,y
	dey
	bpl     L12A7
;
; cur_cluster.sprite = next_cluster.sprite;
;
	.dbg	line, "main.c", 2489
	lda     _next_cluster+20
	sta     _cur_cluster+20
;
; cur_cluster.id = next_cluster.id;
;
	.dbg	line, "main.c", 2490
	lda     _next_cluster+21
	sta     _cur_cluster+21
;
; cur_block.x = 3; //(BOARD_END_Y_PX_BOARD >> 1);
;
	.dbg	line, "main.c", 2493
	lda     #$03
	sta     _cur_block
;
; cur_block.y = cluster_offsets[cur_cluster.id];
;
	.dbg	line, "main.c", 2494
	ldy     _cur_cluster+21
	lda     _cluster_offsets,y
	sta     _cur_block+1
;
; id = bag[bag_index];
;
	.dbg	line, "main.c", 2507
	ldy     _bag_index
	lda     _bag,y
	sta     _id
;
; if (bag_index == (NUM_CLUSTERS - 1))
;
	.dbg	line, "main.c", 2508
	ldx     #$00
	lda     _bag_index
	cmp     #$06
	bne     L1B8B
;
; randomize_bag(bag, NUM_CLUSTERS);
;
	.dbg	line, "main.c", 2510
	lda     #<(_bag)
	ldx     #>(_bag)
	jsr     pushax
	lda     #$07
	jsr     _randomize_bag
;
; bag_index = (bag_index + 1 == NUM_CLUSTERS ? 0 : bag_index + 1);
;
	.dbg	line, "main.c", 2517
	ldx     #$00
L1B8B:	lda     _bag_index
	clc
	adc     #$01
	bcc     L12BF
	inx
L12BF:	cpx     #$00
	bne     L12C1
	cmp     #$07
	bne     L12C1
	txa
	jmp     L1B8C
L12C1:	lda     _bag_index
	clc
	adc     #$01
L1B8C:	sta     _bag_index
;
; next_cluster.id = id;
;
	.dbg	line, "main.c", 2519
	lda     _id
	sta     _next_cluster+21
;
; memcpy(next_cluster.def, cluster_defs_classic[id], (4 * 4));
;
	.dbg	line, "main.c", 2520
	lda     #<(_next_cluster+4)
	ldx     #>(_next_cluster+4)
	jsr     pushax
	ldx     #$00
	lda     _id
	asl     a
	bcc     L1B8A
	inx
	clc
L1B8A:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; memcpy(next_cluster.layout, next_cluster.def[0], 4);
;
	.dbg	line, "main.c", 2521
	ldy     #$03
L12D3:	lda     _next_cluster+4,y
	sta     _next_cluster,y
	dey
	bpl     L12D3
;
; next_cluster.sprite = cluster_sprites[id];
;
	.dbg	line, "main.c", 2522
	ldy     _id
	lda     _cluster_sprites,y
	sta     _next_cluster+20
;
; local_iy = 0;
;
	.dbg	line, "main.c", 2526
	lda     #$00
	sta     _local_iy
;
; local_ix = 0;
;
	.dbg	line, "main.c", 2527
	sta     _local_ix
;
; local_t = next_cluster.sprite;
;
	.dbg	line, "main.c", 2528
	sta     _local_t+1
	lda     _next_cluster+20
	sta     _local_t
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 16));
;
	.dbg	line, "main.c", 2531
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$10
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 24));
;
	.dbg	line, "main.c", 2532
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2534
	lda     #$00
	sta     L128D
L1B8D:	lda     L128D
	cmp     #$04
	bcs     L1B8F
;
; j = next_cluster.layout[i];
;
	.dbg	line, "main.c", 2537
	ldy     L128D
	lda     _next_cluster,y
	sta     L128E
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2540
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2541
	lda     L128E
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; one_vram_buffer(local_t, get_ppu_addr(cur_nt, 120 + (local_ix << 3), (next_cluster.id != 3 ? 16 : 8) + (local_iy << 3))); //8 + (local_iy << 3)
;
	.dbg	line, "main.c", 2543
	lda     _local_t
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$78
	dey
	sta     (sp),y
	lda     _next_cluster+21
	cmp     #$03
	beq     L1B8E
	lda     #$10
	jmp     L1309
L1B8E:	lda     #$08
L1309:	sta     ptr1
	lda     _local_iy
	asl     a
	asl     a
	asl     a
	clc
	adc     ptr1
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2534
	inc     L128D
	jmp     L1B8D
;
; if (state != STATE_OVER && is_cluster_colliding())
;
	.dbg	line, "main.c", 2551
L1B8F:	lda     _state
	cmp     #$06
	beq     L1B90
	jsr     _is_cluster_colliding
	tax
	bne     L130D
L1B90:	rts
;
; put_cur_cluster();
;
	.dbg	line, "main.c", 2555
L130D:	jsr     _put_cur_cluster
;
; go_to_state(STATE_OVER);
;
	.dbg	line, "main.c", 2556
	lda     #$06
	jmp     _go_to_state
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ rotate_cur_cluster (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate_cur_cluster: near

	.dbg	func, "rotate_cur_cluster", "00", extern, "_rotate_cur_cluster"
	.dbg	sym, "dir", "00", auto, 0

.segment	"BSS"

L132C:
	.res	1,$00
L132D:
	.res	1,$00
L132E:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2585
	jsr     pusha
;
; old_rot = cur_rot;
;
	.dbg	line, "main.c", 2588
	lda     _cur_rot
	sta     L132C
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2589
	lda     _is_last_rotate
	sta     L132D
;
; cur_rot = (cur_rot + dir) & 3; // % 4
;
	.dbg	line, "main.c", 2590
	ldy     #$00
	lda     (sp),y
	clc
	adc     _cur_rot
	and     #$03
	sta     _cur_rot
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4);
;
	.dbg	line, "main.c", 2592
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; if (is_cluster_colliding())
;
	.dbg	line, "main.c", 2594
	jsr     _is_cluster_colliding
	tax
	jeq     L1BA4
;
; if (cur_cluster.id != 2) //Is not line cluster
;
	.dbg	line, "main.c", 2596
	lda     _cur_cluster+21
	cmp     #$02
	jeq     L1B9C
;
; if (((old_rot == 0) & (cur_rot == 1)) || ((old_rot == 2) & (cur_rot == 1)))
;
	.dbg	line, "main.c", 2598
	lda     L132C
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1B95
	lda     L132C
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1B96
;
; result = rotate_srs(0);
;
	.dbg	line, "main.c", 2600
L1B95:	lda     #$00
;
; else if (((old_rot == 1) & (cur_rot == 0)) || ((old_rot == 1) & (cur_rot == 2)))
;
	.dbg	line, "main.c", 2602
	jmp     L1BA6
L1B96:	lda     L132C
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1B97
	lda     L132C
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1B98
;
; result = rotate_srs(1);
;
	.dbg	line, "main.c", 2604
L1B97:	lda     #$01
;
; else if (((old_rot == 2) & (cur_rot == 3)) || ((old_rot == 0) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2606
	jmp     L1BA6
L1B98:	lda     L132C
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1B99
	lda     L132C
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1B9A
;
; result = rotate_srs(2);
;
	.dbg	line, "main.c", 2608
L1B99:	lda     #$02
;
; else if (((old_rot == 3) & (cur_rot == 2)) || ((old_rot == 3) & (cur_rot == 0)))
;
	.dbg	line, "main.c", 2610
	jmp     L1BA6
L1B9A:	lda     L132C
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1B9B
	lda     L132C
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	jeq     L13A6
;
; result = rotate_srs(3);
;
	.dbg	line, "main.c", 2612
L1B9B:	lda     #$03
	jsr     _rotate_srs
;
; else
;
	.dbg	line, "main.c", 2615
	jmp     L1B93
;
; if (((old_rot == 0) & (cur_rot == 1)) || ((old_rot == 3) & (cur_rot == 2)))
;
	.dbg	line, "main.c", 2617
L1B9C:	lda     L132C
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1B9D
	lda     L132C
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1B9E
;
; result = rotate_srs(4);
;
	.dbg	line, "main.c", 2619
L1B9D:	lda     #$04
	jsr     _rotate_srs
;
; else if (((old_rot == 1) & (cur_rot == 0)) || ((old_rot == 2) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2621
	jmp     L1B93
L1B9E:	lda     L132C
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1B9F
	lda     L132C
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1BA0
;
; result = rotate_srs(5);
;
	.dbg	line, "main.c", 2623
L1B9F:	lda     #$05
	jsr     _rotate_srs
;
; else if (((old_rot == 1) & (cur_rot == 2)) || ((old_rot == 0) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2625
	jmp     L1B93
L1BA0:	lda     L132C
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1BA1
	lda     L132C
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1BA2
;
; result = rotate_srs(6);
;
	.dbg	line, "main.c", 2627
L1BA1:	lda     #$06
	jsr     _rotate_srs
;
; else if (((old_rot == 2) & (cur_rot == 1)) || ((old_rot == 3) & (cur_rot == 0)))
;
	.dbg	line, "main.c", 2629
	jmp     L1B93
L1BA2:	lda     L132C
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1BA3
	lda     L132C
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L13A6
;
; result = rotate_srs(7);
;
	.dbg	line, "main.c", 2631
L1BA3:	lda     #$07
L1BA6:	jsr     _rotate_srs
;
; else
;
	.dbg	line, "main.c", 2635
	jmp     L1B93
;
; result = 1;
;
	.dbg	line, "main.c", 2637
L1BA4:	lda     #$01
L1B93:	sta     L132E
;
; if (result == 0)
;
	.dbg	line, "main.c", 2640
L13A6:	lda     L132E
	bne     L1BA5
;
; cur_rot = old_rot;
;
	.dbg	line, "main.c", 2642
	lda     L132C
	sta     _cur_rot
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 2643
	lda     L132D
	sta     _is_last_rotate
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4);
;
	.dbg	line, "main.c", 2644
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; SFX_PLAY_WRAPPER(SOUND_BLOCKED);
;
	.dbg	line, "main.c", 2645
	lda     _sfx_on
	beq     L13BD
	lda     #$06
	jsr     pusha
	lda     #$00
;
; else
;
	.dbg	line, "main.c", 2647
	jmp     L1B94
;
; is_last_rotate = 1;
;
	.dbg	line, "main.c", 2649
L1BA5:	lda     #$01
	sta     _is_last_rotate
;
; SFX_PLAY_WRAPPER(SOUND_ROTATE);
;
	.dbg	line, "main.c", 2650
	lda     _sfx_on
	beq     L13BD
	lda     #$00
	jsr     pusha
L1B94:	jsr     _sfx_play
;
; }
;
	.dbg	line, "main.c", 2652
L13BD:	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ rotate_srs (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate_srs: near

	.dbg	func, "rotate_srs", "00", extern, "_rotate_srs"
	.dbg	sym, "case_id", "00", auto, 0

.segment	"BSS"

L13C4:
	.res	1,$00
L13C5:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2655
	jsr     pusha
;
; for (test = 0; test < 5; ++test)
;
	.dbg	line, "main.c", 2658
	lda     #$00
	sta     L13C4
	tax
L1BA8:	lda     L13C4
	cmp     #$05
	bcs     L1BA9
;
; morton = srs_rotate_lookup[case_id][test];
;
	.dbg	line, "main.c", 2660
	lda     (sp,x)
	jsr     mulax5
	clc
	adc     #<(_srs_rotate_lookup)
	tay
	txa
	adc     #>(_srs_rotate_lookup)
	tax
	tya
	clc
	adc     L13C4
	bcc     L1BA7
	inx
L1BA7:	ldy     #$00
	jsr     ldaidx
	sta     L13C5
;
; cur_block.x += (morton_compact_one_by_one(morton >> 0) - 3);
;
	.dbg	line, "main.c", 2661
	jsr     _morton_compact_one_by_one
	sec
	sbc     #$03
	clc
	adc     _cur_block
	sta     _cur_block
;
; cur_block.y += (morton_compact_one_by_one(morton >> 1) - 3);
;
	.dbg	line, "main.c", 2662
	lda     L13C5
	cmp     #$80
	ror     a
	jsr     _morton_compact_one_by_one
	sec
	sbc     #$03
	clc
	adc     _cur_block+1
	sta     _cur_block+1
;
; if (!is_cluster_colliding())
;
	.dbg	line, "main.c", 2663
	jsr     _is_cluster_colliding
	tax
	bne     L13C8
;
; return 1;
;
	.dbg	line, "main.c", 2665
	lda     #$01
	jmp     incsp1
;
; for (test = 0; test < 5; ++test)
;
	.dbg	line, "main.c", 2658
L13C8:	ldx     #$00
	inc     L13C4
	jmp     L1BA8
;
; return 0;
;
	.dbg	line, "main.c", 2668
L1BA9:	txa
;
; }
;
	.dbg	line, "main.c", 2669
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ check_tspin (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_tspin: near

	.dbg	func, "check_tspin", "00", extern, "_check_tspin"

.segment	"BSS"

L10E6:
	.res	1,$00
L10E7:
	.res	1,$00
L10E8:
	.res	1,$00
L10E9:
	.res	1,$00

.segment	"CODE"

;
; result = 0;
;
	.dbg	line, "main.c", 2133
	lda     #$00
	sta     L10E9
;
; if (cur_cluster.id == 4 & is_last_rotate == 1) //Is T cluster
;
	.dbg	line, "main.c", 2134
	lda     _cur_cluster+21
	cmp     #$04
	jsr     booleq
	jsr     pusha0
	lda     _is_last_rotate
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	jeq     L1BAE
;
; j = cur_cluster.layout[2];
;
	.dbg	line, "main.c", 2137
	lda     _cur_cluster+2
	sta     L10E8
;
; local_ix = morton_compact_one_by_one(j >> 0);
;
	.dbg	line, "main.c", 2140
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1);
;
	.dbg	line, "main.c", 2141
	lda     L10E8
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2143
	lda     _cur_block
	clc
	adc     _local_ix
	sta     L10E6
;
; y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2144
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     L10E7
;
; result += is_block_occupied(x + 1, y - 1);
;
	.dbg	line, "main.c", 2146
	lda     L10E6
	clc
	adc     #$01
	jsr     pusha
	lda     L10E7
	sec
	sbc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10E9
	sta     L10E9
;
; result += is_block_occupied(x - 1, y + 1);
;
	.dbg	line, "main.c", 2147
	lda     L10E6
	sec
	sbc     #$01
	jsr     pusha
	lda     L10E7
	clc
	adc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10E9
	sta     L10E9
;
; result += is_block_occupied(x + 1, y + 1);
;
	.dbg	line, "main.c", 2148
	lda     L10E6
	clc
	adc     #$01
	jsr     pusha
	lda     L10E7
	clc
	adc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10E9
	sta     L10E9
;
; result += is_block_occupied(x - 1, y - 1);
;
	.dbg	line, "main.c", 2149
	lda     L10E6
	sec
	sbc     #$01
	jsr     pusha
	lda     L10E7
	sec
	sbc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10E9
	sta     L10E9
;
; if (result >= 3)
;
	.dbg	line, "main.c", 2151
	cmp     #$03
	lda     #$00
	bcc     L1BAC
;
; result = 1;
;
	.dbg	line, "main.c", 2153
	lda     #$01
;
; result = 0;
;
	.dbg	line, "main.c", 2157
L1BAC:	sta     L10E9
;
; return result;
;
	.dbg	line, "main.c", 2161
	ldx     #$00
L1BAE:	lda     L10E9
;
; }
;
	.dbg	line, "main.c", 2162
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ go_to_state (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_go_to_state: near

	.dbg	func, "go_to_state", "00", extern, "_go_to_state"
	.dbg	sym, "new_state", "00", auto, 0

.segment	"BSS"

L13F1:
	.res	1,$00
L13F2:
	.res	1,$00
L13F3:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2680
	jsr     pusha
;
; fade_delay = 5;
;
	.dbg	line, "main.c", 2690
	lda     #$05
	sta     L13F2
;
; prev_state = state;
;
	.dbg	line, "main.c", 2691
	lda     _state
	sta     L13F3
;
; switch (state)
;
	.dbg	line, "main.c", 2693
	lda     _state
;
; }
;
	.dbg	line, "main.c", 2789
	cmp     #$01
	beq     L13FC
	cmp     #$03
	beq     L1405
	cmp     #$04
	beq     L1423
	cmp     #$05
	beq     L141F
	cmp     #$07
	jne     L13FA
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 2698
L13FC:	lda     _music_on
	jeq     L13FA
	lda     #$00
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 2699
	jmp     L13FA
;
; pal_bg(palette_bg);
;
	.dbg	line, "main.c", 2708
L1405:	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; saved_starting_level = cur_level;
;
	.dbg	line, "main.c", 2709
	lda     _cur_level
	sta     _saved_starting_level
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 2710
	lda     _cur_level
	cmp     #$1E
	bcs     L1BAF
	jmp     L1414
L1BAF:	lda     #$1E
L1414:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 2711
	lda     #$FF
	sta     _row_to_clear
;
; start_delay_remaining = START_DELAY;
;
	.dbg	line, "main.c", 2712
	lda     #$78
	sta     _start_delay_remaining
;
; display_level();
;
	.dbg	line, "main.c", 2713
	jsr     _display_level
;
; display_score();
;
	.dbg	line, "main.c", 2714
	jsr     _display_score
;
; break;
;
	.dbg	line, "main.c", 2715
	jmp     L13FA
;
; pal_bright(4);
;
	.dbg	line, "main.c", 2721
L141F:	lda     #$04
	jsr     _pal_bright
;
; break;
;
	.dbg	line, "main.c", 2722
	jmp     L13FA
;
; if (cur_score > high_scores[attack_style])
;
	.dbg	line, "main.c", 2772
L1423:	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	jsr     pusheax
	ldx     #$00
	lda     _attack_style
	jsr     aslax2
	clc
	adc     #<(_high_scores)
	tay
	txa
	adc     #>(_high_scores)
	tax
	tya
	jsr     ldeaxi
	jsr     tosugteax
	beq     L13FA
;
; high_scores[attack_style] = cur_score;
;
	.dbg	line, "main.c", 2774
	ldx     #$00
	lda     _attack_style
	jsr     aslax2
	clc
	adc     #<(_high_scores)
	tay
	txa
	adc     #>(_high_scores)
	tax
	tya
	jsr     pushax
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	ldy     #$00
	jsr     steaxspidx
;
; state = new_state;
;
	.dbg	line, "main.c", 2791
L13FA:	ldy     #$00
	lda     (sp),y
	sta     _state
;
; ticks_in_state_large = 0;
;
	.dbg	line, "main.c", 2793
	tya
	sta     _ticks_in_state_large
	sta     _ticks_in_state_large+1
;
; switch (state)
;
	.dbg	line, "main.c", 2795
	lda     _state
;
; }
;
	.dbg	line, "main.c", 3207
	beq     L1433
	cmp     #$01
	beq     L1442
	cmp     #$02
	beq     L1451
	cmp     #$03
	jeq     L1490
	cmp     #$04
	jeq     L1BB3
	cmp     #$05
	jeq     L14FC
	cmp     #$06
	jeq     L150F
	cmp     #$07
	jeq     L14AA
	jmp     incsp1
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2799
L1433:	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; ppu_off();
;
	.dbg	line, "main.c", 2800
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2801
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(boot_screen);
;
	.dbg	line, "main.c", 2802
	lda     #<(_boot_screen)
	ldx     #>(_boot_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2803
	jsr     _ppu_on_all
;
; break;
;
	.dbg	line, "main.c", 2805
	jmp     incsp1
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2809
L1442:	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; ppu_off();
;
	.dbg	line, "main.c", 2810
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2811
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(ty_screen);
;
	.dbg	line, "main.c", 2812
	lda     #<(_ty_screen)
	ldx     #>(_ty_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2813
	jsr     _ppu_on_all
;
; break;
;
	.dbg	line, "main.c", 2815
	jmp     incsp1
;
; pal_bg(palette_bg);
;
	.dbg	line, "main.c", 2819
L1451:	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	.dbg	line, "main.c", 2820
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 2821
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 2822
	lda     #$00
	sta     _time_of_day
;
; cur_konami_index = 0;
;
	.dbg	line, "main.c", 2823
	sta     _cur_konami_index
;
; if (prev_state == STATE_OPTIONS || prev_state == STATE_BOOT || prev_state == STATE_TY || prev_state == STATE_SOUND_TEST || prev_state == STATE_HIGH_SCORE_TABLE)
;
	.dbg	line, "main.c", 2828
	lda     L13F3
	cmp     #$03
	beq     L1BB1
	lda     L13F3
	beq     L1BB1
	cmp     #$01
	beq     L1BB1
	cmp     #$07
	beq     L1BB1
	cmp     #$08
	bne     L1BB2
;
; oam_clear();
;
	.dbg	line, "main.c", 2830
L1BB1:	jsr     _oam_clear
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 2831
	jsr     _draw_menu_sprites
;
; ppu_off();
;
	.dbg	line, "main.c", 2833
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2834
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 2835
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2836
	jsr     _ppu_on_all
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 2840
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; else
;
	.dbg	line, "main.c", 2843
	jmp     incsp1
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2845
L1BB2:	lda     L13F3
	cmp     #$06
	bne     L1475
;
; fade_to_black();
;
	.dbg	line, "main.c", 2847
	jsr     _fade_to_black
;
; reset_gameplay_area();
;
	.dbg	line, "main.c", 2850
L1475:	jsr     _reset_gameplay_area
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 2852
	jsr     _draw_menu_sprites
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 2854
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, 0x1df); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 2855
	jsr     push0
	ldx     #$01
	lda     #$DF
	jsr     _scroll
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 2856
	lda     _music_on
	beq     L147F
	lda     #$00
	jsr     _music_play
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 2861
L147F:	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2864
	lda     L13F3
	cmp     #$06
	beq     L1BB6
;
; }
;
	.dbg	line, "main.c", 3208
	jmp     incsp1
;
; fade_from_black();
;
	.dbg	line, "main.c", 2866
L1BB6:	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 2870
	jmp     incsp1
;
; oam_clear();
;
	.dbg	line, "main.c", 2875
L1490:	jsr     _oam_clear
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2880
	jsr     _clear_vram_buffer
;
; ppu_off();
;
	.dbg	line, "main.c", 2882
	jsr     _ppu_off
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2903
	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2907
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(options_screen);
;
	.dbg	line, "main.c", 2913
	lda     #<(_options_screen)
	ldx     #>(_options_screen)
	jsr     _vram_unrle
;
; cur_level %= 10;
;
	.dbg	line, "main.c", 2922
	lda     _cur_level
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	sta     _cur_level
;
; cur_option = 0;
;
	.dbg	line, "main.c", 2923
	lda     #$00
	sta     _cur_option
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2925
	jsr     _ppu_on_all
;
; display_options();
;
	.dbg	line, "main.c", 2927
	jsr     _display_options
;
; delay(1);
;
	.dbg	line, "main.c", 2929
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2930
	jsr     _clear_vram_buffer
;
; display_highscore();
;
	.dbg	line, "main.c", 2931
	jsr     _display_highscore
;
; break;
;
	.dbg	line, "main.c", 2934
	jmp     incsp1
;
; oam_clear();
;
	.dbg	line, "main.c", 2940
L14AA:	jsr     _oam_clear
;
; ppu_off(); // screen off
;
	.dbg	line, "main.c", 2941
	jsr     _ppu_off
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2943
	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2944
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(sound_screen);
;
	.dbg	line, "main.c", 2945
	lda     #<(_sound_screen)
	ldx     #>(_sound_screen)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "main.c", 2947
	jsr     _ppu_on_all
;
; test_song = test_sound = 0;
;
	.dbg	line, "main.c", 2949
	lda     #$00
	sta     _test_sound
	sta     _test_song
;
; test_song_active = 0xff;
;
	.dbg	line, "main.c", 2950
	lda     #$FF
	sta     _test_song_active
;
; display_song();
;
	.dbg	line, "main.c", 2952
	jsr     _display_song
;
; display_sound();
;
	.dbg	line, "main.c", 2953
	jsr     _display_sound
;
; break;
;
	.dbg	line, "main.c", 2955
	jmp     incsp1
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2962
L1BB3:	lda     L13F3
	cmp     #$06
	bne     L1BB4
;
; reset_gameplay_area();
;
	.dbg	line, "main.c", 2964
	jsr     _reset_gameplay_area
;
; if (prev_state != STATE_PAUSE)
;
	.dbg	line, "main.c", 2967
L1BB4:	lda     L13F3
	cmp     #$05
	jeq     L1BB5
;
; oam_clear();
;
	.dbg	line, "main.c", 2969
	jsr     _oam_clear
;
; if (prev_state == STATE_OPTIONS)
;
	.dbg	line, "main.c", 2983
	lda     L13F3
	cmp     #$03
	bne     L14CE
;
; scroll_y = 0;
;
	.dbg	line, "main.c", 2986
	lda     #$00
	sta     _scroll_y
	sta     _scroll_y+1
;
; while (scroll_y < 240)
;
	.dbg	line, "main.c", 2988
	jmp     L14CE
;
; scroll(0, scroll_y);
;
	.dbg	line, "main.c", 2990
L14CC:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; delay(1);
;
	.dbg	line, "main.c", 2991
	lda     #$01
	jsr     _delay
;
; scroll_y += 4;
;
	.dbg	line, "main.c", 2992
	lda     #$04
	clc
	adc     _scroll_y
	sta     _scroll_y
	bcc     L14CE
	inc     _scroll_y+1
;
; while (scroll_y < 240)
;
	.dbg	line, "main.c", 2988
L14CE:	lda     _scroll_y+1
	cmp     #$00
	bne     L14D0
	lda     _scroll_y
	cmp     #$F0
L14D0:	bcc     L14CC
;
; scroll_y = 239;
;
	.dbg	line, "main.c", 2995
	ldx     #$00
	lda     #$EF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, scroll_y);
;
	.dbg	line, "main.c", 2996
	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 2999
	jsr     _spawn_new_cluster
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 3001
	jsr     _spawn_new_cluster
;
; memfill(attack_row_status, 0, BOARD_WIDTH);
;
	.dbg	line, "main.c", 3003
	jsr     decsp3
	lda     #<(_attack_row_status)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_attack_row_status)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$0A
	jsr     _memfill
;
; srand(tick_count_large);
;
	.dbg	line, "main.c", 3006
	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     _srand
;
; i = rand() % BOARD_WIDTH;
;
	.dbg	line, "main.c", 3009
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	sta     L13F1
;
; attack_row_status[i] = 1;
;
	.dbg	line, "main.c", 3010
	ldy     L13F1
	lda     #$01
	sta     _attack_row_status,y
;
; require_new_down_button = 1;
;
	.dbg	line, "main.c", 3012
	sta     _require_new_down_button
;
; if (attack_style == ATTACK_ON_TIME)
;
	.dbg	line, "main.c", 3013
	lda     _attack_style
	cmp     #$01
	bne     L1BB5
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 3015
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; cur_gameplay_music = select_gameplay_music;
;
	.dbg	line, "main.c", 3026
L1BB5:	lda     _select_gameplay_music
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(select_gameplay_music);
;
	.dbg	line, "main.c", 3027
	lda     _music_on
	bne     L1BB7
;
; }
;
	.dbg	line, "main.c", 3208
	jmp     incsp1
;
; MUSIC_PLAY_WRAPPER(select_gameplay_music);
;
	.dbg	line, "main.c", 3027
L1BB7:	lda     _select_gameplay_music
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 3030
	jmp     incsp1
;
; pal_bright(2);
;
	.dbg	line, "main.c", 3035
L14FC:	lda     #$02
	jsr     _pal_bright
;
; if (select_gameplay_music == MUSIC_MUSICA)
;
	.dbg	line, "main.c", 3036
	lda     _select_gameplay_music
	cmp     #$04
	bne     L14FF
;
; music_stop();
;
	.dbg	line, "main.c", 3038
	jsr     _music_stop
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_PAUSE);
;
	.dbg	line, "main.c", 3039
	lda     _music_on
	bne     L1BB8
;
; }
;
	.dbg	line, "main.c", 3208
	jmp     incsp1
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_PAUSE);
;
	.dbg	line, "main.c", 3039
L1BB8:	lda     #$09
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; else
;
	.dbg	line, "main.c", 3041
	jmp     incsp1
;
; MUSIC_PLAY_WRAPPER(MUSIC_PAUSE);
;
	.dbg	line, "main.c", 3043
L14FF:	lda     _music_on
	bne     L1BB9
;
; }
;
	.dbg	line, "main.c", 3208
	jmp     incsp1
;
; MUSIC_PLAY_WRAPPER(MUSIC_PAUSE);
;
	.dbg	line, "main.c", 3043
L1BB9:	lda     #$03
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 3045
	jmp     incsp1
;
; delay(1);
;
	.dbg	line, "main.c", 3051
L150F:	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3052
	jsr     _clear_vram_buffer
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3055
	jsr     _draw_gameplay_sprites
;
; music_stop();
;
	.dbg	line, "main.c", 3057
	jsr     _music_stop
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_GAMEOVER);
;
	.dbg	line, "main.c", 3058
	lda     _music_on
	beq     L1515
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (music_on)
;
	.dbg	line, "main.c", 3062
L1515:	lda     _music_on
	beq     L151B
;
; delay(120);
;
	.dbg	line, "main.c", 3064
	lda     #$78
	jsr     _delay
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_GAMEOVER_SONG);
;
	.dbg	line, "main.c", 3069
L151B:	lda     _music_on
	beq     L151F
	lda     #$0C
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_bright(5);
;
	.dbg	line, "main.c", 3075
L151F:	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 3076
	lda     L13F2
	jsr     _delay
;
; pal_bright(6);
;
	.dbg	line, "main.c", 3077
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 3078
	lda     L13F2
	jsr     _delay
;
; pal_bright(7);
;
	.dbg	line, "main.c", 3079
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 3080
	lda     L13F2
	jsr     _delay
;
; pal_bright(8);
;
	.dbg	line, "main.c", 3081
	lda     #$08
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 3082
	lda     L13F2
	jsr     _delay
;
; address = get_ppu_addr(cur_nt, 96, 14 << 3);
;
	.dbg	line, "main.c", 3084
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("GAME OVER!", 10, address);
;
	.dbg	line, "main.c", 3085
	jsr     decsp3
	lda     #<(L153B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L153B)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; address = get_ppu_addr(cur_nt, 96, 15 << 3);
;
	.dbg	line, "main.c", 3087
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$78
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("A-RESTART ", 10, address);
;
	.dbg	line, "main.c", 3088
	jsr     decsp3
	lda     #<(L1545)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1545)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; address = get_ppu_addr(cur_nt, 96, 16 << 3);
;
	.dbg	line, "main.c", 3089
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("B-QUIT    ", 10, address);
;
	.dbg	line, "main.c", 3090
	jsr     decsp3
	lda     #<(L154F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L154F)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; pal_bright(7);
;
	.dbg	line, "main.c", 3092
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 3093
	lda     L13F2
	jsr     _delay
;
; pal_bright(6);
;
	.dbg	line, "main.c", 3094
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 3095
	lda     L13F2
	jsr     _delay
;
; pal_bright(5);
;
	.dbg	line, "main.c", 3096
	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 3097
	lda     L13F2
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "main.c", 3098
	lda     #$04
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 3099
	lda     L13F2
	jsr     _delay
;
; break;
;
	.dbg	line, "main.c", 3100
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ inc_lines_cleared (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inc_lines_cleared: near

	.dbg	func, "inc_lines_cleared", "00", extern, "_inc_lines_cleared"

.segment	"BSS"

L1565:
	.res	1,$00

.segment	"CODE"

;
; ++lines_cleared_one;
;
	.dbg	line, "main.c", 3213
	inc     _lines_cleared_one
;
; if (lines_cleared_one == 10)
;
	.dbg	line, "main.c", 3215
	lda     _lines_cleared_one
	cmp     #$0A
	beq     L1BC2
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3271
	jmp     _display_lines_cleared
;
; lines_total = (lines_cleared_hundred * 10) + lines_cleared_ten;
;
	.dbg	line, "main.c", 3218
L1BC2:	ldx     #$00
	lda     _lines_cleared_hundred
	jsr     mulax10
	clc
	adc     _lines_cleared_ten
	sta     L1565
;
; if (cur_level <= lines_total)
;
	.dbg	line, "main.c", 3220
	lda     _cur_level
	sec
	sbc     L1565
	sta     tmp1
	lda     tmp1
	beq     L1BBC
	bcs     L1BC0
;
; ++cur_level;
;
	.dbg	line, "main.c", 3222
L1BBC:	inc     _cur_level
;
; if (cur_level <= 29)
;
	.dbg	line, "main.c", 3225
	lda     _cur_level
	cmp     #$1E
	bcs     L1BBE
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 3227
	cmp     #$1E
	bcs     L1BBD
	jmp     L157B
L1BBD:	lda     #$1E
L157B:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; else if (cur_level < 40) // raise the floor 10 levels.
;
	.dbg	line, "main.c", 3229
	jmp     L1BC0
L1BBE:	lda     _cur_level
	cmp     #$28
	bcs     L1BC0
;
; if (cur_level == 30)
;
	.dbg	line, "main.c", 3231
	cmp     #$1E
	bne     L1BBF
;
; one_vram_buffer(SKULL_SPRITE, get_ppu_addr(cur_nt, 4 << 3, 9 << 3)); // skull
;
	.dbg	line, "main.c", 3233
	lda     #$3B
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; kill_row_queued = 1;
;
	.dbg	line, "main.c", 3235
L1BBF:	lda     #$01
	sta     _kill_row_queued
;
; ++time_of_day;
;
	.dbg	line, "main.c", 3239
L1BC0:	inc     _time_of_day
;
; if (time_of_day >= NUM_TIMES_OF_DAY)
;
	.dbg	line, "main.c", 3240
	lda     _time_of_day
	cmp     #$08
	ldx     #$00
	bcc     L1BC1
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 3242
	stx     _time_of_day
;
; pal_bg(palette_bg_list[time_of_day]);
;
	.dbg	line, "main.c", 3245
L1BC1:	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	tay
	txa
	adc     #>(_palette_bg_list)
	tax
	tya
	jsr     _pal_bg
;
; memcpy(temp_pal, palette_sp, sizeof(palette_sp));
;
	.dbg	line, "main.c", 3248
	ldy     #$0F
L1599:	lda     _palette_sp,y
	sta     _temp_pal,y
	dey
	bpl     L1599
;
; temp_pal[1] = palette_bg_list[time_of_day][1];
;
	.dbg	line, "main.c", 3250
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temp_pal+1
;
; temp_pal[2] = palette_bg_list[time_of_day][2];
;
	.dbg	line, "main.c", 3251
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+2
;
; temp_pal[3] = palette_bg_list[time_of_day][3];
;
	.dbg	line, "main.c", 3252
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+3
;
; temp_pal[6] = palette_bg_list[time_of_day][14];
;
	.dbg	line, "main.c", 3254
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$0E
	lda     (ptr1),y
	sta     _temp_pal+6
;
; temp_pal[7] = palette_bg_list[time_of_day][15];
;
	.dbg	line, "main.c", 3255
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+7
;
; temp_pal[10] = palette_bg_list[time_of_day][2];
;
	.dbg	line, "main.c", 3257
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     _temp_pal+10
;
; pal_spr(temp_pal);
;
	.dbg	line, "main.c", 3259
	lda     #<(_temp_pal)
	ldx     #>(_temp_pal)
	jsr     _pal_spr
;
; display_level();
;
	.dbg	line, "main.c", 3261
	jsr     _display_level
;
; lines_cleared_one = 0;
;
	.dbg	line, "main.c", 3263
	lda     #$00
	sta     _lines_cleared_one
;
; ++lines_cleared_ten;
;
	.dbg	line, "main.c", 3264
	inc     _lines_cleared_ten
;
; if (lines_cleared_ten == 10)
;
	.dbg	line, "main.c", 3265
	lda     _lines_cleared_ten
	cmp     #$0A
	bne     L15BE
;
; lines_cleared_ten = 0;
;
	.dbg	line, "main.c", 3267
	lda     #$00
	sta     _lines_cleared_ten
;
; ++lines_cleared_hundred;
;
	.dbg	line, "main.c", 3268
	inc     _lines_cleared_hundred
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3271
L15BE:	jmp     _display_lines_cleared
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_lines_cleared (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_lines_cleared: near

	.dbg	func, "display_lines_cleared", "00", extern, "_display_lines_cleared"

.segment	"CODE"

;
; one_vram_buffer('0' + lines_cleared_hundred, get_ppu_addr(cur_nt, 4 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3276
	lda     _lines_cleared_hundred
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; one_vram_buffer('0' + lines_cleared_ten, get_ppu_addr(cur_nt, 5 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3277
	lda     _lines_cleared_ten
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$28
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; one_vram_buffer('0' + lines_cleared_one, get_ppu_addr(cur_nt, 6 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3278
	lda     _lines_cleared_one
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jmp     _one_vram_buffer
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_score: near

	.dbg	func, "display_score", "00", extern, "_display_score"

.segment	"BSS"

L15DB:
	.res	4,$00
L15DC:
	.res	1,$00

.segment	"CODE"

;
; temp_score = cur_score; //cur_score;
;
	.dbg	line, "main.c", 3286
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	sta     L15DB
	stx     L15DB+1
	ldy     sreg
	sty     L15DB+2
	ldy     sreg+1
	sty     L15DB+3
;
; multi_vram_buffer_horz("      ", 6, get_ppu_addr(cur_nt, 0, 6 << 3));
;
	.dbg	line, "main.c", 3289
	jsr     decsp3
	lda     #<(L15E0)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L15E0)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; i = 0;
;
	.dbg	line, "main.c", 3291
	lda     #$00
	sta     L15DC
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3292
	jmp     L15EB
;
; unsigned char digit = temp_score % 10;
;
	.dbg	line, "main.c", 3294
L15E9:	lda     L15DB+3
	sta     sreg+1
	lda     L15DB+2
	sta     sreg
	ldx     L15DB+1
	lda     L15DB
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (6 << 3) - (i << 3), 6 << 3));
;
	.dbg	line, "main.c", 3295
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L15DC
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_score = temp_score / 10;
;
	.dbg	line, "main.c", 3297
	lda     L15DB+3
	sta     sreg+1
	lda     L15DB+2
	sta     sreg
	ldx     L15DB+1
	lda     L15DB
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L15DB
	stx     L15DB+1
	ldy     sreg
	sty     L15DB+2
	ldy     sreg+1
	sty     L15DB+3
;
; ++i;
;
	.dbg	line, "main.c", 3298
	inc     L15DC
;
; }
;
	.dbg	line, "main.c", 3299
	jsr     incsp1
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3292
L15EB:	lda     L15DB+3
	sta     sreg+1
	lda     L15DB+2
	sta     sreg
	ldx     L15DB+1
	lda     L15DB
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L15E9
;
; }
;
	.dbg	line, "main.c", 3300
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_combo (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_combo: near

	.dbg	func, "display_combo", "00", extern, "_display_combo"

.segment	"BSS"

L15FB:
	.res	4,$00
L15FC:
	.res	1,$00

.segment	"CODE"

;
; temp_combo = combo_count; //cur_score;
;
	.dbg	line, "main.c", 3307
	lda     _combo_count
	ldx     #$00
	sta     L15FB
	stx     L15FB+1
	stx     L15FB+2
	stx     L15FB+3
;
; multi_vram_buffer_horz("   ", 3, get_ppu_addr(cur_nt, (26 << 3), (8 << 3)));
;
	.dbg	line, "main.c", 3310
	jsr     decsp3
	lda     #<(L1600)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1600)
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; i = 0;
;
	.dbg	line, "main.c", 3312
	lda     #$00
	sta     L15FC
;
; while (temp_combo != 0)
;
	.dbg	line, "main.c", 3313
	jmp     L160D
;
; unsigned char digit = temp_combo % 10;
;
	.dbg	line, "main.c", 3315
L160B:	lda     L15FB+3
	sta     sreg+1
	lda     L15FB+2
	sta     sreg
	ldx     L15FB+1
	lda     L15FB
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (28 << 3) - (i << 3), (8 << 3)));
;
	.dbg	line, "main.c", 3316
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$E0
	jsr     pusha0
	lda     L15FC
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_combo = temp_combo / 10;
;
	.dbg	line, "main.c", 3318
	lda     L15FB+3
	sta     sreg+1
	lda     L15FB+2
	sta     sreg
	ldx     L15FB+1
	lda     L15FB
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L15FB
	stx     L15FB+1
	ldy     sreg
	sty     L15FB+2
	ldy     sreg+1
	sty     L15FB+3
;
; ++i;
;
	.dbg	line, "main.c", 3319
	inc     L15FC
;
; }
;
	.dbg	line, "main.c", 3320
	jsr     incsp1
;
; while (temp_combo != 0)
;
	.dbg	line, "main.c", 3313
L160D:	lda     L15FB+3
	sta     sreg+1
	lda     L15FB+2
	sta     sreg
	ldx     L15FB+1
	lda     L15FB
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L160B
;
; }
;
	.dbg	line, "main.c", 3321
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_highscore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_highscore: near

	.dbg	func, "display_highscore", "00", extern, "_display_highscore"

.segment	"BSS"

L161E:
	.res	4,$00
L161F:
	.res	1,$00

.segment	"CODE"

;
; temp_score = high_scores[attack_style];
;
	.dbg	line, "main.c", 3329
	ldx     #$00
	lda     _attack_style
	jsr     aslax2
	clc
	adc     #<(_high_scores)
	tay
	txa
	adc     #>(_high_scores)
	tax
	tya
	jsr     ldeaxi
	sta     L161E
	stx     L161E+1
	ldy     sreg
	sty     L161E+2
	ldy     sreg+1
	sty     L161E+3
;
; multi_vram_buffer_horz("0000000", 7, get_ppu_addr(0, 17 << 3, 27 << 3));
;
	.dbg	line, "main.c", 3332
	jsr     decsp3
	lda     #<(L1624)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1624)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     #$D8
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; i = 0;
;
	.dbg	line, "main.c", 3334
	lda     #$00
	sta     L161F
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3335
	jmp     L162F
;
; unsigned char digit = temp_score % 10;
;
	.dbg	line, "main.c", 3337
L162D:	lda     L161E+3
	sta     sreg+1
	lda     L161E+2
	sta     sreg
	ldx     L161E+1
	lda     L161E
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(0, (23 << 3) - (i << 3), 27 << 3));
;
	.dbg	line, "main.c", 3338
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$B8
	jsr     pusha0
	lda     L161F
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$D8
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_score = temp_score / 10;
;
	.dbg	line, "main.c", 3340
	lda     L161E+3
	sta     sreg+1
	lda     L161E+2
	sta     sreg
	ldx     L161E+1
	lda     L161E
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L161E
	stx     L161E+1
	ldy     sreg
	sty     L161E+2
	ldy     sreg+1
	sty     L161E+3
;
; ++i;
;
	.dbg	line, "main.c", 3341
	inc     L161F
;
; }
;
	.dbg	line, "main.c", 3342
	jsr     incsp1
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3335
L162F:	lda     L161E+3
	sta     sreg+1
	lda     L161E+2
	sta     sreg
	ldx     L161E+1
	lda     L161E
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L162D
;
; }
;
	.dbg	line, "main.c", 3343
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_level: near

	.dbg	func, "display_level", "00", extern, "_display_level"

.segment	"BSS"

L163F:
	.res	1,$00
L1640:
	.res	1,$00

.segment	"CODE"

;
; temp_level = cur_level;
;
	.dbg	line, "main.c", 3353
	lda     _cur_level
	sta     L163F
;
; i = 0;
;
	.dbg	line, "main.c", 3354
	lda     #$00
	sta     L1640
;
; if (cur_level < 10)
;
	.dbg	line, "main.c", 3356
	tax
	lda     _cur_level
	cmp     #$0A
	jcs     L1BC4
;
; multi_vram_buffer_horz("00", 2, get_ppu_addr(cur_nt, 5 << 3, 9 << 3));
;
	.dbg	line, "main.c", 3358
	jsr     decsp3
	lda     #<(L1648)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1648)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$28
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp_level != 0)
;
	.dbg	line, "main.c", 3361
	jmp     L1651
;
; unsigned char digit = temp_level % 10;
;
	.dbg	line, "main.c", 3363
L1BC3:	lda     L163F
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (6 << 3) - (i << 3), 9 << 3));
;
	.dbg	line, "main.c", 3364
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L1640
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_level = temp_level / 10;
;
	.dbg	line, "main.c", 3366
	lda     L163F
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L163F
;
; ++i;
;
	.dbg	line, "main.c", 3367
	inc     L1640
;
; }
;
	.dbg	line, "main.c", 3368
	jsr     incsp1
;
; while (temp_level != 0)
;
	.dbg	line, "main.c", 3361
L1651:	ldx     #$00
L1BC4:	lda     L163F
	bne     L1BC3
;
; }
;
	.dbg	line, "main.c", 3369
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ clear_rows_in_data (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_rows_in_data: near

	.dbg	func, "clear_rows_in_data", "00", extern, "_clear_rows_in_data"
	.dbg	sym, "start_y", "00", auto, 1
	.dbg	sym, "is_attack", "00", auto, 0

.segment	"BSS"

L1661:
	.res	1,$00
L1662:
	.res	1,$00
L1663:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 3374
	jsr     pusha
;
; i = 0;
;
	.dbg	line, "main.c", 3380
	lda     #$00
	sta     L1662
;
; prev_level = cur_level;
;
	.dbg	line, "main.c", 3381
	lda     _cur_level
	sta     L1663
;
; memfill(lines_cleared_y, 0xff, 4);
;
	.dbg	line, "main.c", 3384
	jsr     decsp3
	lda     #<(_lines_cleared_y)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lines_cleared_y)
	sta     (sp),y
	lda     #$FF
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$04
	jsr     _memfill
;
; for (local_iy = start_y; local_iy > BOARD_OOB_END; --local_iy)
;
	.dbg	line, "main.c", 3387
	ldy     #$01
	lda     (sp),y
	sta     _local_iy
L1BCE:	lda     _local_iy
	cmp     #$04
	jcc     L1BD9
;
; line_complete = 1;
;
	.dbg	line, "main.c", 3391
	lda     #$01
	sta     L1661
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3392
	lda     #$00
	sta     _local_ix
L1BCF:	lda     _local_ix
	cmp     #$0A
	bcs     L1677
;
; if (game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] == 0 || game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] == 1)
;
	.dbg	line, "main.c", 3395
	ldy     _local_iy
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L1BC5
	inx
L1BC5:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	beq     L1BEA
	ldy     _local_iy
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L1BC6
	inx
L1BC6:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	cmp     #$01
	bne     L1BD3
;
; line_complete = 0;
;
	.dbg	line, "main.c", 3399
	lda     #$00
L1BEA:	sta     L1661
;
; break;
;
	.dbg	line, "main.c", 3400
	jmp     L1677
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3392
L1BD3:	inc     _local_ix
	jmp     L1BCF
;
; if (line_complete)
;
	.dbg	line, "main.c", 3407
L1677:	lda     L1661
	beq     L1BD8
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 3421
	lda     #$00
	sta     _local_ix
L1BD4:	lda     _local_ix
	cmp     #$0A
	bcs     L1694
;
; if (attack_row_status[local_ix] > ATTACK_QUEUE_SIZE && attack_row_status[local_ix] - (ATTACK_QUEUE_SIZE + 1) >= (BOARD_END_Y_PX_BOARD - local_iy))
;
	.dbg	line, "main.c", 3423
	ldy     _local_ix
	lda     _attack_row_status,y
	cmp     #$04
	bcc     L1BD7
	ldy     _local_ix
	ldx     #$00
	lda     _attack_row_status,y
	sec
	sbc     #$04
	bcs     L16A4
	dex
L16A4:	jsr     pushax
	lda     #$17
	sec
	sbc     _local_iy
	jsr     tosicmp0
	bcc     L1BD7
;
; hit_reaction_remaining = 60;
;
	.dbg	line, "main.c", 3425
	lda     #$3C
	sta     _hit_reaction_remaining
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 3421
L1BD7:	inc     _local_ix
	jmp     L1BD4
;
; inc_lines_cleared();
;
	.dbg	line, "main.c", 3430
L1694:	jsr     _inc_lines_cleared
;
; memcpy(&game_board[TILE_TO_BOARD_INDEX(0, local_iy)], empty_row, 10);
;
	.dbg	line, "main.c", 3433
	ldy     _local_iy
	lda     _board_lookup_y,y
	clc
	adc     #<(_game_board)
	tay
	lda     #$00
	adc     #>(_game_board)
	tax
	tya
	jsr     pushax
	lda     #<(_empty_row)
	ldx     #>(_empty_row)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _memcpy
;
; lines_cleared_y[i] = local_iy;
;
	.dbg	line, "main.c", 3437
	ldy     L1662
	lda     _local_iy
	sta     _lines_cleared_y,y
;
; ++i;
;
	.dbg	line, "main.c", 3440
	inc     L1662
;
; for (local_iy = start_y; local_iy > BOARD_OOB_END; --local_iy)
;
	.dbg	line, "main.c", 3387
L1BD8:	dec     _local_iy
	jmp     L1BCE
;
; if (i == 0)
;
	.dbg	line, "main.c", 3446
L1BD9:	lda     L1662
	jne     L1BDD
;
; if (is_attack == 0)
;
	.dbg	line, "main.c", 3450
	tay
	lda     (sp),y
	bne     L1BDC
;
; if (combo_count > 1)
;
	.dbg	line, "main.c", 3452
	lda     _combo_count
	cmp     #$02
	tya
	bcc     L1BDB
;
; cur_score += 50 * (combo_count - 1) * (cur_level + 1);
;
	.dbg	line, "main.c", 3454
	tax
	lda     _combo_count
	sec
	sbc     #$01
	bcs     L16C3
	dex
L16C3:	jsr     pushax
	lda     #$32
	jsr     tosumula0
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L16C5
	inx
L16C5:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; combo_count = 0;
;
	.dbg	line, "main.c", 3456
	lda     #$00
L1BDB:	sta     _combo_count
;
; if (is_tspin != 0)
;
	.dbg	line, "main.c", 3458
L1BDC:	lda     _is_tspin
	beq     L16C8
;
; cur_score += (100 * is_tspin * (cur_level + 1));
;
	.dbg	line, "main.c", 3460
	lda     _is_tspin
	jsr     pusha0
	lda     #$64
	jsr     tosumula0
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L16CE
	inx
L16CE:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; display_score();
;
	.dbg	line, "main.c", 3461
	jsr     _display_score
;
; multi_vram_buffer_horz("TSPIN", 5, get_ppu_addr(cur_nt, (27 << 3), (9 << 3)));
;
	.dbg	line, "main.c", 3463
	jsr     decsp3
	lda     #<(L16D1)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L16D1)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; else
;
	.dbg	line, "main.c", 3465
	jmp     incsp2
;
; multi_vram_buffer_horz("     ", 5, get_ppu_addr(cur_nt, (27 << 3), (9 << 3)));
;
	.dbg	line, "main.c", 3467
L16C8:	jsr     decsp3
	lda     #<(L16DC)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L16DC)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; else if (i > 0)
;
	.dbg	line, "main.c", 3470
	jmp     incsp2
L1BDD:	lda     L1662
	bne     L1BF8
;
; }
;
	.dbg	line, "main.c", 3591
	jmp     incsp2
;
; if (prev_level != cur_level)
;
	.dbg	line, "main.c", 3472
L1BF8:	lda     _cur_level
	cmp     L1663
	beq     L1BDF
;
; if (i == 4 || (i == 3 & is_tspin != 0))
;
	.dbg	line, "main.c", 3474
	lda     L1662
	cmp     #$04
	beq     L1BDE
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L16EA
;
; screen_shake_remaining = 5;
;
	.dbg	line, "main.c", 3476
L1BDE:	lda     #$05
	sta     _screen_shake_remaining
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP_MULTI);
;
	.dbg	line, "main.c", 3477
	lda     _sfx_on
	beq     L170B
	lda     #$08
;
; else
;
	.dbg	line, "main.c", 3479
	jmp     L1BEB
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP);
;
	.dbg	line, "main.c", 3481
L16EA:	lda     _sfx_on
	beq     L1BE1
	lda     #$07
;
; else if (i == 4 || (i == 3 & is_tspin != 0))
;
	.dbg	line, "main.c", 3484
	jmp     L1BEB
L1BDF:	lda     L1662
	cmp     #$04
	beq     L1BE0
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L16FE
;
; screen_shake_remaining = 5;
;
	.dbg	line, "main.c", 3488
L1BE0:	ldx     #$00
	lda     #$05
	sta     _screen_shake_remaining
;
; SFX_PLAY_WRAPPER(SOUND_MULTIROW);
;
	.dbg	line, "main.c", 3489
	lda     _sfx_on
	beq     L1BE1
	lda     #$03
;
; else
;
	.dbg	line, "main.c", 3491
	jmp     L1BEB
;
; SFX_PLAY_WRAPPER(SOUND_ROW);
;
	.dbg	line, "main.c", 3494
L16FE:	lda     _sfx_on
	beq     L1BE1
	lda     #$02
L1BEB:	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; switch (i)
;
	.dbg	line, "main.c", 3498
L170B:	ldx     #$00
L1BE1:	lda     L1662
;
; }
;
	.dbg	line, "main.c", 3524
	cmp     #$01
	beq     L1BE2
	cmp     #$02
	beq     L1719
	cmp     #$03
	beq     L171D
	cmp     #$04
	beq     L1721
	jmp     L1721
;
; line_score_mod = 100;
;
	.dbg	line, "main.c", 3502
L1BE2:	lda     #$64
;
; break;
;
	.dbg	line, "main.c", 3503
	jmp     L1BE7
;
; line_score_mod = 300;
;
	.dbg	line, "main.c", 3508
L1719:	ldx     #$01
	lda     #$2C
;
; break;
;
	.dbg	line, "main.c", 3509
	jmp     L1BE7
;
; line_score_mod = 500;
;
	.dbg	line, "main.c", 3514
L171D:	ldx     #$01
	lda     #$F4
;
; break;
;
	.dbg	line, "main.c", 3515
	jmp     L1BE7
;
; line_score_mod = 800;
;
	.dbg	line, "main.c", 3521
L1721:	ldx     #$03
	lda     #$20
L1BE7:	sta     _line_score_mod
	stx     _line_score_mod+1
;
; if (last_lines == i & i == 4) //Back to Back Tetris x 1.5
;
	.dbg	line, "main.c", 3525
	lda     L1662
	cmp     _last_lines
	jsr     booleq
	jsr     pusha0
	lda     L1662
	cmp     #$04
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1BE3
;
; line_score_mod = line_score_mod + (line_score_mod / 2);
;
	.dbg	line, "main.c", 3527
	lda     _line_score_mod
	ldx     _line_score_mod+1
	jsr     shrax1
	clc
	adc     _line_score_mod
	sta     _line_score_mod
	txa
	adc     _line_score_mod+1
	sta     _line_score_mod+1
;
; multi_vram_buffer_horz("BTB-T", 5, get_ppu_addr(cur_nt, (27 << 3), (9 << 3)));
;
	.dbg	line, "main.c", 3528
	jsr     decsp3
	lda     #<(L172B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L172B)
;
; else if (is_tspin != 0)
;
	.dbg	line, "main.c", 3530
	jmp     L1BF7
L1BE3:	lda     _is_tspin
	beq     L1735
;
; multi_vram_buffer_horz("TSPIN", 5, get_ppu_addr(cur_nt, (27 << 3), (9 << 3)));
;
	.dbg	line, "main.c", 3532
	jsr     decsp3
	lda     #<(L1738)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1738)
;
; else
;
	.dbg	line, "main.c", 3534
	jmp     L1BF7
;
; multi_vram_buffer_horz("     ", 5, get_ppu_addr(cur_nt, (27 << 3), (9 << 3)));
;
	.dbg	line, "main.c", 3536
L1735:	jsr     decsp3
	lda     #<(L1743)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1743)
L1BF7:	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; cur_score += (line_score_mod * (4 * is_tspin + 1) * (cur_level + 1));
;
	.dbg	line, "main.c", 3538
	lda     _line_score_mod
	ldx     _line_score_mod+1
	jsr     pushax
	ldx     #$00
	lda     _is_tspin
	jsr     shlax2
	clc
	adc     #$01
	bcc     L1750
	inx
L1750:	jsr     tosumulax
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L1752
	inx
L1752:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; display_score();
;
	.dbg	line, "main.c", 3539
	jsr     _display_score
;
; if (is_attack == 0)
;
	.dbg	line, "main.c", 3540
	ldy     #$00
	lda     (sp),y
	bne     L1BE4
;
; combo_count += 1;
;
	.dbg	line, "main.c", 3542
	inc     _combo_count
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 3545
L1BE4:	lda     _hit_reaction_remaining
	beq     L1758
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3547
	jsr     _draw_gameplay_sprites
;
; reveal_empty_rows_to_nt();
;
	.dbg	line, "main.c", 3550
L1758:	jsr     _reveal_empty_rows_to_nt
;
; if (is_perfect_clear())
;
	.dbg	line, "main.c", 3552
	jsr     _is_perfect_clear
	tax
	jeq     L1BE5
;
; switch (i)
;
	.dbg	line, "main.c", 3554
	lda     L1662
;
; }
;
	.dbg	line, "main.c", 3580
	cmp     #$01
	beq     L1762
	cmp     #$02
	beq     L1766
	cmp     #$03
	beq     L176A
	cmp     #$04
	beq     L176E
	jmp     L176E
;
; line_score_mod = 800;
;
	.dbg	line, "main.c", 3558
L1762:	ldx     #$03
	lda     #$20
;
; break;
;
	.dbg	line, "main.c", 3559
	jmp     L1BE9
;
; line_score_mod = 1200;
;
	.dbg	line, "main.c", 3564
L1766:	ldx     #$04
	lda     #$B0
;
; break;
;
	.dbg	line, "main.c", 3565
	jmp     L1BE9
;
; line_score_mod = 1800;
;
	.dbg	line, "main.c", 3570
L176A:	ldx     #$07
	lda     #$08
;
; break;
;
	.dbg	line, "main.c", 3571
	jmp     L1BE9
;
; line_score_mod = 2000;
;
	.dbg	line, "main.c", 3577
L176E:	ldx     #$07
	lda     #$D0
L1BE9:	sta     _line_score_mod
	stx     _line_score_mod+1
;
; if (last_lines == i & i == 4) //Back to Back Tetris
;
	.dbg	line, "main.c", 3581
	lda     L1662
	cmp     _last_lines
	jsr     booleq
	jsr     pusha0
	lda     L1662
	cmp     #$04
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1772
;
; line_score_mod = 3200;
;
	.dbg	line, "main.c", 3583
	ldx     #$0C
	lda     #$80
	sta     _line_score_mod
	stx     _line_score_mod+1
;
; cur_score += (line_score_mod * (cur_level + 1));
;
	.dbg	line, "main.c", 3585
L1772:	lda     _line_score_mod
	ldx     _line_score_mod+1
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L177A
	inx
L177A:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; multi_vram_buffer_horz("CLEAR", 5, get_ppu_addr(cur_nt, (27 << 3), (9 << 3)));
;
	.dbg	line, "main.c", 3586
	jsr     decsp3
	lda     #<(L177C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L177C)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; last_lines = i; //Set last line equal to lines cleared
;
	.dbg	line, "main.c", 3588
L1BE5:	lda     L1662
	sta     _last_lines
;
; }
;
	.dbg	line, "main.c", 3591
	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ reveal_empty_rows_to_nt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reveal_empty_rows_to_nt: near

	.dbg	func, "reveal_empty_rows_to_nt", "00", extern, "_reveal_empty_rows_to_nt"

.segment	"BSS"

L1788:
	.res	1,$00
L1789:
	.res	1,$00

.segment	"CODE"

;
; delay(1);
;
	.dbg	line, "main.c", 3604
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3605
	jsr     _clear_vram_buffer
;
; for (ix = 4; ix >= 0; --ix)
;
	.dbg	line, "main.c", 3608
	lda     #$04
	sta     L1788
L1BFC:	ldx     L1788
	bpl     L1BFF
;
; try_collapse_empty_row_data();
;
	.dbg	line, "main.c", 3647
	jmp     _try_collapse_empty_row_data
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3613
L1BFF:	lda     #$00
	sta     L1789
L1BFD:	lda     L1789
	cmp     #$14
	bcs     L1798
;
; copy_board_data[iy] = game_board[TILE_TO_BOARD_INDEX(ix, iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3615
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     L1789
	bcc     L17A2
	inx
L17A2:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     L1789
	clc
	adc     #$03
	bcc     L1BFA
	inx
	clc
L1BFA:	adc     #$01
	bcc     L17AA
	inx
L17AA:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     L1788
	bpl     L17AC
	dex
L17AC:	clc
	adc     ptr1
	bcc     L1BF9
	inx
L1BF9:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3613
	inc     L1789
	jmp     L1BFD
;
; copy_board_data,
;
	.dbg	line, "main.c", 3619
L1798:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3620
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3622
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + (ix << 3),
;
	.dbg	line, "main.c", 3623
	lda     L1788
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3624
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3628
	lda     #$00
	sta     L1789
L1BFE:	lda     L1789
	cmp     #$14
	bcs     L17BB
;
; copy_board_data[iy] = game_board[TILE_TO_BOARD_INDEX(BOARD_END_X_PX_BOARD - ix, iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3630
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     L1789
	bcc     L17C5
	inx
L17C5:	jsr     pushax
	ldx     #$00
	lda     L1789
	clc
	adc     #$03
	bcc     L1BFB
	inx
	clc
L1BFB:	adc     #$01
	bcc     L17CD
	inx
L17CD:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	jsr     pusha0
	lda     #$09
	jsr     pusha0
	lda     L1788
	bpl     L17CF
	ldx     #$FF
L17CF:	jsr     tossubax
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3628
	inc     L1789
	jmp     L1BFE
;
; copy_board_data,
;
	.dbg	line, "main.c", 3634
L17BB:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3635
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3637
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + ((BOARD_END_X_PX_BOARD - ix) << 3),
;
	.dbg	line, "main.c", 3638
	lda     #$09
	jsr     pusha0
	lda     L1788
	bpl     L17D9
	ldx     #$FF
L17D9:	jsr     tossubax
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$00
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3639
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; delay(5);
;
	.dbg	line, "main.c", 3642
	lda     #$05
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3643
	jsr     _clear_vram_buffer
;
; for (ix = 4; ix >= 0; --ix)
;
	.dbg	line, "main.c", 3608
	dec     L1788
	jpl     L1BFC
	jmp     L1BFC
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ try_collapse_empty_row_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_try_collapse_empty_row_data: near

	.dbg	func, "try_collapse_empty_row_data", "00", extern, "_try_collapse_empty_row_data"

.segment	"BSS"

L17E3:
	.res	1,$00
L17E4:
	.res	1,$00
L17E5:
	.res	1,$00

.segment	"CODE"

;
; iy = BOARD_END_Y_PX_BOARD - lines_cleared_y[0];
;
	.dbg	line, "main.c", 3660
	lda     #$17
	sec
	sbc     _lines_cleared_y
	sta     L17E4
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3664
	lda     #$00
	sta     L17E3
L1C00:	lda     L17E3
	cmp     #$0A
	bcs     L1C05
;
; if (attack_row_status[ix] > ATTACK_QUEUE_SIZE && attack_row_status[ix] - (ATTACK_QUEUE_SIZE + 1) >= (iy))
;
	.dbg	line, "main.c", 3666
	ldy     L17E3
	lda     _attack_row_status,y
	cmp     #$04
	bcc     L1C04
	ldy     L17E3
	ldx     #$00
	lda     _attack_row_status,y
	sec
	sbc     #$04
	bcs     L17FA
	dex
L17FA:	cmp     L17E4
	txa
	sbc     #$00
	bcs     L17FF
	jmp     L1C04
;
; --attack_row_status[ix];
;
	.dbg	line, "main.c", 3671
L17FD:	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     L17E3
	bcc     L1805
	inx
L1805:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; delay(1);
;
	.dbg	line, "main.c", 3672
	lda     #$01
	jsr     _delay
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3673
	jsr     _draw_gameplay_sprites
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3674
	jsr     _clear_vram_buffer
;
; while (attack_row_status[ix] > 0)
;
	.dbg	line, "main.c", 3668
L17FF:	ldy     L17E3
	lda     _attack_row_status,y
	bne     L17FD
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3664
L1C04:	inc     L17E3
	jmp     L1C00
;
; for (i = 3; i >= 0; --i)
;
	.dbg	line, "main.c", 3680
L1C05:	lda     #$03
	sta     L17E5
L1C06:	ldx     L17E5
	bmi     L180B
;
; iy = lines_cleared_y[i];
;
	.dbg	line, "main.c", 3685
	ldy     L17E5
	lda     _lines_cleared_y,y
	sta     L17E4
;
; if (iy != 0xff)
;
	.dbg	line, "main.c", 3687
	cmp     #$FF
	beq     L1C07
;
; memcpy(game_board_temp, game_board, sizeof(game_board));
;
	.dbg	line, "main.c", 3691
	ldy     #$00
L1820:	lda     _game_board,y
	sta     _game_board_temp,y
	iny
	cpy     #$F0
	bne     L1820
;
; memcpy(&game_board[10], game_board_temp, iy * 10);
;
	.dbg	line, "main.c", 3693
	lda     #<(_game_board+10)
	ldx     #>(_game_board+10)
	jsr     pushax
	lda     #<(_game_board_temp)
	ldx     #>(_game_board_temp)
	jsr     pushax
	ldx     #$00
	lda     L17E4
	jsr     mulax10
	jsr     _memcpy
;
; for (i = 3; i >= 0; --i)
;
	.dbg	line, "main.c", 3680
L1C07:	dec     L17E5
	bpl     L1C06
	jmp     L1C06
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3698
L180B:	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ copy_board_to_nt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copy_board_to_nt: near

	.dbg	func, "copy_board_to_nt", "00", extern, "_copy_board_to_nt"

.segment	"CODE"

;
; if (state == STATE_GAME)
;
	.dbg	line, "main.c", 3707
	lda     _state
	cmp     #$04
	bne     L1C0A
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3709
	jsr     _draw_gameplay_sprites
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3715
L1C0A:	lda     #$00
	sta     _local_ix
L1C0B:	lda     _local_ix
	cmp     #$0A
	bcc     L1C0D
;
; }
;
	.dbg	line, "main.c", 3759
	rts
;
; for (local_iy = 0; local_iy < BOARD_HEIGHT; ++local_iy)
;
	.dbg	line, "main.c", 3718
L1C0D:	lda     #$00
	sta     _local_iy
L1C0C:	lda     _local_iy
	cmp     #$14
	bcs     L1834
;
; copy_board_data[local_iy] = game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3720
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     _local_iy
	bcc     L183E
	inx
L183E:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _local_iy
	clc
	adc     #$03
	bcc     L1C09
	inx
	clc
L1C09:	adc     #$01
	bcc     L1846
	inx
L1846:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     _local_ix
	bcc     L1C08
	inx
L1C08:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (local_iy = 0; local_iy < BOARD_HEIGHT; ++local_iy)
;
	.dbg	line, "main.c", 3718
	inc     _local_iy
	jmp     L1C0C
;
; copy_board_data,
;
	.dbg	line, "main.c", 3729
L1834:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3730
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3732
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + (local_ix << 3),
;
	.dbg	line, "main.c", 3733
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3734
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; if (local_ix % 3 == 0)
;
	.dbg	line, "main.c", 3737
	lda     _local_ix
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	cpx     #$00
	bne     L182D
	cmp     #$00
	bne     L182D
;
; delay(1);
;
	.dbg	line, "main.c", 3743
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3744
	jsr     _clear_vram_buffer
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3715
L182D:	inc     _local_ix
	jmp     L1C0B
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_block_at_bottom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_block_at_bottom: near

	.dbg	func, "add_block_at_bottom", "00", extern, "_add_block_at_bottom"

.segment	"BSS"

L185B:
	.res	1,$00
L185C:
	.res	1,$00
L185D:
	.res	1,$00

.segment	"CODE"

;
; attacks = 0;
;
	.dbg	line, "main.c", 3768
	lda     #$00
	sta     L185D
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3775
	sta     L185B
L1C14:	lda     L185B
	sec
	sbc     #$0A
	bvc     L1869
	eor     #$80
L1869:	jpl     L1C1C
;
; if (attack_row_status[ix] > 0)
;
	.dbg	line, "main.c", 3777
	ldy     L185B
	lda     _attack_row_status,y
	jeq     L1C1B
;
; if (attack_row_status[ix] >= ATTACK_MAX)
;
	.dbg	line, "main.c", 3779
	ldy     L185B
	lda     _attack_row_status,y
	cmp     #$0A
	bcc     L1C15
;
; row_to_clear = ix;
;
	.dbg	line, "main.c", 3791
	lda     L185B
	sta     _row_to_clear
;
; break;
;
	.dbg	line, "main.c", 3798
	jmp     L1C1C
;
; ++attacks;
;
	.dbg	line, "main.c", 3800
L1C15:	inc     L185D
;
; ++attack_row_status[ix];
;
	.dbg	line, "main.c", 3801
	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     L185B
	bcc     L187D
	inx
L187D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (attack_row_status[ix] > ATTACK_QUEUE_SIZE)
;
	.dbg	line, "main.c", 3803
	ldy     L185B
	lda     _attack_row_status,y
	cmp     #$04
	jcc     L1C1B
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
	.dbg	line, "main.c", 3805
	lda     #$17
	sta     L185C
L1C16:	lda     L185C
	cmp     #$04
	ldx     #$00
	jcc     L1C1A
;
; if (game_board[TILE_TO_BOARD_INDEX(ix, iy)] == 0)
;
	.dbg	line, "main.c", 3808
	ldy     L185C
	lda     _board_lookup_y,y
	sta     ptr1
	lda     L185B
	bpl     L1894
	dex
L1894:	clc
	adc     ptr1
	bcc     L1C0E
	inx
L1C0E:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L1C18
;
; for (; iy <= BOARD_END_Y_PX_BOARD; ++iy)
;
	.dbg	line, "main.c", 3811
	tax
L1C17:	lda     L185C
	cmp     #$18
	bcs     L1C1A
;
; game_board[TILE_TO_BOARD_INDEX(ix, iy)] = game_board[TILE_TO_BOARD_INDEX(ix, iy + 1)];
;
	.dbg	line, "main.c", 3813
	ldy     L185C
	lda     _board_lookup_y,y
	sta     ptr1
	lda     L185B
	bpl     L18A3
	dex
L18A3:	clc
	adc     ptr1
	bcc     L1C12
	inx
	clc
L1C12:	adc     #<(_game_board)
	sta     sreg
	txa
	adc     #>(_game_board)
	sta     sreg+1
	ldx     #$00
	lda     L185C
	clc
	adc     #$01
	bcc     L18AA
	inx
L18AA:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     L185B
	bpl     L18AC
	dex
L18AC:	clc
	adc     ptr1
	bcc     L1C10
	inx
L1C10:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (; iy <= BOARD_END_Y_PX_BOARD; ++iy)
;
	.dbg	line, "main.c", 3811
	ldx     #$00
	inc     L185C
	jmp     L1C17
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
	.dbg	line, "main.c", 3805
L1C18:	dec     L185C
	jmp     L1C16
;
; game_board[TILE_TO_BOARD_INDEX(ix, BOARD_END_Y_PX_BOARD)] = garbage_types[cur_garbage_type]; //     0x60; //0xf7; //(attack_row_status[ix] == (ATTACK_QUEUE_SIZE + 1)) ? 0xf9 : 0xf8;
;
	.dbg	line, "main.c", 3820
L1C1A:	lda     L185B
	bpl     L18B4
	dex
L18B4:	clc
	adc     _board_lookup_y+23
	bcc     L1C13
	inx
	clc
L1C13:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     _cur_garbage_type
	lda     _garbage_types,y
	ldy     #$00
	sta     (ptr1),y
;
; ++cur_garbage_type;
;
	.dbg	line, "main.c", 3821
	inc     _cur_garbage_type
;
; if (cur_garbage_type >= NUM_GARBAGE_TYPES)
;
	.dbg	line, "main.c", 3822
	lda     _cur_garbage_type
	cmp     #$03
	bcc     L1C1B
;
; cur_garbage_type = 0;
;
	.dbg	line, "main.c", 3824
	sty     _cur_garbage_type
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3775
L1C1B:	inc     L185B
	jpl     L1C14
	jmp     L1C14
;
; if (attacks == 0)
;
	.dbg	line, "main.c", 3833
L1C1C:	lda     L185D
	bne     L18BD
;
; attack_row_status[rand() % BOARD_WIDTH] = 1;
;
	.dbg	line, "main.c", 3836
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	clc
	adc     #<(_attack_row_status)
	sta     ptr1
	txa
	adc     #>(_attack_row_status)
	sta     ptr1+1
	lda     #$01
	ldy     #$00
	sta     (ptr1),y
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3840
L18BD:	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_row_at_bottom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_row_at_bottom: near

	.dbg	func, "add_row_at_bottom", "00", extern, "_add_row_at_bottom"

.segment	"CODE"

;
; memfill(&game_board[TILE_TO_BOARD_INDEX(0, BOARD_END_Y_PX_BOARD - kill_row_cur)], 1, BOARD_WIDTH);
;
	.dbg	line, "main.c", 3845
	jsr     decsp3
	lda     #$17
	sec
	sbc     _kill_row_cur
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	clc
	adc     #<(_game_board)
	tay
	lda     #$00
	adc     #>(_game_board)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _memfill
;
; ++kill_row_cur;
;
	.dbg	line, "main.c", 3846
	inc     _kill_row_cur
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3847
	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ reset_gameplay_area (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_gameplay_area: near

	.dbg	func, "reset_gameplay_area", "00", extern, "_reset_gameplay_area"

.segment	"CODE"

;
; memfill(game_board, 0, BOARD_SIZE);
;
	.dbg	line, "main.c", 3852
	jsr     decsp3
	lda     #<(_game_board)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_game_board)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$F0
	jsr     _memfill
;
; lines_cleared_one = lines_cleared_ten = lines_cleared_hundred = cur_score = 0;
;
	.dbg	line, "main.c", 3855
	lda     #$00
	sta     _cur_score
	sta     _cur_score+1
	sta     _cur_score+2
	sta     _cur_score+3
	sta     _lines_cleared_hundred
	sta     _lines_cleared_ten
	sta     _lines_cleared_one
;
; held_cluster_id = 255; // Doesn't exist
;
	.dbg	line, "main.c", 3857
	lda     #$FF
	sta     _held_cluster_id
;
; held_cluster_rot = 0;
;
	.dbg	line, "main.c", 3858
	lda     #$00
	sta     _held_cluster_rot
;
; cur_level = saved_starting_level;
;
	.dbg	line, "main.c", 3860
	lda     _saved_starting_level
	sta     _cur_level
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 3861
	cmp     #$1E
	bcs     L1C1D
	lda     _cur_level
	jmp     L18EC
L1C1D:	lda     #$1E
L18EC:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 3862
	lda     #$FF
	sta     _row_to_clear
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 3863
	sta     _delay_lock_remaining
;
; kill_row_cur = 0;
;
	.dbg	line, "main.c", 3864
	lda     #$00
	sta     _kill_row_cur
;
; last_lines = 0;
;
	.dbg	line, "main.c", 3865
	sta     _last_lines
;
; combo_count = 0;
;
	.dbg	line, "main.c", 3866
	sta     _combo_count
;
; start_delay_remaining = START_DELAY;
;
	.dbg	line, "main.c", 3867
	lda     #$78
	sta     _start_delay_remaining
;
; bag_index = 0; //rand() % NUM_CLUSTERS
;
	.dbg	line, "main.c", 3870
	lda     #$00
	sta     _bag_index
;
; randomize_bag(bag, NUM_CLUSTERS);
;
	.dbg	line, "main.c", 3871
	lda     #<(_bag)
	ldx     #>(_bag)
	jsr     pushax
	lda     #$07
	jsr     _randomize_bag
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 3875
	lda     #$00
	sta     _time_of_day
;
; pal_bg(palette_bg_list[time_of_day]);
;
	.dbg	line, "main.c", 3876
	tax
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	tay
	txa
	adc     #>(_palette_bg_list)
	tax
	tya
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	.dbg	line, "main.c", 3877
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; one_vram_buffer(0x8, get_ppu_addr(2, 4 << 3, 9 << 3));
;
	.dbg	line, "main.c", 3880
	lda     #$08
	jsr     pusha
	jsr     decsp2
	lda     #$02
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3882
	jsr     _display_lines_cleared
;
; display_score();
;
	.dbg	line, "main.c", 3883
	jsr     _display_score
;
; display_level();
;
	.dbg	line, "main.c", 3884
	jsr     _display_level
;
; oam_clear();
;
	.dbg	line, "main.c", 3886
	jsr     _oam_clear
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 16));
;
	.dbg	line, "main.c", 3889
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$10
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 24));
;
	.dbg	line, "main.c", 3890
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 32));
;
	.dbg	line, "main.c", 3897
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 40));
;
	.dbg	line, "main.c", 3898
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$28
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; delay(1);
;
	.dbg	line, "main.c", 3900
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3901
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 48));
;
	.dbg	line, "main.c", 3903
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold_sky, 4, get_ppu_addr(cur_nt, 220, 56));
;
	.dbg	line, "main.c", 3904
	jsr     decsp3
	lda     #<(_empty_row_hold_sky)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold_sky)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$38
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3907
	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_song (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_song: near

	.dbg	func, "display_song", "00", extern, "_display_song"

.segment	"BSS"

L1941:
	.res	1,$00
L1942:
	.res	1,$00

.segment	"CODE"

;
; temp = test_song;
;
	.dbg	line, "main.c", 3916
	lda     _test_song
	sta     L1941
;
; i = 0;
;
	.dbg	line, "main.c", 3917
	lda     #$00
	sta     L1942
;
; if (test_song < 100)
;
	.dbg	line, "main.c", 3919
	tax
	lda     _test_song
	cmp     #$64
	bcs     L1C1F
;
; multi_vram_buffer_horz("000", 3, get_ppu_addr(0, (4 << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3921
	jsr     decsp3
	lda     #<(L194A)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L194A)
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	txa
	iny
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3924
	jmp     L1955
;
; unsigned char digit = temp % 10;
;
	.dbg	line, "main.c", 3926
L1C1E:	lda     L1941
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(0, (6 << 3) - (i << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3927
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L1942
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp = temp / 10;
;
	.dbg	line, "main.c", 3929
	lda     L1941
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L1941
;
; ++i;
;
	.dbg	line, "main.c", 3930
	inc     L1942
;
; }
;
	.dbg	line, "main.c", 3931
	jsr     incsp1
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3924
L1955:	ldx     #$00
L1C1F:	lda     L1941
	bne     L1C1E
;
; }
;
	.dbg	line, "main.c", 3932
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_sound (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_sound: near

	.dbg	func, "display_sound", "00", extern, "_display_sound"

.segment	"BSS"

L1966:
	.res	1,$00
L1967:
	.res	1,$00

.segment	"CODE"

;
; temp = test_sound;
;
	.dbg	line, "main.c", 3940
	lda     _test_sound
	sta     L1966
;
; i = 0;
;
	.dbg	line, "main.c", 3941
	lda     #$00
	sta     L1967
;
; if (test_song < 100)
;
	.dbg	line, "main.c", 3943
	tax
	lda     _test_song
	cmp     #$64
	bcs     L1C21
;
; multi_vram_buffer_horz("000", 3, get_ppu_addr(0, (25 << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3945
	jsr     decsp3
	lda     #<(L196F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L196F)
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	txa
	iny
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3948
	jmp     L197A
;
; unsigned char digit = temp % 10;
;
	.dbg	line, "main.c", 3950
L1C20:	lda     L1966
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(0, (27 << 3) - (i << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3951
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$D8
	jsr     pusha0
	lda     L1967
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp = temp / 10;
;
	.dbg	line, "main.c", 3953
	lda     L1966
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L1966
;
; ++i;
;
	.dbg	line, "main.c", 3954
	inc     L1967
;
; }
;
	.dbg	line, "main.c", 3955
	jsr     incsp1
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3948
L197A:	ldx     #$00
L1C21:	lda     L1966
	bne     L1C20
;
; }
;
	.dbg	line, "main.c", 3956
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_options (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_options: near

	.dbg	func, "display_options", "00", extern, "_display_options"

.segment	"DATA"

L198B:
	.byte	$10

.segment	"CODE"

;
; delay(1);
;
	.dbg	line, "main.c", 3965
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3966
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(&starting_levels[cur_level], 1, get_ppu_addr(0, 17 << 3, start_y << 3));
;
	.dbg	line, "main.c", 3968
	jsr     decsp3
	lda     #<(_starting_levels)
	ldx     #>(_starting_levels)
	clc
	adc     _cur_level
	bcc     L1993
	inx
L1993:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L198B
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(attack_style_strings[attack_style], ATTACK_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 2) << 3));
;
	.dbg	line, "main.c", 3969
	jsr     decsp3
	ldx     #$00
	lda     _attack_style
	jsr     mulax7
	clc
	adc     #<(_attack_style_strings)
	tay
	txa
	adc     #>(_attack_style_strings)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L198B
	clc
	adc     #$02
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(off_on_string[music_on], OFF_ON_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 4) << 3));
;
	.dbg	line, "main.c", 3970
	jsr     decsp3
	ldx     #$00
	lda     _music_on
	jsr     aslax2
	clc
	adc     #<(_off_on_string)
	tay
	txa
	adc     #>(_off_on_string)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L198B
	clc
	adc     #$04
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(off_on_string[sfx_on], OFF_ON_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 6) << 3));
;
	.dbg	line, "main.c", 3971
	jsr     decsp3
	ldx     #$00
	lda     _sfx_on
	jsr     aslax2
	clc
	adc     #<(_off_on_string)
	tay
	txa
	adc     #>(_off_on_string)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L198B
	clc
	adc     #$06
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(hard_drop_types[hard_drops_on], HARD_DROP_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 8) << 3));
;
	.dbg	line, "main.c", 3972
	jsr     decsp3
	ldx     #$00
	lda     _hard_drops_on
	jsr     aslax2
	clc
	adc     #<(_hard_drop_types)
	tay
	txa
	adc     #>(_hard_drop_types)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L198B
	clc
	adc     #$08
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y) << 3));
;
	.dbg	line, "main.c", 3975
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L198B
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 2) << 3));
;
	.dbg	line, "main.c", 3976
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L198B
	clc
	adc     #$02
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 4) << 3));
;
	.dbg	line, "main.c", 3977
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L198B
	clc
	adc     #$04
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 6) << 3));
;
	.dbg	line, "main.c", 3978
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L198B
	clc
	adc     #$06
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 8) << 3));
;
	.dbg	line, "main.c", 3979
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L198B
	clc
	adc     #$08
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_icon, 2, get_ppu_addr(0, 7 << 3, (start_y + (cur_option << 1) << 3)));
;
	.dbg	line, "main.c", 3981
	jsr     decsp3
	lda     #<(_option_icon)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_icon)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     _cur_option
	asl     a
	bcc     L1C24
	clc
L1C24:	adc     L198B
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; delay(1);
;
	.dbg	line, "main.c", 3984
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3985
	jmp     _clear_vram_buffer
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ fade_to_black (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_to_black: near

	.dbg	func, "fade_to_black", "00", extern, "_fade_to_black"

.segment	"CODE"

;
; pal_bright(3);
;
	.dbg	line, "main.c", 3991
	lda     #$03
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3992
	lda     #$02
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "main.c", 3993
	lda     #$02
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3994
	lda     #$02
	jsr     _delay
;
; pal_bright(1);
;
	.dbg	line, "main.c", 3995
	lda     #$01
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3996
	lda     #$02
	jsr     _delay
;
; pal_bright(0);
;
	.dbg	line, "main.c", 3997
	lda     #$00
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3998
	lda     #$02
	jmp     _delay
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ fade_from_black (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_from_black: near

	.dbg	func, "fade_from_black", "00", extern, "_fade_from_black"

.segment	"CODE"

;
; pal_bright(1);
;
	.dbg	line, "main.c", 4003
	lda     #$01
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 4004
	lda     #$02
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "main.c", 4005
	lda     #$02
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 4006
	lda     #$02
	jsr     _delay
;
; pal_bright(3);
;
	.dbg	line, "main.c", 4007
	lda     #$03
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 4008
	lda     #$02
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "main.c", 4009
	lda     #$04
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 4010
	lda     #$02
	jmp     _delay
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ difficulty_to_leaderboard_pos (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_difficulty_to_leaderboard_pos: near

	.dbg	func, "difficulty_to_leaderboard_pos", "00", extern, "_difficulty_to_leaderboard_pos"
	.dbg	sym, "dif", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 4014
	jsr     pusha
;
; switch (dif)
;
	.dbg	line, "main.c", 4015
	ldy     #$00
	lda     (sp),y
;
; }
;
	.dbg	line, "main.c", 4033
	beq     L1C26
	cmp     #$01
	beq     L1C27
	cmp     #$02
	beq     L1C28
	cmp     #$03
	beq     L1C29
	jmp     incsp1
;
; in_x = 4;
;
	.dbg	line, "main.c", 4018
L1C26:	lda     #$04
	sta     _in_x
;
; in_y = 12;
;
	.dbg	line, "main.c", 4019
	lda     #$0C
;
; break;
;
	.dbg	line, "main.c", 4020
	jmp     L1C25
;
; in_x = 18;
;
	.dbg	line, "main.c", 4022
L1C27:	lda     #$12
	sta     _in_x
;
; in_y = 12;
;
	.dbg	line, "main.c", 4023
	lda     #$0C
;
; break;
;
	.dbg	line, "main.c", 4024
	jmp     L1C25
;
; in_x = 4;
;
	.dbg	line, "main.c", 4026
L1C28:	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 4028
	jmp     L1C2B
;
; in_x = 18;
;
	.dbg	line, "main.c", 4030
L1C29:	lda     #$12
L1C2B:	sta     _in_x
;
; in_y = 22;
;
	.dbg	line, "main.c", 4031
	lda     #$16
L1C25:	sta     _in_y
;
; }
;
	.dbg	line, "main.c", 4034
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "main.c", 339
	jsr     _ppu_off
;
; bank_spr(1);
;
	.dbg	line, "main.c", 353
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	.dbg	line, "main.c", 355
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 356
	jsr     _clear_vram_buffer
;
; off_nt = 0;
;
	.dbg	line, "main.c", 359
	lda     #$00
	sta     _off_nt
;
; cur_nt = 2;
;
	.dbg	line, "main.c", 360
	lda     #$02
	sta     _cur_nt
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 362
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 363
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; vram_adr(NTADR_C(0, 0));
;
	.dbg	line, "main.c", 364
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(game_area);
;
	.dbg	line, "main.c", 365
	lda     #<(_game_area)
	ldx     #>(_game_area)
	jsr     _vram_unrle
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 367
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, scroll_y); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 368
	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "main.c", 371
	jsr     _ppu_on_all
;
; attack_style = ATTACK_ON_TIME; // ATTACK_ON_LAND;
;
	.dbg	line, "main.c", 375
	lda     #$01
	sta     _attack_style
;
; music_on = 1;
;
	.dbg	line, "main.c", 376
	sta     _music_on
;
; sfx_on = 1;
;
	.dbg	line, "main.c", 377
	sta     _sfx_on
;
; hard_drops_on = 1;
;
	.dbg	line, "main.c", 378
	sta     _hard_drops_on
;
; block_style = BLOCK_STYLE_CLASSIC;
;
	.dbg	line, "main.c", 379
	sta     _block_style
;
; state = 0xff; // uninitialized so that we don't trigger a "leaving state".
;
	.dbg	line, "main.c", 380
	lda     #$FF
	sta     _state
;
; cur_garbage_type = 0;
;
	.dbg	line, "main.c", 381
	lda     #$00
	sta     _cur_garbage_type
;
; pal_bright(0);
;
	.dbg	line, "main.c", 397
	jsr     _pal_bright
;
; go_to_state(STATE_BOOT);
;
	.dbg	line, "main.c", 398
	lda     #$00
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 399
	jsr     _fade_from_black
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	.dbg	line, "main.c", 448
L0D03:	jsr     _ppu_wait_nmi
;
; ++tick_count;
;
	.dbg	line, "main.c", 452
	inc     _tick_count
;
; ++tick_count_large;
;
	.dbg	line, "main.c", 453
	inc     _tick_count_large
	bne     L0D0A
	inc     _tick_count_large+1
;
; ++ticks_in_state_large;
;
	.dbg	line, "main.c", 454
L0D0A:	inc     _ticks_in_state_large
	bne     L0D0C
	inc     _ticks_in_state_large+1
;
; pad1 = pad_poll(0);     // read the first controller
;
	.dbg	line, "main.c", 456
L0D0C:	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	.dbg	line, "main.c", 457
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; pad2 = pad_poll(1);
;
	.dbg	line, "main.c", 459
	lda     #$01
	jsr     _pad_poll
	sta     _pad2
;
; pad2_new = get_pad_new(1);
;
	.dbg	line, "main.c", 460
	lda     #$01
	jsr     _get_pad_new
	sta     _pad2_new
;
; pad_all = pad1 | pad2;
;
	.dbg	line, "main.c", 464
	lda     _pad2
	ora     _pad1
	sta     _pad_all
;
; pad_all_new = pad1_new | pad2_new;
;
	.dbg	line, "main.c", 465
	lda     _pad2_new
	ora     _pad1_new
	sta     _pad_all_new
;
; clear_vram_buffer(); // do at the beginning of each frame
;
	.dbg	line, "main.c", 574
	jsr     _clear_vram_buffer
;
; if (state != STATE_MENU)
;
	.dbg	line, "main.c", 578
	lda     _state
	cmp     #$02
	beq     L1C38
;
; if (pad_all & PAD_A && pad_all & PAD_B && pad_all & PAD_SELECT && pad_all & PAD_START)
;
	.dbg	line, "main.c", 580
	lda     _pad_all
	and     #$80
	beq     L1C38
	lda     _pad_all
	and     #$40
	beq     L1C38
	lda     _pad_all
	and     #$20
	beq     L1C38
	lda     _pad_all
	and     #$10
	beq     L1C38
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 582
	lda     #$02
	jsr     _go_to_state
;
; switch (state)
;
	.dbg	line, "main.c", 587
L1C38:	lda     _state
;
; }
;
	.dbg	line, "main.c", 1539
	beq     L1C39
	cmp     #$01
	beq     L1C3B
	cmp     #$02
	beq     L0D3E
	cmp     #$03
	jeq     L1C42
	cmp     #$04
	jeq     L1C5C
	cmp     #$05
	jeq     L0EB3
	cmp     #$06
	jeq     L1C73
	cmp     #$07
	jeq     L1C75
	jmp     L1C8A
;
; if (tick_count == 120 || pad_all_new & PAD_ALL_BUTTONS)
;
	.dbg	line, "main.c", 591
L1C39:	lda     _tick_count
	cmp     #$78
	beq     L1C3A
	lda     _pad_all_new
	and     #$F0
	jeq     L1C8A
;
; fade_to_black();
;
	.dbg	line, "main.c", 593
L1C3A:	jsr     _fade_to_black
;
; go_to_state(STATE_TY);
;
	.dbg	line, "main.c", 594
	lda     #$01
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 595
	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 597
	jmp     L1C8A
;
; if (tick_count == 104 || pad_all_new & PAD_ALL_BUTTONS)
;
	.dbg	line, "main.c", 602
L1C3B:	lda     _tick_count
	cmp     #$68
	beq     L1C3C
	lda     _pad_all_new
	and     #$F0
	jeq     L1C8A
;
; fade_to_black();
;
	.dbg	line, "main.c", 604
L1C3C:	jsr     _fade_to_black
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 605
	lda     #$02
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 606
	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 608
	jmp     L1C8A
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 612
L0D3E:	jsr     _draw_menu_sprites
;
; if (tick_count % 128 == 0)
;
	.dbg	line, "main.c", 614
	lda     _tick_count
	and     #$7F
	bne     L1C3D
;
; multi_vram_buffer_horz(text_push_start, sizeof(text_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 637
	jsr     decsp3
	lda     #<(_text_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_push_start)
;
; else if (tick_count % 128 == 96)
;
	.dbg	line, "main.c", 640
	jmp     L1CA4
L1C3D:	lda     _tick_count
	and     #$7F
	cmp     #$60
	bne     L1C3E
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 645
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
L1CA4:	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (pad_all_new != 0)
;
	.dbg	line, "main.c", 650
L1C3E:	lda     _pad_all_new
	beq     L1C41
;
; if (pad_all_new & konami_code[cur_konami_index])
;
	.dbg	line, "main.c", 652
	ldy     _cur_konami_index
	lda     _konami_code,y
	and     _pad_all_new
	pha
	pla
	beq     L1C40
;
; ++cur_konami_index;
;
	.dbg	line, "main.c", 654
	inc     _cur_konami_index
;
; else
;
	.dbg	line, "main.c", 656
	jmp     L1C41
;
; cur_konami_index = 0;
;
	.dbg	line, "main.c", 658
L1C40:	sta     _cur_konami_index
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 674
L1C41:	lda     _pad_all_new
	and     #$10
	jeq     L1C8A
;
; srand(tick_count_large);
;
	.dbg	line, "main.c", 677
	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     _srand
;
; if (cur_konami_index >= KONAMI_CODE_LEN)
;
	.dbg	line, "main.c", 680
	lda     _cur_konami_index
	cmp     #$0B
	bcc     L0D65
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP_MULTI);
;
	.dbg	line, "main.c", 682
	lda     _sfx_on
	beq     L0D67
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; music_stop();
;
	.dbg	line, "main.c", 683
L0D67:	jsr     _music_stop
;
; go_to_state(STATE_SOUND_TEST);
;
	.dbg	line, "main.c", 684
	lda     #$07
;
; else
;
	.dbg	line, "main.c", 686
	jmp     L1C2F
;
; fade_to_black();
;
	.dbg	line, "main.c", 689
L0D65:	jsr     _fade_to_black
;
; go_to_state(STATE_OPTIONS);
;
	.dbg	line, "main.c", 690
	lda     #$03
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 691
	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 706
	jmp     L1C8A
;
; if (tick_count % 128 == 0)
;
	.dbg	line, "main.c", 899
L1C42:	lda     _tick_count
	and     #$7F
	bne     L1C43
;
; multi_vram_buffer_horz(text_push_start, sizeof(text_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 901
	jsr     decsp3
	lda     #<(_text_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_push_start)
;
; else if (tick_count % 128 == 96)
;
	.dbg	line, "main.c", 903
	jmp     L1CA5
L1C43:	lda     _tick_count
	and     #$7F
	cmp     #$60
	bne     L1C44
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 905
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
L1CA5:	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 908
L1C44:	lda     _pad_all_new
	and     #$10
	beq     L1C49
;
; music_stop();
;
	.dbg	line, "main.c", 910
	jsr     _music_stop
;
; SFX_PLAY_WRAPPER(SOUND_START);
;
	.dbg	line, "main.c", 911
	lda     _sfx_on
	beq     L0D91
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; fade_to_black();
;
	.dbg	line, "main.c", 913
L0D91:	jsr     _fade_to_black
;
; ppu_off();
;
	.dbg	line, "main.c", 914
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 915
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 916
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 917
	jsr     _ppu_on_all
;
; fade_from_black();
;
	.dbg	line, "main.c", 918
	jsr     _fade_from_black
;
; if (pad_all & PAD_SELECT)
;
	.dbg	line, "main.c", 919
	lda     _pad_all
	and     #$20
	beq     L1C45
;
; select_gameplay_music = MUSIC_MUSICA;
;
	.dbg	line, "main.c", 921
	lda     #$04
;
; else
;
	.dbg	line, "main.c", 923
	jmp     L1C31
;
; select_gameplay_music = MUSIC_GAMEPLAY;
;
	.dbg	line, "main.c", 925
L1C45:	lda     #$01
L1C31:	sta     _select_gameplay_music
;
; if (cur_level == 9 && pad_all & PAD_SELECT)
;
	.dbg	line, "main.c", 928
	lda     _cur_level
	cmp     #$09
	bne     L1C48
	lda     _pad_all
	and     #$20
	beq     L1C48
;
; cur_level = 29;
;
	.dbg	line, "main.c", 930
	lda     #$1D
;
; else if (pad_all & PAD_A)
;
	.dbg	line, "main.c", 932
	jmp     L1C32
L1C48:	lda     _pad_all
	and     #$80
	beq     L0DB2
;
; cur_level += 10;
;
	.dbg	line, "main.c", 934
	lda     #$0A
	clc
	adc     _cur_level
L1C32:	sta     _cur_level
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 936
L0DB2:	lda     #$04
	jsr     _go_to_state
;
; if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 939
L1C49:	lda     _pad_all_new
	and     #$40
	beq     L1C4A
;
; fade_to_black();
;
	.dbg	line, "main.c", 941
	jsr     _fade_to_black
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 942
	lda     #$02
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 943
	jsr     _fade_from_black
;
; else if (pad_all_new & PAD_RIGHT)
;
	.dbg	line, "main.c", 945
	jmp     L1C8A
L1C4A:	lda     _pad_all_new
	and     #$01
	jeq     L1C52
;
; switch (cur_option)
;
	.dbg	line, "main.c", 947
	lda     _cur_option
;
; }
;
	.dbg	line, "main.c", 1013
	beq     L1C4B
	cmp     #$01
	beq     L1C4D
	cmp     #$02
	beq     L1C4E
	cmp     #$03
	beq     L1C50
	cmp     #$04
	beq     L1C51
	jmp     L0DC3
;
; if (cur_level < 9)
;
	.dbg	line, "main.c", 952
L1C4B:	lda     _cur_level
	cmp     #$09
	bcs     L1C4C
;
; ++cur_level;
;
	.dbg	line, "main.c", 954
	inc     _cur_level
;
; else
;
	.dbg	line, "main.c", 956
	jmp     L0DC3
;
; cur_level = 0;
;
	.dbg	line, "main.c", 958
L1C4C:	lda     #$00
	sta     _cur_level
;
; break;
;
	.dbg	line, "main.c", 960
	jmp     L0DC3
;
; if (attack_style < ATTACK_NUM - 1)
;
	.dbg	line, "main.c", 966
L1C4D:	lda     _attack_style
	cmp     #$02
	bcs     L0DC3
;
; ++attack_style;
;
	.dbg	line, "main.c", 968
	inc     _attack_style
;
; display_highscore();
;
	.dbg	line, "main.c", 969
	jsr     _display_highscore
;
; break;
;
	.dbg	line, "main.c", 971
	jmp     L0DC3
;
; if (music_on == 0)
;
	.dbg	line, "main.c", 977
L1C4E:	lda     _music_on
	bne     L0DC3
;
; music_on = 1;
;
	.dbg	line, "main.c", 979
	lda     #$01
	sta     _music_on
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 980
	lda     _music_on
	beq     L1C4F
	lda     #$00
	jsr     _music_play
;
; music_pause(0);
;
	.dbg	line, "main.c", 981
	lda     #$00
L1C4F:	jsr     _music_pause
;
; break;
;
	.dbg	line, "main.c", 992
	jmp     L0DC3
;
; if (sfx_on == 0)
;
	.dbg	line, "main.c", 996
L1C50:	lda     _sfx_on
	bne     L0DC3
;
; sfx_on = 1;
;
	.dbg	line, "main.c", 998
	lda     #$01
	sta     _sfx_on
;
; break;
;
	.dbg	line, "main.c", 1000
	jmp     L0DC3
;
; if (hard_drops_on < NUM_HARD_DROP_SETTINGS - 1)
;
	.dbg	line, "main.c", 1005
L1C51:	lda     _hard_drops_on
	cmp     #$02
	bcs     L0DC3
;
; ++hard_drops_on;
;
	.dbg	line, "main.c", 1007
	inc     _hard_drops_on
;
; SFX_PLAY_WRAPPER(SOUND_MENU_HIGH);
;
	.dbg	line, "main.c", 1015
L0DC3:	lda     _sfx_on
	beq     L0DEB
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1016
L0DEB:	jsr     _display_options
;
; else if (pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 1018
	jmp     L1C8A
L1C52:	lda     _pad_all_new
	and     #$02
	beq     L1C59
;
; switch (cur_option)
;
	.dbg	line, "main.c", 1020
	lda     _cur_option
;
; }
;
	.dbg	line, "main.c", 1094
	beq     L1C53
	cmp     #$01
	beq     L1C55
	cmp     #$02
	beq     L1C56
	cmp     #$03
	beq     L1C57
	cmp     #$04
	beq     L1C58
	jmp     L0DF7
;
; if (cur_level != 0)
;
	.dbg	line, "main.c", 1025
L1C53:	lda     _cur_level
	beq     L1C54
;
; --cur_level;
;
	.dbg	line, "main.c", 1027
	dec     _cur_level
;
; else
;
	.dbg	line, "main.c", 1029
	jmp     L0DF7
;
; cur_level = 9;
;
	.dbg	line, "main.c", 1031
L1C54:	lda     #$09
	sta     _cur_level
;
; break;
;
	.dbg	line, "main.c", 1033
	jmp     L0DF7
;
; if (attack_style != 0)
;
	.dbg	line, "main.c", 1042
L1C55:	lda     _attack_style
	beq     L0DF7
;
; --attack_style;
;
	.dbg	line, "main.c", 1044
	dec     _attack_style
;
; display_highscore();
;
	.dbg	line, "main.c", 1045
	jsr     _display_highscore
;
; break;
;
	.dbg	line, "main.c", 1048
	jmp     L0DF7
;
; if (music_on != 0)
;
	.dbg	line, "main.c", 1057
L1C56:	lda     _music_on
	beq     L0DF7
;
; music_on = 0;
;
	.dbg	line, "main.c", 1059
	lda     #$00
	sta     _music_on
;
; music_pause(1);
;
	.dbg	line, "main.c", 1060
	lda     #$01
	jsr     _music_pause
;
; music_stop();
;
	.dbg	line, "main.c", 1061
	jsr     _music_stop
;
; break;
;
	.dbg	line, "main.c", 1073
	jmp     L0DF7
;
; if (sfx_on != 0)
;
	.dbg	line, "main.c", 1077
L1C57:	lda     _sfx_on
	beq     L0DF7
;
; sfx_on = 0;
;
	.dbg	line, "main.c", 1079
	lda     #$00
	sta     _sfx_on
;
; break;
;
	.dbg	line, "main.c", 1081
	jmp     L0DF7
;
; if (hard_drops_on != 0)
;
	.dbg	line, "main.c", 1085
L1C58:	lda     _hard_drops_on
	beq     L0DF7
;
; --hard_drops_on;
;
	.dbg	line, "main.c", 1087
	dec     _hard_drops_on
;
; SFX_PLAY_WRAPPER(SOUND_MENU_LOW);
;
	.dbg	line, "main.c", 1096
L0DF7:	lda     _sfx_on
	beq     L0E1B
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1097
L0E1B:	jsr     _display_options
;
; else if (pad_all_new & PAD_DOWN)
;
	.dbg	line, "main.c", 1099
	jmp     L1C8A
L1C59:	lda     _pad_all_new
	and     #$04
	beq     L1C5A
;
; cur_option = (cur_option + 1) % NUM_OPTIONS;
;
	.dbg	line, "main.c", 1101
	ldx     #$00
	lda     _cur_option
	clc
	adc     #$01
	bcc     L0E28
	inx
L0E28:	jsr     pushax
	lda     #$05
	jsr     tosumoda0
	sta     _cur_option
;
; SFX_PLAY_WRAPPER(SOUND_MENU_LOW);
;
	.dbg	line, "main.c", 1102
	lda     _sfx_on
	beq     L0E29
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1103
L0E29:	jsr     _display_options
;
; else if (pad_all_new & PAD_UP)
;
	.dbg	line, "main.c", 1105
	jmp     L1C8A
L1C5A:	lda     _pad_all_new
	ldx     #$00
	and     #$08
	jeq     L1C8A
;
; if (cur_option == 0)
;
	.dbg	line, "main.c", 1107
	lda     _cur_option
	bne     L1C5B
;
; cur_option = NUM_OPTIONS;
;
	.dbg	line, "main.c", 1109
	lda     #$05
	sta     _cur_option
;
; cur_option = (cur_option - 1) % NUM_OPTIONS;
;
	.dbg	line, "main.c", 1111
L1C5B:	lda     _cur_option
	sec
	sbc     #$01
	bcs     L0E3A
	dex
L0E3A:	jsr     pushax
	lda     #$05
	jsr     tosumoda0
	sta     _cur_option
;
; SFX_PLAY_WRAPPER(SOUND_MENU_HIGH);
;
	.dbg	line, "main.c", 1112
	lda     _sfx_on
	beq     L0E3B
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1113
L0E3B:	jsr     _display_options
;
; break;
;
	.dbg	line, "main.c", 1116
	jmp     L1C8A
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 1121
L1C5C:	lda     _hit_reaction_remaining
	beq     L1C5D
;
; --hit_reaction_remaining;
;
	.dbg	line, "main.c", 1123
	dec     _hit_reaction_remaining
;
; if (row_to_clear >= 0)
;
	.dbg	line, "main.c", 1126
L1C5D:	ldx     _row_to_clear
	bmi     L1C5E
;
; --attack_row_status[row_to_clear];
;
	.dbg	line, "main.c", 1129
	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     _row_to_clear
	bcc     L0E4D
	inx
L0E4D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (attack_row_status[row_to_clear] == 0)
;
	.dbg	line, "main.c", 1130
	ldy     _row_to_clear
	lda     _attack_row_status,y
	bne     L1C5E
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 1132
	lda     #$FF
	sta     _row_to_clear
;
; if (attack_style != ATTACK_NEVER && attack_queued)
;
	.dbg	line, "main.c", 1137
L1C5E:	lda     _attack_style
	cmp     #$02
	beq     L0E55
	lda     _attack_queued
	beq     L0E55
;
; add_block_at_bottom();
;
	.dbg	line, "main.c", 1141
	jsr     _add_block_at_bottom
;
; clear_rows_in_data(BOARD_END_Y_PX_BOARD, 1);
;
	.dbg	line, "main.c", 1143
	lda     #$17
	jsr     pusha
	lda     #$01
	jsr     _clear_rows_in_data
;
; attack_queued = 0;
;
	.dbg	line, "main.c", 1144
	lda     #$00
	sta     _attack_queued
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 1145
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; if (kill_row_queued)
;
	.dbg	line, "main.c", 1148
L0E55:	lda     _kill_row_queued
	beq     L1C61
;
; add_row_at_bottom();
;
	.dbg	line, "main.c", 1150
	jsr     _add_row_at_bottom
;
; kill_row_queued = 0;
;
	.dbg	line, "main.c", 1151
	lda     #$00
	sta     _kill_row_queued
;
; if (delay_spawn_remaining != -1)
;
	.dbg	line, "main.c", 1156
L1C61:	lda     _delay_spawn_remaining
	cmp     #$FF
	beq     L0E66
;
; if (horz_button_delay > 0)
;
	.dbg	line, "main.c", 1160
	lda     _horz_button_delay
	beq     L1C62
;
; --horz_button_delay;
;
	.dbg	line, "main.c", 1162
	dec     _horz_button_delay
;
; --delay_spawn_remaining;
;
	.dbg	line, "main.c", 1164
L1C62:	dec     _delay_spawn_remaining
;
; if (delay_spawn_remaining == 0)
;
	.dbg	line, "main.c", 1165
	bne     L0E74
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 1167
	jsr     _spawn_new_cluster
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 1168
	lda     #$FF
	sta     _delay_lock_remaining
;
; else
;
	.dbg	line, "main.c", 1171
	jmp     L0E74
;
; movement();
;
	.dbg	line, "main.c", 1173
L0E66:	jsr     _movement
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 1178
L0E74:	jsr     _draw_gameplay_sprites
;
; if (attack_style == ATTACK_ON_TIME && attack_queue_ticks_remaining != 0)
;
	.dbg	line, "main.c", 1182
	lda     _attack_style
	cmp     #$01
	bne     L0E7E
	lda     _attack_queue_ticks_remaining
	ora     _attack_queue_ticks_remaining+1
	beq     L1C8F
;
; --attack_queue_ticks_remaining;
;
	.dbg	line, "main.c", 1184
	lda     _attack_queue_ticks_remaining
	sec
	sbc     #$01
	sta     _attack_queue_ticks_remaining
	bcs     L0E7D
	dec     _attack_queue_ticks_remaining+1
;
; if (attack_queue_ticks_remaining == 0)
;
	.dbg	line, "main.c", 1186
L0E7D:	lda     _attack_queue_ticks_remaining
	ora     _attack_queue_ticks_remaining+1
	bne     L0E7E
;
; attack_queued = 1;
;
	.dbg	line, "main.c", 1188
	lda     #$01
	sta     _attack_queued
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 1189
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; local_t = 0;
;
	.dbg	line, "main.c", 1199
L0E7E:	lda     #$00
L1C8F:	sta     _local_t
	sta     _local_t+1
;
; for (local_iy = 0; local_iy < STRESS_MUSIC_LEVEL * 10; ++local_iy)
;
	.dbg	line, "main.c", 1200
	sta     _local_iy
L1C68:	lda     _local_iy
	cmp     #$46
	bcs     L0E88
;
; if (game_board[local_iy + ((BOARD_OOB_END + 1) * 10)] != 0)
;
	.dbg	line, "main.c", 1202
	ldx     #$00
	lda     _local_iy
	clc
	adc     #$28
	bcc     L0E94
	inx
L0E94:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	beq     L1C6D
;
; local_t = 1;
;
	.dbg	line, "main.c", 1205
	ldx     #$00
	lda     #$01
	sta     _local_t
	stx     _local_t+1
;
; if (cur_gameplay_music == select_gameplay_music && select_gameplay_music == MUSIC_GAMEPLAY)
;
	.dbg	line, "main.c", 1207
	lda     _select_gameplay_music
	cmp     _cur_gameplay_music
	bne     L1C6D
	cmp     #$01
	bne     L1C6D
;
; cur_gameplay_music = MUSIC_STRESS;
;
	.dbg	line, "main.c", 1209
	lda     #$02
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(MUSIC_STRESS);
;
	.dbg	line, "main.c", 1210
	lda     _music_on
	beq     L0E88
	lda     #$02
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 1211
	jmp     L0E88
;
; for (local_iy = 0; local_iy < STRESS_MUSIC_LEVEL * 10; ++local_iy)
;
	.dbg	line, "main.c", 1200
L1C6D:	inc     _local_iy
	jmp     L1C68
;
; if (local_t == 0 && cur_gameplay_music == MUSIC_STRESS && select_gameplay_music == MUSIC_GAMEPLAY)
;
	.dbg	line, "main.c", 1216
L0E88:	lda     _local_t
	ora     _local_t+1
	bne     L1C72
	lda     _cur_gameplay_music
	cmp     #$02
	bne     L1C72
	lda     _select_gameplay_music
	cmp     #$01
	bne     L1C72
;
; cur_gameplay_music = select_gameplay_music;
;
	.dbg	line, "main.c", 1218
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(select_gameplay_music);
;
	.dbg	line, "main.c", 1219
	lda     _music_on
	beq     L1C72
	lda     _select_gameplay_music
	jsr     _music_play
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 1225
L1C72:	lda     _pad_all_new
	and     #$10
	jeq     L1C8A
;
; go_to_state(STATE_PAUSE);
;
	.dbg	line, "main.c", 1227
	lda     #$05
;
; break;
;
	.dbg	line, "main.c", 1248
	jmp     L1C2F
;
; oam_clear();
;
	.dbg	line, "main.c", 1254
L0EB3:	jsr     _oam_clear
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 1265
	lda     _pad_all_new
	and     #$10
	jeq     L1C8A
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 1267
	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 1269
	jmp     L1C2F
;
; if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1284
L1C73:	lda     _pad_all_new
	and     #$40
	beq     L1C74
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 1287
	lda     #$02
	jsr     _go_to_state
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1289
L1C74:	lda     _pad_all_new
	and     #$80
	jeq     L1C8A
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 1292
	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 1296
	jmp     L1C2F
;
; if (pad_all_new & PAD_DOWN && test_song < 15)
;
	.dbg	line, "main.c", 1305
L1C75:	lda     _pad_all_new
	and     #$04
	beq     L1C79
	lda     _test_song
	cmp     #$0F
	bcs     L1C79
;
; ++test_song;
;
	.dbg	line, "main.c", 1307
	inc     _test_song
;
; else if (pad_all_new & PAD_UP && test_song > 0)
;
	.dbg	line, "main.c", 1310
	jmp     L1C33
L1C79:	lda     _pad_all_new
	and     #$08
	beq     L1C7D
	lda     _test_song
	beq     L1C7D
;
; --test_song;
;
	.dbg	line, "main.c", 1312
	dec     _test_song
;
; display_song();
;
	.dbg	line, "main.c", 1313
L1C33:	jsr     _display_song
;
; if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1316
L1C7D:	lda     _pad_all_new
	and     #$40
	beq     L1C7F
;
; if (test_song == test_song_active)
;
	.dbg	line, "main.c", 1318
	lda     _test_song_active
	cmp     _test_song
	bne     L1C7E
;
; test_song_active = 0xff;
;
	.dbg	line, "main.c", 1320
	lda     #$FF
	sta     _test_song_active
;
; music_stop();
;
	.dbg	line, "main.c", 1321
	jsr     _music_stop
;
; else
;
	.dbg	line, "main.c", 1323
	jmp     L1C7F
;
; test_song_active = test_song;
;
	.dbg	line, "main.c", 1325
L1C7E:	lda     _test_song
	sta     _test_song_active
;
; music_play(test_song);
;
	.dbg	line, "main.c", 1327
	lda     _test_song
	jsr     _music_play
;
; if (pad_all_new & PAD_RIGHT && test_sound < 31)
;
	.dbg	line, "main.c", 1334
L1C7F:	lda     _pad_all_new
	and     #$01
	beq     L1C83
	lda     _test_sound
	cmp     #$1F
	bcs     L1C83
;
; ++test_sound;
;
	.dbg	line, "main.c", 1336
	inc     _test_sound
;
; else if (pad_all_new & PAD_LEFT && test_sound > 0)
;
	.dbg	line, "main.c", 1339
	jmp     L1C34
L1C83:	lda     _pad_all_new
	and     #$02
	beq     L1C87
	lda     _test_sound
	beq     L1C87
;
; --test_sound;
;
	.dbg	line, "main.c", 1341
	dec     _test_sound
;
; display_sound();
;
	.dbg	line, "main.c", 1342
L1C34:	jsr     _display_sound
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1345
L1C87:	lda     _pad_all_new
	and     #$80
	beq     L1C88
;
; sfx_play(test_sound, 0);
;
	.dbg	line, "main.c", 1348
	lda     _test_sound
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (pad_all_new & PAD_SELECT || pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 1354
L1C88:	lda     _pad_all_new
	and     #$20
	bne     L1C89
	lda     _pad_all_new
	and     #$10
	beq     L1C8A
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 1356
L1C89:	lda     #$02
L1C2F:	jsr     _go_to_state
;
; if (screen_shake_remaining > 0)
;
	.dbg	line, "main.c", 1543
L1C8A:	lda     _screen_shake_remaining
	beq     L1C8C
;
; --screen_shake_remaining;
;
	.dbg	line, "main.c", 1545
	dec     _screen_shake_remaining
;
; scroll((rand() % 2), scroll_y - (rand() % 2));
;
	.dbg	line, "main.c", 1546
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	jsr     pushax
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	jsr     tossubax
	jsr     _scroll
;
; else
;
	.dbg	line, "main.c", 1548
	jmp     L0D03
;
; scroll(0, scroll_y); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 1550
L1C8C:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; while (1)
;
	.dbg	line, "main.c", 446
	jmp     L0D03
	.dbg	line

.endproc

