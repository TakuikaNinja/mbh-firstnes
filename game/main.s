;
; File generated by cc65 v 2.18 - Git dc4142e
;
	.fopt		compiler,"cc65 v 2.18 - Git dc4142e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "main.c", 103876, 1610361082
	.dbg		file, "LIB/neslib.h", 9361, 1608948989
	.dbg		file, "LIB/nesdoug.h", 6862, 1608948989
	.dbg		file, "BG/game_area.h", 4059, 1609910372
	.dbg		file, "BG/title_screen.h", 2757, 1609916919
	.dbg		file, "BG/boot_screen.h", 1422, 1610339359
	.dbg		file, "BG/options_screen.h", 2359, 1608948989
	.dbg		file, "BG/sound_screen.h", 1418, 1608948989
	.dbg		file, "BG/ty_screen.h", 1872, 1608948989
	.dbg		file, "../include/stdlib.h", 6147, 1608948990
	.dbg		file, "main.h", 27157, 1610359788
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_spr", "00", extern, "_oam_spr"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "oam_set", "00", extern, "_oam_set"
	.dbg		sym, "music_play", "00", extern, "_music_play"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "music_pause", "00", extern, "_music_pause"
	.dbg		sym, "sfx_play", "00", extern, "_sfx_play"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "memfill", "00", extern, "_memfill"
	.dbg		sym, "delay", "00", extern, "_delay"
	.dbg		sym, "set_vram_buffer", "00", extern, "_set_vram_buffer"
	.dbg		sym, "one_vram_buffer", "00", extern, "_one_vram_buffer"
	.dbg		sym, "multi_vram_buffer_horz", "00", extern, "_multi_vram_buffer_horz"
	.dbg		sym, "multi_vram_buffer_vert", "00", extern, "_multi_vram_buffer_vert"
	.dbg		sym, "clear_vram_buffer", "00", extern, "_clear_vram_buffer"
	.dbg		sym, "get_pad_new", "00", extern, "_get_pad_new"
	.dbg		sym, "get_ppu_addr", "00", extern, "_get_ppu_addr"
	.dbg		sym, "rand", "00", extern, "_rand"
	.dbg		sym, "srand", "00", extern, "_srand"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_set
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_memfill
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_multi_vram_buffer_vert
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_ppu_addr
	.export		_game_area
	.export		_title_screen
	.export		_boot_screen
	.export		_options_screen
	.export		_sound_screen
	.export		_ty_screen
	.import		_rand
	.import		_srand
	.export		_tick_count
	.export		_tick_count_large
	.export		_ticks_in_state_large
	.export		_hit_reaction_remaining
	.export		_attack_queue_ticks_remaining
	.export		_attack_delay
	.export		_pad_all
	.export		_pad_all_new
	.export		_pad1
	.export		_pad1_new
	.export		_pad2
	.export		_pad2_new
	.export		_scroll_y
	.export		_cur_option
	.export		_attack_style
	.export		_high_scores
	.export		_music_on
	.export		_sfx_on
	.export		_block_style
	.export		_starting_levels
	.export		_saved_starting_level
	.export		_hard_drops_on
	.export		_hard_drop_hold_remaining
	.export		_hard_drop_tap_required
	.export		_state
	.export		_konami_code
	.export		_cur_konami_index
	.export		_cur_block
	.export		_fall_rate
	.export		_cur_level
	.export		_def_line
	.export		_def_square
	.export		_def_L_rev
	.export		_def_L
	.export		_def_S
	.export		_def_Z
	.export		_def_T
	.export		_cluster_defs_classic
	.export		_bag
	.export		_bag_index
	.export		_randomize_bag
	.export		_swap
	.export		_cur_rot
	.export		_srs_rotate_lookup
	.export		_cur_cluster
	.export		_next_cluster
	.export		_held_cluster_id
	.export		_held_cluster_rot
	.export		_held_cluster_def
	.export		_staging_cluster_id
	.export		_staging_cluster_rot
	.export		_empty_row_hold
	.export		_empty_row_hold_sky
	.export		_can_hold_cluster
	.export		_hold_cluster
	.export		_attack_row_status
	.export		_cluster_sprites
	.export		_cluster_offsets
	.export		_horz_button_delay
	.export		_button_delay
	.export		_require_new_down_button
	.export		_fall_frame_counter
	.export		_lines_cleared_one
	.export		_lines_cleared_ten
	.export		_lines_cleared_hundred
	.export		_cur_score
	.export		_last_lines
	.export		_combo_count
	.export		_cur_nt
	.export		_off_nt
	.export		_hit
	.export		_temp_fall_frame_counter
	.export		_old_x
	.export		_id
	.export		_min_y
	.export		_max_y
	.export		_in_x
	.export		_in_y
	.export		_in_id
	.export		_local_start_x
	.export		_local_start_y
	.export		_local_ix
	.export		_local_iy
	.export		_local_t
	.export		_local_bit
	.export		_local_row_status
	.export		_OOB_TOP
	.export		_test_song
	.export		_test_song_active
	.export		_test_sound
	.export		_cur_gameplay_music
	.export		_select_gameplay_music
	.export		_attack_queued
	.export		_tentacle_offsets
	.export		_garbage_types
	.export		_cur_garbage_type
	.export		_delay_lock_remaining
	.export		_delay_lock_skip
	.export		_delay_spawn_remaining
	.export		_spawn_queued
	.export		_row_to_clear
	.export		_kill_row_cur
	.export		_kill_row_queued
	.export		_start_delay_remaining
	.export		_board_lookup_y
	.export		_mask
	.export		_address
	.export		_time_of_day
	.export		_temp_pal
	.export		_lines_cleared_y
	.export		_line_score_mod
	.export		_game_board
	.export		_game_board_temp
	.export		_empty_row
	.export		_full_row
	.export		_full_col
	.export		_option_empty
	.export		_option_icon
	.export		_copy_board_data
	.export		_palette_bg
	.export		_palette_sp
	.export		_palette_bg_options
	.export		_palette_bg_list
	.export		_fall_rates_per_level
	.export		_attack_style_strings
	.export		_off_on_string
	.export		_block_style_strings
	.export		_hard_drop_types
	.export		_screen_shake_remaining
	.export		_text_push_start
	.export		_clear_push_start
	.export		_metasprite_tentacle_title
	.export		_draw_menu_sprites
	.export		_draw_gameplay_sprites
	.export		_movement
	.export		_set_block
	.export		_set_block_nt
	.export		_put_cur_cluster
	.export		_is_block_occupied
	.export		_is_perfect_clear
	.export		_is_cluster_colliding
	.export		_morton_compact_one_by_one
	.export		_spawn_new_cluster
	.export		_rotate_cur_cluster
	.export		_rotate_srs
	.export		_check_tspin
	.export		_is_tspin
	.export		_is_last_rotate
	.export		_go_to_state
	.export		_inc_lines_cleared
	.export		_display_lines_cleared
	.export		_display_score
	.export		_display_combo
	.export		_display_highscore
	.export		_display_level
	.export		_clear_rows_in_data
	.export		_reveal_empty_rows_to_nt
	.export		_try_collapse_empty_row_data
	.export		_copy_board_to_nt
	.export		_add_block_at_bottom
	.export		_add_row_at_bottom
	.export		_reset_gameplay_area
	.export		_display_song
	.export		_display_sound
	.export		_display_options
	.export		_fade_to_black
	.export		_fade_from_black
	.export		_difficulty_to_leaderboard_pos
	.export		_main

.segment	"DATA"

_high_scores:
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
_state:
	.byte	$00
_cur_block:
	.byte	$00
	.byte	$00
_fall_rate:
	.byte	$30
_cur_level:
	.byte	$00
_cluster_defs_classic:
	.addr	_def_Z
	.addr	_def_S
	.addr	_def_line
	.addr	_def_square
	.addr	_def_T
	.addr	_def_L
	.addr	_def_L_rev
_bag:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
_held_cluster_id:
	.byte	$FF
_held_cluster_rot:
	.byte	$00
_staging_cluster_id:
	.byte	$FF
_staging_cluster_rot:
	.byte	$00
_select_gameplay_music:
	.byte	$01

.segment	"RODATA"

_game_area:
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$BF
	.byte	$14
	.byte	$01
	.byte	$12
	.byte	$09
	.byte	$07
	.byte	$01
	.byte	$11
	.byte	$BF
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$8B
	.byte	$08
	.byte	$CF
	.byte	$14
	.byte	$AE
	.byte	$AF
	.byte	$B7
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$B8
	.byte	$AF
	.byte	$AE
	.byte	$11
	.byte	$CF
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$4C
	.byte	$49
	.byte	$4E
	.byte	$45
	.byte	$53
	.byte	$08
	.byte	$97
	.byte	$98
	.byte	$09
	.byte	$02
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$09
	.byte	$05
	.byte	$BF
	.byte	$BE
	.byte	$A8
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$48
	.byte	$4F
	.byte	$4C
	.byte	$44
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$30
	.byte	$09
	.byte	$02
	.byte	$08
	.byte	$A7
	.byte	$98
	.byte	$09
	.byte	$02
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$09
	.byte	$05
	.byte	$CF
	.byte	$CE
	.byte	$A8
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$12
	.byte	$C7
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$C8
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$53
	.byte	$43
	.byte	$4F
	.byte	$52
	.byte	$45
	.byte	$08
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$12
	.byte	$01
	.byte	$12
	.byte	$11
	.byte	$12
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$30
	.byte	$09
	.byte	$04
	.byte	$08
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$45
	.byte	$56
	.byte	$45
	.byte	$4C
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$12
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$01
	.byte	$12
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$78
	.byte	$79
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$30
	.byte	$30
	.byte	$08
	.byte	$01
	.byte	$12
	.byte	$14
	.byte	$13
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$13
	.byte	$11
	.byte	$03
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$63
	.byte	$64
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$8B
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$79
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$01
	.byte	$04
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$73
	.byte	$74
	.byte	$13
	.byte	$14
	.byte	$1B
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$88
	.byte	$89
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$14
	.byte	$85
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$61
	.byte	$81
	.byte	$94
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$63
	.byte	$64
	.byte	$14
	.byte	$85
	.byte	$01
	.byte	$14
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$86
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$13
	.byte	$14
	.byte	$01
	.byte	$71
	.byte	$91
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$92
	.byte	$73
	.byte	$74
	.byte	$13
	.byte	$00
	.byte	$12
	.byte	$13
	.byte	$86
	.byte	$87
	.byte	$87
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$03
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$01
	.byte	$61
	.byte	$62
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$06
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$01
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$82
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$83
	.byte	$84
	.byte	$03
	.byte	$81
	.byte	$94
	.byte	$81
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$61
	.byte	$62
	.byte	$93
	.byte	$94
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0E
	.byte	$1D
	.byte	$0E
	.byte	$0D
	.byte	$87
	.byte	$A4
	.byte	$1F
	.byte	$72
	.byte	$90
	.byte	$13
	.byte	$91
	.byte	$81
	.byte	$91
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$82
	.byte	$86
	.byte	$0F
	.byte	$0F
	.byte	$1F
	.byte	$86
	.byte	$1E
	.byte	$86
	.byte	$87
	.byte	$0F
	.byte	$A4
	.byte	$0F
	.byte	$1F
	.byte	$72
	.byte	$63
	.byte	$61
	.byte	$62
	.byte	$91
	.byte	$00
	.byte	$09
	.byte	$0B
	.byte	$94
	.byte	$84
	.byte	$00
	.byte	$63
	.byte	$64
	.byte	$1F
	.byte	$0F
	.byte	$A4
	.byte	$1D
	.byte	$00
	.byte	$0F
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$72
	.byte	$73
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$84
	.byte	$94
	.byte	$64
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$86
	.byte	$0F
	.byte	$1F
	.byte	$61
	.byte	$62
	.byte	$81
	.byte	$84
	.byte	$90
	.byte	$00
	.byte	$81
	.byte	$94
	.byte	$72
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$94
	.byte	$73
	.byte	$74
	.byte	$83
	.byte	$84
	.byte	$63
	.byte	$64
	.byte	$63
	.byte	$64
	.byte	$1F
	.byte	$00
	.byte	$62
	.byte	$84
	.byte	$91
	.byte	$94
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$83
	.byte	$84
	.byte	$90
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$82
	.byte	$92
	.byte	$93
	.byte	$93
	.byte	$94
	.byte	$73
	.byte	$74
	.byte	$92
	.byte	$93
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$94
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$2A
	.byte	$2B
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$83
	.byte	$2A
	.byte	$2B
	.byte	$00
	.byte	$82
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$92
	.byte	$93
	.byte	$00
	.byte	$72
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$66
	.byte	$67
	.byte	$B9
	.byte	$10
	.byte	$C9
	.byte	$B9
	.byte	$00
	.byte	$90
	.byte	$29
	.byte	$9C
	.byte	$9D
	.byte	$29
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$29
	.byte	$95
	.byte	$96
	.byte	$29
	.byte	$00
	.byte	$82
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$05
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$05
	.byte	$00
	.byte	$61
	.byte	$BE
	.byte	$AC
	.byte	$AD
	.byte	$BE
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$BE
	.byte	$A5
	.byte	$A6
	.byte	$BE
	.byte	$64
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$75
	.byte	$76
	.byte	$05
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FF
	.byte	$72
	.byte	$71
	.byte	$CE
	.byte	$BC
	.byte	$BD
	.byte	$CE
	.byte	$14
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$03
	.byte	$03
	.byte	$14
	.byte	$CE
	.byte	$B5
	.byte	$B6
	.byte	$CE
	.byte	$74
	.byte	$82
	.byte	$6B
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$5F
	.byte	$6A
	.byte	$00
	.byte	$81
	.byte	$12
	.byte	$CC
	.byte	$CD
	.byte	$12
	.byte	$11
	.byte	$12
	.byte	$AF
	.byte	$12
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$AF
	.byte	$03
	.byte	$14
	.byte	$12
	.byte	$C5
	.byte	$C6
	.byte	$12
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$6B
	.byte	$05
	.byte	$09
	.byte	$07
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$05
	.byte	$09
	.byte	$06
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$04
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$04
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$05
	.byte	$75
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$15
	.byte	$05
	.byte	$15
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$55
	.byte	$05
	.byte	$05
	.byte	$45
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$80
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$59
	.byte	$AA
	.byte	$56
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$FC
	.byte	$77
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$54
	.byte	$55
	.byte	$00
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$09
	.byte	$00
_title_screen:
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$25
	.byte	$DD
	.byte	$DE
	.byte	$09
	.byte	$12
	.byte	$3E
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$EF
	.byte	$FE
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E9
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$B3
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D5
	.byte	$D6
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$3A
	.byte	$DF
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$DA
	.byte	$C4
	.byte	$E4
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$B0
	.byte	$EA
	.byte	$C4
	.byte	$E4
	.byte	$E5
	.byte	$E0
	.byte	$E4
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$E7
	.byte	$E5
	.byte	$E1
	.byte	$E6
	.byte	$E7
	.byte	$05
	.byte	$EE
	.byte	$D9
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E8
	.byte	$E6
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$E9
	.byte	$B1
	.byte	$B2
	.byte	$05
	.byte	$E5
	.byte	$D0
	.byte	$B3
	.byte	$C4
	.byte	$D4
	.byte	$05
	.byte	$05
	.byte	$D4
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$E4
	.byte	$D5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$EE
	.byte	$05
	.byte	$B0
	.byte	$08
	.byte	$D2
	.byte	$D3
	.byte	$E4
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E5
	.byte	$E8
	.byte	$E6
	.byte	$E5
	.byte	$E8
	.byte	$E9
	.byte	$E5
	.byte	$E8
	.byte	$E8
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E5
	.byte	$E6
	.byte	$E5
	.byte	$E6
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$3D
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$ED
	.byte	$DB
	.byte	$50
	.byte	$55
	.byte	$53
	.byte	$48
	.byte	$08
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$DC
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$3C
	.byte	$08
	.byte	$09
	.byte	$28
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$95
	.byte	$96
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$9C
	.byte	$9D
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$A5
	.byte	$A6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$AC
	.byte	$AD
	.byte	$08
	.byte	$09
	.byte	$17
	.byte	$B5
	.byte	$B6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$BC
	.byte	$BD
	.byte	$08
	.byte	$09
	.byte	$17
	.byte	$C5
	.byte	$C6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$CC
	.byte	$CD
	.byte	$08
	.byte	$09
	.byte	$16
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$08
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0F
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$08
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$0E
	.byte	$02
	.byte	$27
	.byte	$28
	.byte	$14
	.byte	$08
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$15
	.byte	$03
	.byte	$25
	.byte	$26
	.byte	$14
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$15
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$A8
	.byte	$98
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$13
	.byte	$8B
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$A8
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$15
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$6E
	.byte	$6F
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$14
	.byte	$A8
	.byte	$99
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$A7
	.byte	$98
	.byte	$01
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$7E
	.byte	$7F
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$14
	.byte	$A8
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$01
	.byte	$14
	.byte	$01
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$8E
	.byte	$8F
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$14
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$BF
	.byte	$14
	.byte	$01
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$9E
	.byte	$9F
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$14
	.byte	$11
	.byte	$BF
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$CF
	.byte	$14
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$07
	.byte	$14
	.byte	$11
	.byte	$CF
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$20
	.byte	$20
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$01
	.byte	$14
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$07
	.byte	$14
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$C0
	.byte	$F0
	.byte	$09
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$09
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$09
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$09
	.byte	$13
	.byte	$55
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$40
	.byte	$55
	.byte	$66
	.byte	$51
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
_boot_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A8
	.byte	$8E
	.byte	$00
	.byte	$43
	.byte	$52
	.byte	$45
	.byte	$41
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$00
	.byte	$42
	.byte	$59
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$01
	.byte	$6C
	.byte	$44
	.byte	$45
	.byte	$53
	.byte	$49
	.byte	$47
	.byte	$4E
	.byte	$2C
	.byte	$43
	.byte	$4F
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$41
	.byte	$54
	.byte	$54
	.byte	$00
	.byte	$48
	.byte	$55
	.byte	$47
	.byte	$48
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$47
	.byte	$41
	.byte	$4D
	.byte	$45
	.byte	$00
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$41
	.byte	$4C
	.byte	$4C
	.byte	$45
	.byte	$52
	.byte	$00
	.byte	$5A
	.byte	$4F
	.byte	$4C
	.byte	$54
	.byte	$41
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$2C
	.byte	$53
	.byte	$46
	.byte	$58
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$55
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$33
	.byte	$42
	.byte	$4F
	.byte	$58
	.byte	$00
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$41
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$50
	.byte	$41
	.byte	$59
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$53
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$49
	.byte	$53
	.byte	$49
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$2E
	.byte	$00
	.byte	$4D
	.byte	$41
	.byte	$47
	.byte	$52
	.byte	$49
	.byte	$00
	.byte	$01
	.byte	$6E
	.byte	$8E
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$44
	.byte	$49
	.byte	$43
	.byte	$41
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$00
	.byte	$54
	.byte	$4F
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$01
	.byte	$30
	.byte	$41
	.byte	$42
	.byte	$49
	.byte	$47
	.byte	$41
	.byte	$49
	.byte	$4C
	.byte	$2C
	.byte	$45
	.byte	$4C
	.byte	$49
	.byte	$41
	.byte	$4E
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$45
	.byte	$4C
	.byte	$53
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$35
	.byte	$56
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$49
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$2E
	.byte	$30
	.byte	$00
	.byte	$53
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$31
	.byte	$2E
	.byte	$30
	.byte	$31
	.byte	$2E
	.byte	$31
	.byte	$31
	.byte	$00
	.byte	$01
	.byte	$4D
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$8A
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$A8
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$20
	.byte	$88
	.byte	$AA
	.byte	$5A
	.byte	$5A
	.byte	$55
	.byte	$55
	.byte	$91
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$A0
	.byte	$50
	.byte	$54
	.byte	$55
	.byte	$A5
	.byte	$AA
	.byte	$AA
	.byte	$A2
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$01
	.byte	$00
_options_screen:
	.byte	$01
	.byte	$08
	.byte	$01
	.byte	$25
	.byte	$DD
	.byte	$DE
	.byte	$01
	.byte	$12
	.byte	$3E
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$10
	.byte	$EF
	.byte	$FE
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E9
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$B3
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D5
	.byte	$D6
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$3A
	.byte	$DF
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$DA
	.byte	$C4
	.byte	$E4
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$B0
	.byte	$EA
	.byte	$C4
	.byte	$E4
	.byte	$E5
	.byte	$E0
	.byte	$E4
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$E7
	.byte	$E5
	.byte	$E1
	.byte	$E6
	.byte	$E7
	.byte	$05
	.byte	$EE
	.byte	$D9
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E8
	.byte	$E6
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$E9
	.byte	$B1
	.byte	$B2
	.byte	$05
	.byte	$E5
	.byte	$D0
	.byte	$B3
	.byte	$C4
	.byte	$D4
	.byte	$05
	.byte	$05
	.byte	$D4
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$E4
	.byte	$D5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$EE
	.byte	$05
	.byte	$B0
	.byte	$08
	.byte	$D2
	.byte	$D3
	.byte	$E4
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$E5
	.byte	$E8
	.byte	$E6
	.byte	$E5
	.byte	$E8
	.byte	$E9
	.byte	$E5
	.byte	$E8
	.byte	$E8
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E5
	.byte	$E6
	.byte	$E5
	.byte	$E6
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$14
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$3D
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$ED
	.byte	$DB
	.byte	$50
	.byte	$55
	.byte	$53
	.byte	$48
	.byte	$20
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$DC
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$3C
	.byte	$08
	.byte	$01
	.byte	$28
	.byte	$09
	.byte	$0A
	.byte	$08
	.byte	$01
	.byte	$13
	.byte	$0B
	.byte	$0C
	.byte	$08
	.byte	$01
	.byte	$06
	.byte	$15
	.byte	$19
	.byte	$08
	.byte	$01
	.byte	$15
	.byte	$1C
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$25
	.byte	$26
	.byte	$08
	.byte	$4C
	.byte	$45
	.byte	$56
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$32
	.byte	$00
	.byte	$4D
	.byte	$4F
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$4C
	.byte	$41
	.byte	$53
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$08
	.byte	$01
	.byte	$23
	.byte	$18
	.byte	$08
	.byte	$01
	.byte	$0C
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$4F
	.byte	$4E
	.byte	$08
	.byte	$01
	.byte	$36
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$4E
	.byte	$08
	.byte	$01
	.byte	$2B
	.byte	$15
	.byte	$08
	.byte	$01
	.byte	$03
	.byte	$69
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$2E
	.byte	$44
	.byte	$52
	.byte	$4F
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$4E
	.byte	$08
	.byte	$01
	.byte	$07
	.byte	$6D
	.byte	$08
	.byte	$01
	.byte	$07
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$01
	.byte	$10
	.byte	$7C
	.byte	$7D
	.byte	$08
	.byte	$01
	.byte	$0C
	.byte	$20
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$01
	.byte	$0D
	.byte	$48
	.byte	$49
	.byte	$2D
	.byte	$53
	.byte	$43
	.byte	$4F
	.byte	$52
	.byte	$45
	.byte	$08
	.byte	$08
	.byte	$30
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$01
	.byte	$0F
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$C0
	.byte	$F0
	.byte	$01
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$00
_sound_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$67
	.byte	$9C
	.byte	$9D
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$95
	.byte	$96
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$AC
	.byte	$AD
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$BC
	.byte	$BD
	.byte	$8E
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$54
	.byte	$45
	.byte	$53
	.byte	$54
	.byte	$8F
	.byte	$B5
	.byte	$B6
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$CC
	.byte	$CD
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$C5
	.byte	$C6
	.byte	$00
	.byte	$01
	.byte	$89
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$00
	.byte	$54
	.byte	$52
	.byte	$41
	.byte	$43
	.byte	$4B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$46
	.byte	$58
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$30
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$30
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$50
	.byte	$4C
	.byte	$41
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$50
	.byte	$4C
	.byte	$41
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$44
	.byte	$4F
	.byte	$57
	.byte	$4E
	.byte	$00
	.byte	$4E
	.byte	$45
	.byte	$58
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$52
	.byte	$49
	.byte	$47
	.byte	$48
	.byte	$54
	.byte	$00
	.byte	$4E
	.byte	$45
	.byte	$58
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4C
	.byte	$45
	.byte	$46
	.byte	$54
	.byte	$00
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$86
	.byte	$2D
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$53
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$45
	.byte	$4C
	.byte	$45
	.byte	$43
	.byte	$54
	.byte	$00
	.byte	$54
	.byte	$4F
	.byte	$00
	.byte	$51
	.byte	$55
	.byte	$49
	.byte	$54
	.byte	$2D
	.byte	$00
	.byte	$01
	.byte	$84
	.byte	$AA
	.byte	$01
	.byte	$18
	.byte	$5A
	.byte	$AA
	.byte	$01
	.byte	$03
	.byte	$5A
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$AA
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$AA
	.byte	$01
	.byte	$11
	.byte	$0A
	.byte	$01
	.byte	$06
	.byte	$0A
	.byte	$01
	.byte	$00
_ty_screen:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$46
	.byte	$8E
	.byte	$00
	.byte	$53
	.byte	$50
	.byte	$45
	.byte	$43
	.byte	$49
	.byte	$41
	.byte	$4C
	.byte	$00
	.byte	$54
	.byte	$48
	.byte	$41
	.byte	$4E
	.byte	$4B
	.byte	$53
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$38
	.byte	$30
	.byte	$31
	.byte	$00
	.byte	$50
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$4A
	.byte	$45
	.byte	$4B
	.byte	$55
	.byte	$54
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$28
	.byte	$41
	.byte	$47
	.byte	$45
	.byte	$4E
	.byte	$54
	.byte	$42
	.byte	$41
	.byte	$53
	.byte	$45
	.byte	$59
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$4C
	.byte	$49
	.byte	$44
	.byte	$4E
	.byte	$41
	.byte	$52
	.byte	$49
	.byte	$51
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$42
	.byte	$45
	.byte	$4E
	.byte	$00
	.byte	$4C
	.byte	$41
	.byte	$52
	.byte	$53
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$4D
	.byte	$2D
	.byte	$54
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$42
	.byte	$45
	.byte	$4E
	.byte	$4A
	.byte	$59
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$4D
	.byte	$45
	.byte	$4D
	.byte	$42
	.byte	$4C
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$42
	.byte	$52
	.byte	$4F
	.byte	$4B
	.byte	$45
	.byte	$00
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$44
	.byte	$49
	.byte	$4F
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$55
	.byte	$55
	.byte	$4E
	.byte	$41
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$2B
	.byte	$43
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$48
	.byte	$52
	.byte	$49
	.byte	$53
	.byte	$43
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$4E
	.byte	$45
	.byte	$53
	.byte	$2D
	.byte	$44
	.byte	$4F
	.byte	$55
	.byte	$47
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$55
	.byte	$00
	.byte	$41
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$4B
	.byte	$48
	.byte	$49
	.byte	$4E
	.byte	$00
	.byte	$50
	.byte	$4D
	.byte	$59
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$2D
	.byte	$44
	.byte	$4F
	.byte	$47
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$53
	.byte	$48
	.byte	$49
	.byte	$52
	.byte	$55
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$44
	.byte	$52
	.byte	$45
	.byte	$58
	.byte	$45
	.byte	$47
	.byte	$41
	.byte	$52
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$53
	.byte	$4F
	.byte	$4C
	.byte	$45
	.byte	$00
	.byte	$47
	.byte	$4F
	.byte	$4F
	.byte	$53
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$27
	.byte	$45
	.byte	$52
	.byte	$49
	.byte	$43
	.byte	$49
	.byte	$43
	.byte	$58
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$54
	.byte	$45
	.byte	$50
	.byte	$50
	.byte	$4C
	.byte	$45
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$46
	.byte	$49
	.byte	$53
	.byte	$4B
	.byte	$42
	.byte	$49
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$54
	.byte	$48
	.byte	$45
	.byte	$00
	.byte	$41
	.byte	$53
	.byte	$4D
	.byte	$00
	.byte	$4C
	.byte	$49
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$25
	.byte	$49
	.byte	$4E
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$54
	.byte	$48
	.byte	$45
	.byte	$4D
	.byte	$45
	.byte	$54
	.byte	$41
	.byte	$4C
	.byte	$42
	.byte	$45
	.byte	$41
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$2E
	.byte	$02
	.byte	$02
	.byte	$41
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$59
	.byte	$4F
	.byte	$55
	.byte	$21
	.byte	$00
	.byte	$02
	.byte	$23
	.byte	$80
	.byte	$A0
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$65
	.byte	$55
	.byte	$55
	.byte	$01
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$AA
	.byte	$80
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$50
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$5A
	.byte	$84
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$66
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$0A
	.byte	$02
	.byte	$03
	.byte	$0A
	.byte	$02
	.byte	$00
_attack_delay:
	.word	$0258
_starting_levels:
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
_konami_code:
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$40
	.byte	$80
	.byte	$10
_def_line:
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$06
	.byte	$0C
	.byte	$0E
	.byte	$08
	.byte	$09
	.byte	$0C
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$0B
_def_square:
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
_def_L_rev:
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$09
_def_L:
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$09
_def_S:
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$09
_def_Z:
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$04
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$08
_def_T:
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$09
	.byte	$06
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$09
	.byte	$03
	.byte	$01
_srs_rotate_lookup:
	.byte	$0E
	.byte	$0D
	.byte	$38
	.byte	$0E
	.byte	$12
	.byte	$1A
	.byte	$25
	.byte	$04
	.byte	$1A
	.byte	$26
	.byte	$1A
	.byte	$0D
	.byte	$2C
	.byte	$1A
	.byte	$06
	.byte	$0E
	.byte	$25
	.byte	$10
	.byte	$0E
	.byte	$32
	.byte	$0B
	.byte	$1E
	.byte	$20
	.byte	$14
	.byte	$26
	.byte	$1B
	.byte	$0A
	.byte	$1C
	.byte	$28
	.byte	$12
	.byte	$0E
	.byte	$1E
	.byte	$02
	.byte	$3C
	.byte	$09
	.byte	$1A
	.byte	$0A
	.byte	$36
	.byte	$00
	.byte	$31
_empty_row_hold:
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
_empty_row_hold_sky:
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$06
_cluster_sprites:
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
_cluster_offsets:
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
_button_delay:
	.byte	$05
_OOB_TOP:
	.byte	$28
_tentacle_offsets:
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$00
_garbage_types:
	.byte	$60
	.byte	$70
	.byte	$2F
_board_lookup_y:
	.byte	$00
	.byte	$0A
	.byte	$14
	.byte	$1E
	.byte	$28
	.byte	$32
	.byte	$3C
	.byte	$46
	.byte	$50
	.byte	$5A
	.byte	$64
	.byte	$6E
	.byte	$78
	.byte	$82
	.byte	$8C
	.byte	$96
	.byte	$A0
	.byte	$AA
	.byte	$B4
	.byte	$BE
	.byte	$C8
	.byte	$D2
	.byte	$DC
	.byte	$E6
_empty_row:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_full_row:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_full_col:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_option_empty:
	.byte	$00
	.byte	$00
_option_icon:
	.byte	$25
	.byte	$26
_palette_bg:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
_palette_sp:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$16
	.byte	$31
	.byte	$36
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$36
_palette_bg_options:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$22
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
_palette_bg_list:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$1A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$1C
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$0C
	.byte	$23
	.byte	$34
	.byte	$0F
	.byte	$00
	.byte	$07
	.byte	$10
	.byte	$0F
	.byte	$1A
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$16
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$1C
	.byte	$10
	.byte	$0F
	.byte	$00
	.byte	$07
	.byte	$22
	.byte	$0F
	.byte	$1B
	.byte	$07
	.byte	$17
	.byte	$0F
	.byte	$0C
	.byte	$11
	.byte	$22
	.byte	$0F
	.byte	$0C
	.byte	$22
	.byte	$27
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$27
	.byte	$0F
	.byte	$1A
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$22
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$26
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$1C
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$23
	.byte	$32
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$23
	.byte	$26
	.byte	$36
_fall_rates_per_level:
	.byte	$30
	.byte	$2B
	.byte	$26
	.byte	$21
	.byte	$1C
	.byte	$17
	.byte	$12
	.byte	$0D
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
_attack_style_strings:
	.byte	$46,$49,$58,$45,$44,$00
	.res	1,$00
	.byte	$54,$49,$4D,$45,$44,$00
	.res	1,$00
	.byte	$43,$4C,$41,$53,$53,$49,$43
_off_on_string:
	.byte	$4F,$46,$46,$00
	.byte	$4F,$4E,$00
	.res	1,$00
_block_style_strings:
	.byte	$4D,$4F,$44,$45,$52,$4E,$00
	.byte	$43,$4C,$41,$53,$53,$49,$43
_hard_drop_types:
	.byte	$4F,$46,$46,$00
	.byte	$54,$41,$50,$00
	.byte	$48,$4F,$4C,$44
_text_push_start:
	.byte	$50,$55,$53,$48,$20,$53,$54,$41,$52,$54,$00
_clear_push_start:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
_metasprite_tentacle_title:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$80
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$81
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$90
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$91
	.byte	$01
	.byte	$80
L14BE:
	.byte	$42,$2D,$51,$55,$49,$54,$20,$20,$20,$20,$00
L14B4:
	.byte	$41,$2D,$52,$45,$53,$54,$41,$52,$54,$20,$00
L14AA:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00
L1593:
	.byte	$30,$30,$30,$30,$30,$30,$30,$00
L154F:
	.byte	$20,$20,$20,$20,$20,$20,$00
L164E	:=	L154F+1
L16B5	:=	L154F+1
L16EF:
	.byte	$43,$4C,$45,$41,$52,$00
L16AA:
	.byte	$54,$53,$50,$49,$4E,$00
L1643	:=	L16AA+0
L169D:
	.byte	$42,$54,$42,$2D,$54,$00
L156F	:=	L14BE+7
L18BD	:=	L1593+4
L18E2	:=	L1593+4
L15B7	:=	L1593+5

.segment	"BSS"

.segment	"ZEROPAGE"
_tick_count:
	.res	1,$00
_tick_count_large:
	.res	2,$00
_ticks_in_state_large:
	.res	2,$00
_hit_reaction_remaining:
	.res	1,$00
_attack_queue_ticks_remaining:
	.res	2,$00
_pad_all:
	.res	1,$00
_pad_all_new:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_pad2:
	.res	1,$00
_pad2_new:
	.res	1,$00
_scroll_y:
	.res	2,$00
_cur_option:
	.res	1,$00
_attack_style:
	.res	1,$00
_music_on:
	.res	1,$00
_sfx_on:
	.res	1,$00
_block_style:
	.res	1,$00
_saved_starting_level:
	.res	1,$00
_hard_drops_on:
	.res	1,$00
_hard_drop_hold_remaining:
	.res	1,$00
_hard_drop_tap_required:
	.res	1,$00
_cur_konami_index:
	.res	1,$00
_bag_index:
	.res	1,$00
_cur_rot:
	.res	1,$00
_cur_cluster:
	.res	22,$00
_next_cluster:
	.res	22,$00
_held_cluster_def:
	.res	16,$00
_can_hold_cluster:
	.res	1,$00
_attack_row_status:
	.res	10,$00
_horz_button_delay:
	.res	1,$00
_require_new_down_button:
	.res	1,$00
_fall_frame_counter:
	.res	1,$00
_lines_cleared_one:
	.res	1,$00
_lines_cleared_ten:
	.res	1,$00
_lines_cleared_hundred:
	.res	1,$00
_cur_score:
	.res	4,$00
_last_lines:
	.res	1,$00
_combo_count:
	.res	1,$00
_cur_nt:
	.res	1,$00
_off_nt:
	.res	1,$00
_hit:
	.res	1,$00
_temp_fall_frame_counter:
	.res	1,$00
_old_x:
	.res	1,$00
_id:
	.res	1,$00
_min_y:
	.res	1,$00
_max_y:
	.res	1,$00
_in_x:
	.res	1,$00
_in_y:
	.res	1,$00
_in_id:
	.res	1,$00
_local_start_x:
	.res	1,$00
_local_start_y:
	.res	1,$00
_local_ix:
	.res	1,$00
_local_iy:
	.res	1,$00
_local_t:
	.res	2,$00
_local_bit:
	.res	1,$00
_local_row_status:
	.res	1,$00
_test_song:
	.res	1,$00
_test_song_active:
	.res	1,$00
_test_sound:
	.res	1,$00
_cur_gameplay_music:
	.res	1,$00
_attack_queued:
	.res	1,$00
_cur_garbage_type:
	.res	1,$00
_delay_lock_remaining:
	.res	1,$00
_delay_lock_skip:
	.res	1,$00
_delay_spawn_remaining:
	.res	1,$00
_spawn_queued:
	.res	1,$00
_row_to_clear:
	.res	1,$00
_kill_row_cur:
	.res	1,$00
_kill_row_queued:
	.res	1,$00
_start_delay_remaining:
	.res	1,$00
_mask:
	.res	2,$00
_address:
	.res	2,$00
_time_of_day:
	.res	1,$00
_temp_pal:
	.res	16,$00
_lines_cleared_y:
	.res	4,$00
_line_score_mod:
	.res	2,$00
.segment	"BSS"
_game_board:
	.res	240,$00
_game_board_temp:
	.res	240,$00
_copy_board_data:
	.res	20,$00
_screen_shake_remaining:
	.res	1,$00
_is_tspin:
	.res	1,$00
_is_last_rotate:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ randomize_bag (unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_randomize_bag: near

	.dbg	func, "randomize_bag", "00", extern, "_randomize_bag"
	.dbg	sym, "arr", "00", auto, 1
	.dbg	sym, "n", "00", auto, 0
	.dbg	sym, "i", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2423
	jsr     pusha
;
; for (i = n - 1; i > 0; i--)
;
	.dbg	line, "main.c", 2427
	jsr     decsp1
	ldy     #$01
	lda     (sp),y
	sec
	sbc     #$01
	dey
L1A36:	sta     (sp),y
	lda     (sp),y
	beq     L1284
;
; unsigned char j = rand() % (i + 1);
;
	.dbg	line, "main.c", 2430
	jsr     _rand
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L128E
	inx
L128E:	jsr     tosumodax
	jsr     pusha
;
; swap(&arr[i], &arr[j]);
;
	.dbg	line, "main.c", 2433
	ldy     #$01
	lda     (sp),y
	clc
	ldy     #$03
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$05
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     _swap
;
; }
;
	.dbg	line, "main.c", 2434
	jsr     incsp1
;
; for (i = n - 1; i > 0; i--)
;
	.dbg	line, "main.c", 2427
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L1A36
;
; }
;
	.dbg	line, "main.c", 2435
L1284:	jmp     incsp4
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ swap (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_swap: near

	.dbg	func, "swap", "00", extern, "_swap"
	.dbg	sym, "a", "00", auto, 2
	.dbg	sym, "b", "00", auto, 0
	.dbg	sym, "temp", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2438
	jsr     pushax
;
; unsigned char temp = *a;
;
	.dbg	line, "main.c", 2439
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
;
; *a = *b;
;
	.dbg	line, "main.c", 2440
	ldy     #$06
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
;
; *b = temp;
;
	.dbg	line, "main.c", 2441
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (sp),y
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2442
	jmp     incsp5
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ hold_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hold_cluster: near

	.dbg	func, "hold_cluster", "00", extern, "_hold_cluster"

.segment	"BSS"

L19AB:
	.res	1,$00
L19AC:
	.res	1,$00

.segment	"CODE"

;
; can_hold_cluster = 0;
;
	.dbg	line, "main.c", 3989
	lda     #$00
	sta     _can_hold_cluster
;
; if(held_cluster_id == 255) //Nothing is held
;
	.dbg	line, "main.c", 3991
	lda     _held_cluster_id
	cmp     #$FF
	bne     L1A3F
;
; held_cluster_id = cur_cluster.id;
;
	.dbg	line, "main.c", 3994
	lda     _cur_cluster+21
	sta     _held_cluster_id
;
; held_cluster_rot = cur_rot;
;
	.dbg	line, "main.c", 3995
	lda     _cur_rot
	sta     _held_cluster_rot
;
; memcpy(held_cluster_def, cluster_defs_classic[held_cluster_id], (4 * 4));
;
	.dbg	line, "main.c", 3996
	lda     #<(_held_cluster_def)
	ldx     #>(_held_cluster_def)
	jsr     pushax
	ldx     #$00
	lda     _held_cluster_id
	asl     a
	bcc     L1A3C
	inx
	clc
L1A3C:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 3999
	jsr     _spawn_new_cluster
;
; can_hold_cluster = 1;
;
	.dbg	line, "main.c", 4000
	lda     #$01
	sta     _can_hold_cluster
;
; else
;
	.dbg	line, "main.c", 4002
	jmp     L1A40
;
; staging_cluster_id = held_cluster_id;
;
	.dbg	line, "main.c", 4005
L1A3F:	lda     _held_cluster_id
	sta     _staging_cluster_id
;
; staging_cluster_rot = held_cluster_rot;
;
	.dbg	line, "main.c", 4006
	lda     _held_cluster_rot
	sta     _staging_cluster_rot
;
; held_cluster_id = cur_cluster.id;
;
	.dbg	line, "main.c", 4009
	lda     _cur_cluster+21
	sta     _held_cluster_id
;
; held_cluster_rot = cur_rot;
;
	.dbg	line, "main.c", 4010
	lda     _cur_rot
	sta     _held_cluster_rot
;
; memcpy(held_cluster_def, cluster_defs_classic[held_cluster_id], (4 * 4));
;
	.dbg	line, "main.c", 4011
	lda     #<(_held_cluster_def)
	ldx     #>(_held_cluster_def)
	jsr     pushax
	ldx     #$00
	lda     _held_cluster_id
	asl     a
	bcc     L1A3D
	inx
	clc
L1A3D:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; cur_cluster.id = staging_cluster_id; //id
;
	.dbg	line, "main.c", 4014
	lda     _staging_cluster_id
	sta     _cur_cluster+21
;
; cur_rot = staging_cluster_rot; 
;
	.dbg	line, "main.c", 4015
	lda     _staging_cluster_rot
	sta     _cur_rot
;
; cur_block.x = 3; // Reset the block.
;
	.dbg	line, "main.c", 4016
	lda     #$03
	sta     _cur_block
;
; cur_block.y = cluster_offsets[staging_cluster_id];
;
	.dbg	line, "main.c", 4017
	ldy     _staging_cluster_id
	lda     _cluster_offsets,y
	sta     _cur_block+1
;
; memcpy(cur_cluster.def, cluster_defs_classic[staging_cluster_id], 4 * 4); //cluster_defs_classic[id]
;
	.dbg	line, "main.c", 4018
	lda     #<(_cur_cluster+4)
	ldx     #>(_cur_cluster+4)
	jsr     pushax
	ldx     #$00
	lda     _staging_cluster_id
	asl     a
	bcc     L1A3E
	inx
	clc
L1A3E:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4); 
;
	.dbg	line, "main.c", 4019
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; cur_cluster.sprite = cluster_sprites[staging_cluster_id] ; //cluster_sprites[id] 
;
	.dbg	line, "main.c", 4020
	ldy     _staging_cluster_id
	lda     _cluster_sprites,y
	sta     _cur_cluster+20
;
; local_iy = 0;
;
	.dbg	line, "main.c", 4026
L1A40:	lda     #$00
	sta     _local_iy
;
; local_ix = 0;
;
	.dbg	line, "main.c", 4027
	sta     _local_ix
;
; local_t = cluster_sprites[held_cluster_id];
;
	.dbg	line, "main.c", 4028
	ldy     _held_cluster_id
	sta     _local_t+1
	lda     _cluster_sprites,y
	sta     _local_t
;
; delay(1);
;
	.dbg	line, "main.c", 4031
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 4032
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 32));
;
	.dbg	line, "main.c", 4035
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 40));
;
	.dbg	line, "main.c", 4036
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$28
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; delay(1);
;
	.dbg	line, "main.c", 4038
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 4039
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 48));
;
	.dbg	line, "main.c", 4041
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold_sky, 4, get_ppu_addr(cur_nt, 220, 56));
;
	.dbg	line, "main.c", 4042
	jsr     decsp3
	lda     #<(_empty_row_hold_sky)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold_sky)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$38
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; for (l = 0; l < 4; ++l)
;
	.dbg	line, "main.c", 4044
	lda     #$00
	sta     L19AB
L1A41:	lda     L19AB
	cmp     #$04
	bcc     L1A4A
;
; }
;
	.dbg	line, "main.c", 4059
	rts
;
; m = held_cluster_def[held_cluster_rot][l];
;
	.dbg	line, "main.c", 4047
L1A4A:	ldx     #$00
	lda     _held_cluster_rot
	jsr     aslax2
	clc
	adc     #<(_held_cluster_def)
	sta     ptr1
	txa
	adc     #>(_held_cluster_def)
	sta     ptr1+1
	ldy     L19AB
	lda     (ptr1),y
	sta     L19AC
;
; local_ix = morton_compact_one_by_one(m >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 4050
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(m >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 4051
	lda     L19AC
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; one_vram_buffer(local_t, get_ppu_addr(cur_nt, 
;
	.dbg	line, "main.c", 4053
	lda     _local_t
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
;
; 220 + (local_ix << 3),
;
	.dbg	line, "main.c", 4054
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$DC
	dey
	sta     (sp),y
;
; 32 - (( held_cluster_id == 3 || (held_cluster_id != 2 && held_cluster_rot == 2) ) ? 8 : 0) + (local_iy << 3))
;
	.dbg	line, "main.c", 4055
	lda     #$20
	jsr     pusha0
	lda     _held_cluster_id
	cmp     #$03
	beq     L1A48
	cmp     #$02
	beq     L1A42
	lda     _held_cluster_rot
	cmp     #$02
	beq     L1A48
L1A42:	lda     #$00
	jmp     L1A31
L1A48:	lda     #$08
L1A31:	jsr     tossuba0
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _local_iy
	jsr     aslax3
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	pla
;
; ); //8 + (local_iy << 3)
;
	.dbg	line, "main.c", 4056
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; for (l = 0; l < 4; ++l)
;
	.dbg	line, "main.c", 4044
	inc     L19AB
	jmp     L1A41
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ draw_menu_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_menu_sprites: near

	.dbg	func, "draw_menu_sprites", "00", extern, "_draw_menu_sprites"

.segment	"BSS"

L0F01:
	.res	1,$00

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "main.c", 1566
	jsr     _oam_clear
;
; t = tick_count % 64;
;
	.dbg	line, "main.c", 1569
	lda     _tick_count
	and     #$3F
	sta     L0F01
;
; if (t > 48)
;
	.dbg	line, "main.c", 1570
	cmp     #$31
	bcc     L1A4C
;
; local_ix = 0x69;
;
	.dbg	line, "main.c", 1572
	lda     #$69
;
; else if (t > 32)
;
	.dbg	line, "main.c", 1574
	jmp     L1A4B
L1A4C:	lda     L0F01
	cmp     #$21
	bcc     L1A4D
;
; local_ix = 0x68;
;
	.dbg	line, "main.c", 1576
	lda     #$68
;
; else if (t > 16)
;
	.dbg	line, "main.c", 1578
	jmp     L1A4B
L1A4D:	lda     L0F01
	cmp     #$11
	bcc     L1A4E
;
; local_ix = 0x67;
;
	.dbg	line, "main.c", 1580
	lda     #$67
;
; else
;
	.dbg	line, "main.c", 1582
	jmp     L1A4B
;
; local_ix = 0x66;
;
	.dbg	line, "main.c", 1584
L1A4E:	lda     #$66
L1A4B:	sta     _local_ix
;
; oam_spr(10 << 3, 23 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1587
	jsr     decsp3
	lda     #$50
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(22 << 3, 23 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1588
	jsr     decsp3
	lda     #$B0
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_meta_spr(19<<3, 14<<3, metasprite_tentacle_title);
;
	.dbg	line, "main.c", 1591
	jsr     decsp2
	lda     #$98
	ldy     #$01
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     #<(_metasprite_tentacle_title)
	ldx     #>(_metasprite_tentacle_title)
	jmp     _oam_meta_spr
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ draw_gameplay_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_gameplay_sprites: near

	.dbg	func, "draw_gameplay_sprites", "00", extern, "_draw_gameplay_sprites"

.segment	"BSS"

L0F25:
	.res	1,$00
L0F26:
	.res	1,$00
L0F27:
	.res	1,$00
L0F28:
	.res	1,$00

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "main.c", 1621
	jsr     _oam_clear
;
; local_start_x = (cur_block.x << 3) + BOARD_START_X_PX;
;
	.dbg	line, "main.c", 1627
	lda     _cur_block
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	sta     _local_start_x
;
; local_start_y = (cur_block.y << 3) + BOARD_START_Y_PX;
;
	.dbg	line, "main.c", 1628
	lda     _cur_block+1
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	sta     _local_start_y
;
; if (cur_block.y != 255)
;
	.dbg	line, "main.c", 1631
	lda     _cur_block+1
	cmp     #$FF
	beq     L1A5B
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 1633
	lda     #$00
	sta     L0F27
L1A5A:	lda     L0F27
	cmp     #$04
	bcs     L1A5B
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 1636
	ldy     L0F27
	lda     _cur_cluster,y
	sta     L0F28
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 1639
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 1640
	lda     L0F28
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; if (local_start_y + (local_iy << 3) > OOB_TOP)
;
	.dbg	line, "main.c", 1645
	ldx     #$00
	lda     _local_iy
	jsr     aslax3
	clc
	adc     _local_start_y
	bcc     L1A52
	inx
L1A52:	sec
	sbc     _OOB_TOP
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L0F36
	beq     L0F36
;
; oam_spr(local_start_x + (local_ix << 3), local_start_y + (local_iy << 3), cur_cluster.sprite, 0);
;
	.dbg	line, "main.c", 1647
	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     _local_start_x
	ldy     #$02
	sta     (sp),y
	lda     _local_iy
	asl     a
	asl     a
	asl     a
	clc
	adc     _local_start_y
	dey
	sta     (sp),y
	lda     _cur_cluster+20
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 1633
L0F36:	inc     L0F27
	jmp     L1A5A
;
; if (attack_style != ATTACK_NEVER)
;
	.dbg	line, "main.c", 1654
L1A5B:	lda     _attack_style
	cmp     #$02
	jeq     L1A61
;
; shake_offset = 0;
;
	.dbg	line, "main.c", 1656
	lda     #$00
	sta     L0F25
;
; if (attack_style == ATTACK_ON_TIME)
;
	.dbg	line, "main.c", 1657
	lda     _attack_style
	cmp     #$01
	bne     L1A5D
;
; if (attack_queue_ticks_remaining < 120)
;
	.dbg	line, "main.c", 1659
	lda     _attack_queue_ticks_remaining+1
	cmp     #$00
	bne     L0F58
	lda     _attack_queue_ticks_remaining
	cmp     #$78
L0F58:	bcs     L0F56
;
; speed = tick_count >> 2;
;
	.dbg	line, "main.c", 1661
	lda     _tick_count
;
; else if (attack_queue_ticks_remaining < 300)
;
	.dbg	line, "main.c", 1663
	jmp     L1A68
L0F56:	lda     _attack_queue_ticks_remaining+1
	cmp     #$01
	bne     L0F5E
	lda     _attack_queue_ticks_remaining
	cmp     #$2C
L0F5E:	bcs     L1A5C
;
; speed = tick_count >> 3;
;
	.dbg	line, "main.c", 1665
	lda     _tick_count
;
; else
;
	.dbg	line, "main.c", 1667
	jmp     L1A6B
;
; speed = tick_count >> 5;
;
	.dbg	line, "main.c", 1669
L1A5C:	lda     _tick_count
	lsr     a
;
; else
;
	.dbg	line, "main.c", 1672
	jmp     L1A6E
;
; speed = tick_count >> 4;
;
	.dbg	line, "main.c", 1674
L1A5D:	lda     _tick_count
L1A6E:	lsr     a
L1A6B:	lsr     a
L1A68:	lsr     a
	lsr     a
	sta     L0F26
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 1678
	lda     #$00
	sta     _local_ix
L1A5E:	lda     _local_ix
	cmp     #$0A
	jcs     L1A61
;
; local_row_status = attack_row_status[local_ix];
;
	.dbg	line, "main.c", 1680
	ldy     _local_ix
	lda     _attack_row_status,y
	sta     _local_row_status
;
; if (local_row_status > 0)
;
	.dbg	line, "main.c", 1681
	lda     _local_row_status
	jeq     L1A60
;
; for (local_iy = 0; local_iy < local_row_status /*&& local_iy < ATTACK_QUEUE_SIZE*/; ++local_iy)
;
	.dbg	line, "main.c", 1683
	lda     #$00
	sta     _local_iy
	tax
L1A5F:	lda     _local_iy
	cmp     _local_row_status
	jcs     L1A60
;
; shake_offset = tentacle_offsets[((local_iy + speed) & 3)]; // &3 = %4 = number of entries in array.
;
	.dbg	line, "main.c", 1693
	clc
	adc     L0F26
	and     #$03
	sta     ptr1
	txa
	clc
	adc     #>(_tentacle_offsets)
	sta     ptr1+1
	ldy     #<(_tentacle_offsets)
	lda     (ptr1),y
	sta     L0F25
;
; if (local_iy == local_row_status - 1)
;
	.dbg	line, "main.c", 1696
	lda     _local_row_status
	sec
	sbc     #$01
	bcs     L0F85
	dex
L0F85:	cpx     #$00
	bne     L0F83
	cmp     _local_iy
	bne     L0F83
;
; BOARD_START_X_PX + (local_ix << 3) + shake_offset,
;
	.dbg	line, "main.c", 1699
	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	clc
	adc     L0F25
	ldy     #$02
	sta     (sp),y
;
; (BOARD_END_Y_PX) + (ATTACK_QUEUE_SIZE << 3) - (local_iy << 3),
;
	.dbg	line, "main.c", 1700
	lda     #$E0
	jsr     pusha0
	lda     _local_iy
	jsr     aslax3
	jsr     tossubax
	ldy     #$01
	sta     (sp),y
;
; 0xf9,
;
	.dbg	line, "main.c", 1701
	lda     #$F9
;
; else
;
	.dbg	line, "main.c", 1704
	jmp     L1A6C
;
; BOARD_START_X_PX + (local_ix << 3) + shake_offset,
;
	.dbg	line, "main.c", 1707
L0F83:	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	clc
	adc     L0F25
	ldy     #$02
	sta     (sp),y
;
; (BOARD_END_Y_PX) + (ATTACK_QUEUE_SIZE << 3) - (local_iy << 3),
;
	.dbg	line, "main.c", 1708
	lda     #$E0
	jsr     pusha0
	lda     _local_iy
	jsr     aslax3
	jsr     tossubax
	ldy     #$01
	sta     (sp),y
;
; 0xf8,
;
	.dbg	line, "main.c", 1709
	lda     #$F8
L1A6C:	dey
	sta     (sp),y
;
; 1);
;
	.dbg	line, "main.c", 1710
	lda     #$01
	jsr     _oam_spr
;
; for (local_iy = 0; local_iy < local_row_status /*&& local_iy < ATTACK_QUEUE_SIZE*/; ++local_iy)
;
	.dbg	line, "main.c", 1683
	ldx     #$00
	inc     _local_iy
	jmp     L1A5F
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 1678
L1A60:	inc     _local_ix
	jmp     L1A5E
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 1726
L1A61:	lda     _hit_reaction_remaining
	beq     L1A62
;
; oam_spr((3 << 3) /*+ r*/, (24 << 3), 0x65, 1);
;
	.dbg	line, "main.c", 1730
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C0
	dey
	sta     (sp),y
	lda     #$65
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 25 << 3, 0x64, 1);
;
	.dbg	line, "main.c", 1731
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x74, 1);
;
	.dbg	line, "main.c", 1732
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$74
;
; else
;
	.dbg	line, "main.c", 1751
	jmp     L1A6D
;
; if (attack_style == ATTACK_NEVER)
;
	.dbg	line, "main.c", 1753
L1A62:	lda     _attack_style
	cmp     #$02
	bne     L0FB1
;
; oam_spr(3 << 3, 25 << 3, 0x63, 1);
;
	.dbg	line, "main.c", 1756
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$63
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x73, 1);
;
	.dbg	line, "main.c", 1757
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$73
;
; else
;
	.dbg	line, "main.c", 1759
	jmp     L1A6D
;
; local_t = tick_count_large % BLINK_LEN;
;
	.dbg	line, "main.c", 1763
L0FB1:	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     pushax
	ldx     #$01
	lda     #$2C
	jsr     tosumodax
	sta     _local_t
	stx     _local_t+1
;
; if (local_t > BLINK_LEN - 5)
;
	.dbg	line, "main.c", 1765
	cmp     #$28
	txa
	sbc     #$01
;
; else if (local_t > (BLINK_LEN - 10))
;
	.dbg	line, "main.c", 1770
	bcs     L1A82
	lda     _local_t
	cmp     #$23
	lda     _local_t+1
	sbc     #$01
	bcc     L0FCF
;
; oam_spr(3 << 3, 25 << 3, 0x63, 1);
;
	.dbg	line, "main.c", 1772
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$63
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x73, 1);
;
	.dbg	line, "main.c", 1773
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$73
;
; else if (local_t > BLINK_LEN - 15)
;
	.dbg	line, "main.c", 1775
	jmp     L1A6D
L0FCF:	lda     _local_t
	cmp     #$1E
	lda     _local_t+1
	sbc     #$01
	bcc     L1A63
;
; oam_spr(3 << 3, 25 << 3, 0x62, 1);
;
	.dbg	line, "main.c", 1777
L1A82:	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$62
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x72, 1);
;
	.dbg	line, "main.c", 1778
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$72
L1A6D:	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; local_t = tick_count & 63;
;
	.dbg	line, "main.c", 1784
L1A63:	lda     _tick_count
	ldx     #$00
	and     #$3F
	sta     _local_t
	stx     _local_t+1
;
; if (local_t > 48)
;
	.dbg	line, "main.c", 1785
	cmp     #$31
	bcc     L0FED
;
; local_ix = 0x69;
;
	.dbg	line, "main.c", 1787
	lda     #$69
;
; else if (local_t > 32)
;
	.dbg	line, "main.c", 1789
	jmp     L1A59
L0FED:	lda     _local_t
	cmp     #$21
	lda     _local_t+1
	sbc     #$00
	bcc     L0FF2
;
; local_ix = 0x68;
;
	.dbg	line, "main.c", 1791
	lda     #$68
;
; else if (local_t > 16)
;
	.dbg	line, "main.c", 1793
	jmp     L1A59
L0FF2:	lda     _local_t
	cmp     #$11
	lda     _local_t+1
	sbc     #$00
	bcc     L1A64
;
; local_ix = 0x67;
;
	.dbg	line, "main.c", 1795
	lda     #$67
;
; else
;
	.dbg	line, "main.c", 1797
	jmp     L1A59
;
; local_ix = 0x66;
;
	.dbg	line, "main.c", 1799
L1A64:	lda     #$66
L1A59:	sta     _local_ix
;
; oam_spr(8 << 3, 1 << 3, local_ix, 2);
;
	.dbg	line, "main.c", 1802
	jsr     decsp3
	lda     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(24 << 3, 1 << 3, local_ix, 2);
;
	.dbg	line, "main.c", 1803
	jsr     decsp3
	lda     #$C0
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(3 << 3, 10 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1804
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(27 << 3, 10 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1805
	jsr     decsp3
	lda     #$D8
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jmp     _oam_spr
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

	.dbg	func, "movement", "00", extern, "_movement"

.segment	"BSS"

L1013:
	.res	1,$00
L1014:
	.res	1,$00

.segment	"CODE"

;
; hit = 0;
;
	.dbg	line, "main.c", 1814
	lda     #$00
	sta     _hit
;
; temp_fall_frame_counter = 0;
;
	.dbg	line, "main.c", 1815
	sta     _temp_fall_frame_counter
;
; old_x = 0;
;
	.dbg	line, "main.c", 1816
	sta     _old_x
;
; delay_lock_skip = 0;
;
	.dbg	line, "main.c", 1817
	sta     _delay_lock_skip
;
; if (start_delay_remaining == 0)
;
	.dbg	line, "main.c", 1819
	lda     _start_delay_remaining
	bne     L1A8A
;
; --fall_frame_counter;
;
	.dbg	line, "main.c", 1821
	dec     _fall_frame_counter
;
; else
;
	.dbg	line, "main.c", 1823
	jmp     L1A8B
;
; --start_delay_remaining;
;
	.dbg	line, "main.c", 1825
L1A8A:	dec     _start_delay_remaining
;
; if (pad_all_new & PAD_SELECT)
;
	.dbg	line, "main.c", 1831
L1A8B:	lda     _pad_all_new
	and     #$20
	beq     L1A8C
;
; if(can_hold_cluster)
;
	.dbg	line, "main.c", 1870
	lda     _can_hold_cluster
	beq     L1A8C
;
; hold_cluster();
;
	.dbg	line, "main.c", 1871
	jsr     _hold_cluster
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1879
L1A8C:	lda     _pad_all_new
	and     #$80
	beq     L1A8D
;
; rotate_cur_cluster(1);
;
	.dbg	line, "main.c", 1881
	lda     #$01
;
; else if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1883
	jmp     L1A87
L1A8D:	lda     _pad_all_new
	and     #$40
	beq     L1A8E
;
; rotate_cur_cluster(-1);
;
	.dbg	line, "main.c", 1885
	lda     #$FF
L1A87:	jsr     _rotate_cur_cluster
;
; if (horz_button_delay > 0)
;
	.dbg	line, "main.c", 1888
L1A8E:	lda     _horz_button_delay
	beq     L1A8F
;
; --horz_button_delay;
;
	.dbg	line, "main.c", 1890
	dec     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1893
L1A8F:	lda     _cur_block
	sta     _old_x
;
; if (((pad_all & PAD_RIGHT) && horz_button_delay == 0) || (pad_all_new & PAD_RIGHT))
;
	.dbg	line, "main.c", 1894
	lda     _pad_all
	and     #$01
	beq     L1A93
	lda     _horz_button_delay
	beq     L1A96
L1A93:	lda     _pad_all_new
	and     #$01
	beq     L1A98
;
; horz_button_delay = button_delay;
;
	.dbg	line, "main.c", 1896
L1A96:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad_all_new & PAD_RIGHT))
;
	.dbg	line, "main.c", 1897
	lda     _pad_all_new
	and     #$01
	beq     L1A97
;
; horz_button_delay <<= 1;
;
	.dbg	line, "main.c", 1899
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1904
L1A97:	lda     _cur_block
	sta     _old_x
;
; cur_block.x += 1;
;
	.dbg	line, "main.c", 1905
	inc     _cur_block
;
; else if (((pad_all & PAD_LEFT) && horz_button_delay == 0) || pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 1914
	jmp     L1AC4
L1A98:	lda     _pad_all
	and     #$02
	beq     L1A9C
	lda     _horz_button_delay
	beq     L1A9F
L1A9C:	lda     _pad_all_new
	and     #$02
	beq     L1AA1
;
; horz_button_delay = button_delay;
;
	.dbg	line, "main.c", 1916
L1A9F:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad_all_new & PAD_LEFT))
;
	.dbg	line, "main.c", 1917
	lda     _pad_all_new
	and     #$02
	beq     L1AA0
;
; horz_button_delay <<= 1;
;
	.dbg	line, "main.c", 1920
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1925
L1AA0:	lda     _cur_block
	sta     _old_x
;
; cur_block.x -= 1; // note: wrap around
;
	.dbg	line, "main.c", 1926
	dec     _cur_block
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 1932
L1AC4:	lda     _is_last_rotate
	sta     L1014
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 1933
	lda     #$00
	sta     _is_last_rotate
;
; if (cur_block.x != old_x && is_cluster_colliding())
;
	.dbg	line, "main.c", 1939
L1AA1:	lda     _old_x
	cmp     _cur_block
	beq     L1AA3
	jsr     _is_cluster_colliding
	tax
	beq     L1AA3
;
; cur_block.x = old_x;
;
	.dbg	line, "main.c", 1941
	lda     _old_x
	sta     _cur_block
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 1942
	lda     L1014
	sta     _is_last_rotate
;
; temp_fall_frame_counter = fall_frame_counter;
;
	.dbg	line, "main.c", 1969
L1AA3:	lda     _fall_frame_counter
	sta     _temp_fall_frame_counter
;
; hard_drop_performed = 0;
;
	.dbg	line, "main.c", 1971
	lda     #$00
	sta     L1013
;
; if (hard_drops_on && pad_all & PAD_UP && (pad_all & (PAD_LEFT | PAD_RIGHT)) == 0)
;
	.dbg	line, "main.c", 1972
	lda     _hard_drops_on
	beq     L1AAF
	lda     _pad_all
	and     #$08
	beq     L1AAF
	lda     _pad_all
	and     #$03
	bne     L1AAF
;
; if ((pad_all & PAD_UP && hard_drop_tap_required == 0) || pad_all_new & PAD_UP)
;
	.dbg	line, "main.c", 1974
	lda     _pad_all
	and     #$08
	beq     L1AAA
	lda     _hard_drop_tap_required
	beq     L1AAD
L1AAA:	lda     _pad_all_new
	and     #$08
	beq     L1AB2
;
; --hard_drop_hold_remaining;
;
	.dbg	line, "main.c", 1976
L1AAD:	dec     _hard_drop_hold_remaining
;
; if (hard_drop_hold_remaining == 0)
;
	.dbg	line, "main.c", 1978
	bne     L1AB2
;
; hard_drop_performed = 1;
;
	.dbg	line, "main.c", 1980
	lda     #$01
	sta     L1013
;
; hard_drop_tap_required = 1;
;
	.dbg	line, "main.c", 1981
	sta     _hard_drop_tap_required
;
; while (!is_cluster_colliding())
;
	.dbg	line, "main.c", 1984
	jmp     L1085
;
; ++cur_block.y;
;
	.dbg	line, "main.c", 1986
L1AAE:	inc     _cur_block+1
;
; cur_score += 2; 
;
	.dbg	line, "main.c", 1987
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	lda     #$02
	jsr     laddeqa
;
; while (!is_cluster_colliding())
;
	.dbg	line, "main.c", 1984
L1085:	jsr     _is_cluster_colliding
	tax
	beq     L1AAE
;
; display_score();
;
	.dbg	line, "main.c", 1989
	jsr     _display_score
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 1990
	lda     _is_last_rotate
	sta     L1014
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 1991
	lda     #$00
	sta     _is_last_rotate
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 1993
	lda     #$01
	sta     _delay_lock_skip
;
; else
;
	.dbg	line, "main.c", 2001
	jmp     L1AB2
;
; if ((pad_all & (PAD_LEFT | PAD_RIGHT)) == 0)
;
	.dbg	line, "main.c", 2003
L1AAF:	lda     _pad_all
	and     #$03
	bne     L1AB0
;
; hard_drop_tap_required = 0;
;
	.dbg	line, "main.c", 2005
	sta     _hard_drop_tap_required
;
; if (hard_drops_on == 1) // tap
;
	.dbg	line, "main.c", 2007
L1AB0:	lda     _hard_drops_on
	cmp     #$01
;
; else if (hard_drops_on == 2) // hold
;
	.dbg	line, "main.c", 2011
	beq     L1A89
	cmp     #$02
	bne     L1AB2
;
; hard_drop_hold_remaining = HARD_DROP_HOLD_TIME;
;
	.dbg	line, "main.c", 2013
L1A89:	sta     _hard_drop_hold_remaining
;
; if (hard_drop_performed == 0)
;
	.dbg	line, "main.c", 2017
L1AB2:	lda     L1013
	bne     L1ABD
;
; if (pad_all_new & PAD_DOWN || delay_lock_remaining != -1)
;
	.dbg	line, "main.c", 2022
	lda     _pad_all_new
	and     #$04
	bne     L1AB3
	lda     _delay_lock_remaining
	cmp     #$FF
	beq     L1AB6
;
; if (pad_all_new & PAD_DOWN)
;
	.dbg	line, "main.c", 2024
L1AB3:	lda     _pad_all_new
	and     #$04
	beq     L1AB5
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 2027
	lda     #$01
	sta     _delay_lock_skip
;
; require_new_down_button = 0;
;
	.dbg	line, "main.c", 2029
	lda     #$00
L1AB5:	sta     _require_new_down_button
;
; fall_frame_counter = 0;
;
	.dbg	line, "main.c", 2032
	sta     _fall_frame_counter
;
; else if ((pad_all & PAD_DOWN) && require_new_down_button == 0)
;
	.dbg	line, "main.c", 2035
	jmp     L1ABC
L1AB6:	lda     _pad_all
	and     #$04
	beq     L1ABC
	lda     _require_new_down_button
	bne     L1ABC
;
; fall_frame_counter = MIN(fall_frame_counter, 1);
;
	.dbg	line, "main.c", 2038
	lda     _fall_frame_counter
	bne     L1ABA
	jmp     L1ABB
L1ABA:	lda     #$01
L1ABB:	sta     _fall_frame_counter
;
; cur_score += 1; 
;
	.dbg	line, "main.c", 2039
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq1
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2040
	lda     _is_last_rotate
	sta     L1014
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2041
	lda     #$00
	sta     _is_last_rotate
;
; if (fall_frame_counter == 0)
;
	.dbg	line, "main.c", 2045
L1ABC:	lda     _fall_frame_counter
	bne     L1ABD
;
; start_delay_remaining = 0;
;
	.dbg	line, "main.c", 2050
	sta     _start_delay_remaining
;
; cur_block.y += 1;
;
	.dbg	line, "main.c", 2052
	inc     _cur_block+1
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2053
	lda     _is_last_rotate
	sta     L1014
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2054
	lda     #$00
	sta     _is_last_rotate
;
; fall_frame_counter = fall_rate;
;
	.dbg	line, "main.c", 2055
	lda     _fall_rate
	sta     _fall_frame_counter
;
; if (fall_rate > DELAY_LOCK_LEN)
;
	.dbg	line, "main.c", 2061
L1ABD:	lda     _fall_rate
	cmp     #$10
	lda     #$00
	bcc     L1ABF
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 2063
	lda     #$01
	sta     _delay_lock_skip
;
; hit = 0;
;
	.dbg	line, "main.c", 2068
	lda     #$00
L1ABF:	sta     _hit
;
; if (is_cluster_colliding())
;
	.dbg	line, "main.c", 2071
	jsr     _is_cluster_colliding
	tax
	beq     L10D9
;
; if (delay_lock_remaining == -1)
;
	.dbg	line, "main.c", 2073
	lda     _delay_lock_remaining
	cmp     #$FF
	bne     L10DB
;
; delay_lock_remaining = DELAY_LOCK_LEN - fall_rate;
;
	.dbg	line, "main.c", 2075
	lda     #$0F
	sec
	sbc     _fall_rate
	cmp     #$80
	sta     _delay_lock_remaining
;
; --delay_lock_remaining;
;
	.dbg	line, "main.c", 2081
L10DB:	dec     _delay_lock_remaining
;
; cur_block.y -= 1;
;
	.dbg	line, "main.c", 2087
	dec     _cur_block+1
;
; if (delay_lock_remaining == 0 || delay_lock_skip)
;
	.dbg	line, "main.c", 2088
	lda     _delay_lock_remaining
	beq     L10E6
	lda     _delay_lock_skip
	beq     L10EF
;
; hit = 1;
;
	.dbg	line, "main.c", 2090
L10E6:	lda     #$01
	sta     _hit
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 2091
	lda     L1014
	sta     _is_last_rotate
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 2097
L10D9:	lda     #$FF
	sta     _delay_lock_remaining
;
; if (hit)
;
	.dbg	line, "main.c", 2100
L10EF:	lda     _hit
	beq     L10F2
;
; is_tspin = check_tspin();
;
	.dbg	line, "main.c", 2102
	jsr     _check_tspin
	sta     _is_tspin
;
; put_cur_cluster();
;
	.dbg	line, "main.c", 2103
	jsr     _put_cur_cluster
;
; delay_spawn_remaining = DELAY_SPAWN_LEN;
;
	.dbg	line, "main.c", 2106
	lda     #$05
	sta     _delay_spawn_remaining
;
; display_score();
;
	.dbg	line, "main.c", 2107
	jmp     _display_score
;
; }
;
	.dbg	line, "main.c", 2110
L10F2:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ set_block (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_block: near

	.dbg	func, "set_block", "00", extern, "_set_block"

.segment	"CODE"

;
; if (in_y <= BOARD_OOB_END)
;
	.dbg	line, "main.c", 2156
	lda     _in_y
	cmp     #$04
;
; return;
;
	.dbg	line, "main.c", 2159
	bcc     L1130
;
; address = get_ppu_addr(cur_nt, (in_x << 3) + BOARD_START_X_PX, (in_y << 3) + BOARD_START_Y_PX);
;
	.dbg	line, "main.c", 2162
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     _in_x
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
	lda     _in_y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(in_id, address);
;
	.dbg	line, "main.c", 2163
	lda     _in_id
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; game_board[TILE_TO_BOARD_INDEX(in_x, in_y)] = in_id;
;
	.dbg	line, "main.c", 2166
	ldy     _in_y
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _in_x
	bcc     L1AC6
	inx
	clc
L1AC6:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	lda     _in_id
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2167
L1130:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ set_block_nt (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_block_nt: near

	.dbg	func, "set_block_nt", "00", extern, "_set_block_nt"
	.dbg	sym, "x", "00", auto, 3
	.dbg	sym, "y", "00", auto, 2
	.dbg	sym, "id", "00", auto, 1
	.dbg	sym, "nt", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2170
	jsr     pusha
;
; if (y <= BOARD_OOB_END)
;
	.dbg	line, "main.c", 2171
	ldy     #$02
	lda     (sp),y
	cmp     #$04
;
; return;
;
	.dbg	line, "main.c", 2174
	bcc     L1148
;
; address = get_ppu_addr(nt, (x << 3) + BOARD_START_X_PX, (y << 3) + BOARD_START_Y_PX);
;
	.dbg	line, "main.c", 2177
	jsr     decsp2
	lda     (sp),y
	dey
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$00
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(id, address);
;
	.dbg	line, "main.c", 2178
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; game_board[TILE_TO_BOARD_INDEX(x, y)] = id;
;
	.dbg	line, "main.c", 2180
	ldy     #$02
	lda     (sp),y
	tay
	lda     _board_lookup_y,y
	sta     ptr1
	ldx     #$00
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L1AC8
	inx
	clc
L1AC8:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2181
L1148:	jmp     incsp4
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ put_cur_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_cur_cluster: near

	.dbg	func, "put_cur_cluster", "00", extern, "_put_cur_cluster"

.segment	"BSS"

L1161:
	.res	1,$00
L1162:
	.res	1,$00

.segment	"CODE"

;
; max_y = 0;
;
	.dbg	line, "main.c", 2199
	lda     #$00
	sta     _max_y
;
; min_y = 0xff; // max
;
	.dbg	line, "main.c", 2200
	lda     #$FF
	sta     _min_y
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2202
	lda     #$00
	sta     L1161
L1ACB:	lda     L1161
	cmp     #$04
	bcs     L1168
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 2205
	ldy     L1161
	lda     _cur_cluster,y
	sta     L1162
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2208
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2209
	lda     L1162
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; in_x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2213
	lda     _cur_block
	clc
	adc     _local_ix
	sta     _in_x
;
; in_y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2214
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     _in_y
;
; in_id = cur_cluster.sprite;
;
	.dbg	line, "main.c", 2215
	lda     _cur_cluster+20
	sta     _in_id
;
; if (in_y < min_y)
;
	.dbg	line, "main.c", 2219
	lda     _in_y
	cmp     _min_y
	bcs     L1ACC
;
; min_y = in_y;
;
	.dbg	line, "main.c", 2221
	sta     _min_y
;
; if (in_y > max_y)
;
	.dbg	line, "main.c", 2223
L1ACC:	lda     _in_y
	sec
	sbc     _max_y
	bcc     L1183
	beq     L1183
;
; max_y = in_y;
;
	.dbg	line, "main.c", 2225
	lda     _in_y
	sta     _max_y
;
; set_block();
;
	.dbg	line, "main.c", 2228
L1183:	jsr     _set_block
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2202
	inc     L1161
	jmp     L1ACB
;
; SFX_PLAY_WRAPPER(SOUND_LAND);
;
	.dbg	line, "main.c", 2233
L1168:	lda     _sfx_on
	beq     L1ACD
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; cur_block.y = 255;
;
	.dbg	line, "main.c", 2246
L1ACD:	lda     #$FF
	sta     _cur_block+1
;
; oam_set(0);
;
	.dbg	line, "main.c", 2250
	lda     #$00
	jsr     _oam_set
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2252
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2253
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2254
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2255
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; if (attack_style == ATTACK_ON_LAND)
;
	.dbg	line, "main.c", 2258
	lda     _attack_style
	bne     L11A6
;
; attack_queued = 1;
;
	.dbg	line, "main.c", 2260
	lda     #$01
	sta     _attack_queued
;
; clear_rows_in_data(max_y, 0);
;
	.dbg	line, "main.c", 2269
L11A6:	lda     _max_y
	jsr     pusha
	lda     #$00
	jmp     _clear_rows_in_data
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_block_occupied (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_block_occupied: near

	.dbg	func, "is_block_occupied", "00", extern, "_is_block_occupied"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2275
	jsr     pusha
;
; return (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD || game_board[TILE_TO_BOARD_INDEX(x, y)]);
;
	.dbg	line, "main.c", 2276
	ldy     #$00
	lda     (sp),y
	cmp     #$18
	bcs     L1ACF
	iny
	lda     (sp),y
	cmp     #$0A
	bcs     L1ACF
	dey
	lda     (sp),y
	tay
	lda     _board_lookup_y,y
	sta     ptr1
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L1ACE
	inx
L1ACE:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L1ACF
	tax
	jmp     incsp2
L1ACF:	lda     #$01
	ldx     #$00
;
; }
;
	.dbg	line, "main.c", 2277
	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_perfect_clear (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_perfect_clear: near

	.dbg	func, "is_perfect_clear", "00", extern, "_is_perfect_clear"

.segment	"CODE"

;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 2281
	lda     #$00
	sta     _local_ix
	tax
L1AD2:	lda     _local_ix
	cmp     #$0A
	bcs     L1AD6
;
; for (local_iy = 0; local_iy <= BOARD_END_Y_PX_BOARD; ++local_iy)
;
	.dbg	line, "main.c", 2283
	lda     #$00
	sta     _local_iy
	tax
L1AD3:	lda     _local_iy
	cmp     #$18
	bcs     L1AD5
;
; if (game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] != 0)
;
	.dbg	line, "main.c", 2285
	ldy     _local_iy
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L1AD1
	inx
L1AD1:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	ldx     #$00
	lda     (ptr1),y
	beq     L1AD4
;
; return 0;
;
	.dbg	line, "main.c", 2287
	txa
	rts
;
; for (local_iy = 0; local_iy <= BOARD_END_Y_PX_BOARD; ++local_iy)
;
	.dbg	line, "main.c", 2283
L1AD4:	inc     _local_iy
	jmp     L1AD3
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 2281
L1AD5:	inc     _local_ix
	jmp     L1AD2
;
; return 1;
;
	.dbg	line, "main.c", 2291
L1AD6:	lda     #$01
;
; }
;
	.dbg	line, "main.c", 2293
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_cluster_colliding (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_cluster_colliding: near

	.dbg	func, "is_cluster_colliding", "00", extern, "_is_cluster_colliding"

.segment	"BSS"

L11D5:
	.res	1,$00
L11D6:
	.res	1,$00
L11D7:
	.res	1,$00
L11D8:
	.res	1,$00

.segment	"CODE"

;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2301
	lda     #$00
	sta     L11D7
	tax
L1ADA:	lda     L11D7
	cmp     #$04
	bcs     L1ADD
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 2304
	ldy     L11D7
	lda     _cur_cluster,y
	sta     L11D8
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2307
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2308
	lda     L11D8
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2310
	lda     _cur_block
	clc
	adc     _local_ix
	sta     L11D5
;
; y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2311
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     L11D6
;
; if (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD || game_board[TILE_TO_BOARD_INDEX(x, y)])
;
	.dbg	line, "main.c", 2313
	cmp     #$18
	bcs     L1ADB
	lda     L11D5
	cmp     #$0A
	bcs     L1ADB
	ldy     L11D6
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     L11D5
	bcc     L1AD9
	inx
L1AD9:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L1ADB
	tax
	jmp     L1ADC
;
; return 1;
;
	.dbg	line, "main.c", 2316
L1ADB:	ldx     #$00
	lda     #$01
	rts
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2301
L1ADC:	inc     L11D7
	jmp     L1ADA
;
; return 0;
;
	.dbg	line, "main.c", 2320
L1ADD:	txa
;
; }
;
	.dbg	line, "main.c", 2321
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ morton_compact_one_by_one (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_morton_compact_one_by_one: near

	.dbg	func, "morton_compact_one_by_one", "00", extern, "_morton_compact_one_by_one"
	.dbg	sym, "x", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2533
	jsr     pusha
;
; x &= 0x55;
;
	.dbg	line, "main.c", 2534
	ldy     #$00
	lda     (sp),y
	and     #$55
	sta     (sp),y
;
; x = ((x ^ (x >> 1)) & 0x33);
;
	.dbg	line, "main.c", 2535
	lsr     a
	eor     (sp),y
	and     #$33
	sta     (sp),y
;
; x = ((x ^ (x >> 2)) & 0x0f);
;
	.dbg	line, "main.c", 2536
	lsr     a
	lsr     a
	eor     (sp),y
	and     #$0F
	sta     (sp),y
;
; return x;
;
	.dbg	line, "main.c", 2537
	ldx     #$00
	lda     (sp),y
;
; }
;
	.dbg	line, "main.c", 2538
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_new_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_new_cluster: near

	.dbg	func, "spawn_new_cluster", "00", extern, "_spawn_new_cluster"

.segment	"BSS"

L11FC:
	.res	1,$00
L11FD:
	.res	1,$00

.segment	"CODE"

;
; id = 0;
;
	.dbg	line, "main.c", 2332
	lda     #$00
	sta     _id
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 2334
	lda     #$FF
	sta     _delay_lock_remaining
;
; require_new_down_button = 1;
;
	.dbg	line, "main.c", 2336
	lda     #$01
	sta     _require_new_down_button
;
; fall_frame_counter = fall_rate;
;
	.dbg	line, "main.c", 2337
	lda     _fall_rate
	sta     _fall_frame_counter
;
; can_hold_cluster = 1;
;
	.dbg	line, "main.c", 2340
	lda     #$01
	sta     _can_hold_cluster
;
; cur_rot = 0;
;
	.dbg	line, "main.c", 2343
	lda     #$00
	sta     _cur_rot
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2344
	sta     _is_last_rotate
;
; memcpy(cur_cluster.def, next_cluster.def, 4 * 4);
;
	.dbg	line, "main.c", 2347
	ldy     #$0F
L1210:	lda     _next_cluster+4,y
	sta     _cur_cluster+4,y
	dey
	bpl     L1210
;
; memcpy(cur_cluster.layout, cur_cluster.def[0], 4);
;
	.dbg	line, "main.c", 2348
	ldy     #$03
L1216:	lda     _cur_cluster+4,y
	sta     _cur_cluster,y
	dey
	bpl     L1216
;
; cur_cluster.sprite = next_cluster.sprite;
;
	.dbg	line, "main.c", 2349
	lda     _next_cluster+20
	sta     _cur_cluster+20
;
; cur_cluster.id = next_cluster.id;
;
	.dbg	line, "main.c", 2350
	lda     _next_cluster+21
	sta     _cur_cluster+21
;
; cur_block.x = 3; //(BOARD_END_Y_PX_BOARD >> 1);
;
	.dbg	line, "main.c", 2353
	lda     #$03
	sta     _cur_block
;
; cur_block.y = cluster_offsets[cur_cluster.id];
;
	.dbg	line, "main.c", 2354
	ldy     _cur_cluster+21
	lda     _cluster_offsets,y
	sta     _cur_block+1
;
; id = bag[bag_index];
;
	.dbg	line, "main.c", 2368
	ldy     _bag_index
	lda     _bag,y
	sta     _id
;
; if (bag_index == (NUM_CLUSTERS-1))
;
	.dbg	line, "main.c", 2369
	ldx     #$00
	lda     _bag_index
	cmp     #$06
	bne     L1AE1
;
; randomize_bag(bag, NUM_CLUSTERS);
;
	.dbg	line, "main.c", 2371
	lda     #<(_bag)
	ldx     #>(_bag)
	jsr     pushax
	lda     #$07
	jsr     _randomize_bag
;
; bag_index = (bag_index + 1 == NUM_CLUSTERS ? 0 : bag_index + 1);
;
	.dbg	line, "main.c", 2378
	ldx     #$00
L1AE1:	lda     _bag_index
	clc
	adc     #$01
	bcc     L122E
	inx
L122E:	cpx     #$00
	bne     L1230
	cmp     #$07
	bne     L1230
	txa
	jmp     L1AE2
L1230:	lda     _bag_index
	clc
	adc     #$01
L1AE2:	sta     _bag_index
;
; next_cluster.id = id;
;
	.dbg	line, "main.c", 2380
	lda     _id
	sta     _next_cluster+21
;
; memcpy(next_cluster.def, cluster_defs_classic[id], (4 * 4));
;
	.dbg	line, "main.c", 2381
	lda     #<(_next_cluster+4)
	ldx     #>(_next_cluster+4)
	jsr     pushax
	ldx     #$00
	lda     _id
	asl     a
	bcc     L1AE0
	inx
	clc
L1AE0:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; memcpy(next_cluster.layout, next_cluster.def[0], 4);
;
	.dbg	line, "main.c", 2382
	ldy     #$03
L1242:	lda     _next_cluster+4,y
	sta     _next_cluster,y
	dey
	bpl     L1242
;
; next_cluster.sprite = cluster_sprites[id];
;
	.dbg	line, "main.c", 2383
	ldy     _id
	lda     _cluster_sprites,y
	sta     _next_cluster+20
;
; local_iy = 0;
;
	.dbg	line, "main.c", 2387
	lda     #$00
	sta     _local_iy
;
; local_ix = 0;
;
	.dbg	line, "main.c", 2388
	sta     _local_ix
;
; local_t = next_cluster.sprite;
;
	.dbg	line, "main.c", 2389
	sta     _local_t+1
	lda     _next_cluster+20
	sta     _local_t
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 16));
;
	.dbg	line, "main.c", 2392
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$10
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 24));
;
	.dbg	line, "main.c", 2393
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2395
	lda     #$00
	sta     L11FC
L1AE3:	lda     L11FC
	cmp     #$04
	bcs     L1AE5
;
; j = next_cluster.layout[i];
;
	.dbg	line, "main.c", 2398
	ldy     L11FC
	lda     _next_cluster,y
	sta     L11FD
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2401
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2402
	lda     L11FD
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; one_vram_buffer(local_t, get_ppu_addr(cur_nt, 120 + (local_ix << 3), (next_cluster.id != 3 ? 16 : 8) + (local_iy << 3))); //8 + (local_iy << 3)
;
	.dbg	line, "main.c", 2404
	lda     _local_t
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$78
	dey
	sta     (sp),y
	lda     _next_cluster+21
	cmp     #$03
	beq     L1AE4
	lda     #$10
	jmp     L1278
L1AE4:	lda     #$08
L1278:	sta     ptr1
	lda     _local_iy
	asl     a
	asl     a
	asl     a
	clc
	adc     ptr1
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2395
	inc     L11FC
	jmp     L1AE3
;
; if (state != STATE_OVER && is_cluster_colliding())
;
	.dbg	line, "main.c", 2412
L1AE5:	lda     _state
	cmp     #$06
	beq     L1AE6
	jsr     _is_cluster_colliding
	tax
	bne     L127C
L1AE6:	rts
;
; put_cur_cluster();
;
	.dbg	line, "main.c", 2416
L127C:	jsr     _put_cur_cluster
;
; go_to_state(STATE_OVER);
;
	.dbg	line, "main.c", 2417
	lda     #$06
	jmp     _go_to_state
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ rotate_cur_cluster (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate_cur_cluster: near

	.dbg	func, "rotate_cur_cluster", "00", extern, "_rotate_cur_cluster"
	.dbg	sym, "dir", "00", auto, 0

.segment	"BSS"

L129B:
	.res	1,$00
L129C:
	.res	1,$00
L129D:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2446
	jsr     pusha
;
; old_rot = cur_rot;
;
	.dbg	line, "main.c", 2449
	lda     _cur_rot
	sta     L129B
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2450
	lda     _is_last_rotate
	sta     L129C
;
; cur_rot = (cur_rot + dir) & 3; // % 4
;
	.dbg	line, "main.c", 2451
	ldy     #$00
	lda     (sp),y
	clc
	adc     _cur_rot
	and     #$03
	sta     _cur_rot
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4);
;
	.dbg	line, "main.c", 2453
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; if (is_cluster_colliding())
;
	.dbg	line, "main.c", 2455
	jsr     _is_cluster_colliding
	tax
	jeq     L1AFA
;
; if (cur_cluster.id != 2) //Is not line cluster
;
	.dbg	line, "main.c", 2457
	lda     _cur_cluster+21
	cmp     #$02
	jeq     L1AF2
;
; if (((old_rot == 0) & (cur_rot == 1)) || ((old_rot == 2) & (cur_rot == 1)))
;
	.dbg	line, "main.c", 2459
	lda     L129B
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1AEB
	lda     L129B
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1AEC
;
; result = rotate_srs(0);
;
	.dbg	line, "main.c", 2461
L1AEB:	lda     #$00
;
; else if (((old_rot == 1) & (cur_rot == 0)) || ((old_rot == 1) & (cur_rot == 2)))
;
	.dbg	line, "main.c", 2463
	jmp     L1AFC
L1AEC:	lda     L129B
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1AED
	lda     L129B
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1AEE
;
; result = rotate_srs(1);
;
	.dbg	line, "main.c", 2465
L1AED:	lda     #$01
;
; else if (((old_rot == 2) & (cur_rot == 3)) || ((old_rot == 0) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2467
	jmp     L1AFC
L1AEE:	lda     L129B
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1AEF
	lda     L129B
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1AF0
;
; result = rotate_srs(2);
;
	.dbg	line, "main.c", 2469
L1AEF:	lda     #$02
;
; else if (((old_rot == 3) & (cur_rot == 2)) || ((old_rot == 3) & (cur_rot == 0)))
;
	.dbg	line, "main.c", 2471
	jmp     L1AFC
L1AF0:	lda     L129B
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1AF1
	lda     L129B
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	jeq     L1315
;
; result = rotate_srs(3);
;
	.dbg	line, "main.c", 2473
L1AF1:	lda     #$03
	jsr     _rotate_srs
;
; else
;
	.dbg	line, "main.c", 2476
	jmp     L1AE9
;
; if (((old_rot == 0) & (cur_rot == 1)) ||  ((old_rot == 3) & (cur_rot == 2)))
;
	.dbg	line, "main.c", 2478
L1AF2:	lda     L129B
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1AF3
	lda     L129B
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1AF4
;
; result = rotate_srs(4);
;
	.dbg	line, "main.c", 2480
L1AF3:	lda     #$04
	jsr     _rotate_srs
;
; else if (((old_rot == 1) & (cur_rot == 0)) || ((old_rot == 2) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2482
	jmp     L1AE9
L1AF4:	lda     L129B
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1AF5
	lda     L129B
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1AF6
;
; result = rotate_srs(5);
;
	.dbg	line, "main.c", 2484
L1AF5:	lda     #$05
	jsr     _rotate_srs
;
; else if (((old_rot == 1) & (cur_rot == 2)) || ((old_rot == 0) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2486
	jmp     L1AE9
L1AF6:	lda     L129B
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1AF7
	lda     L129B
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1AF8
;
; result = rotate_srs(6);
;
	.dbg	line, "main.c", 2488
L1AF7:	lda     #$06
	jsr     _rotate_srs
;
; else if (((old_rot == 2) & (cur_rot == 1)) || ((old_rot == 3) & (cur_rot == 0)))
;
	.dbg	line, "main.c", 2490
	jmp     L1AE9
L1AF8:	lda     L129B
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1AF9
	lda     L129B
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1315
;
; result = rotate_srs(7);
;
	.dbg	line, "main.c", 2492
L1AF9:	lda     #$07
L1AFC:	jsr     _rotate_srs
;
; else
;
	.dbg	line, "main.c", 2496
	jmp     L1AE9
;
; result = 1;
;
	.dbg	line, "main.c", 2498
L1AFA:	lda     #$01
L1AE9:	sta     L129D
;
; if (result == 0)
;
	.dbg	line, "main.c", 2501
L1315:	lda     L129D
	bne     L1AFB
;
; cur_rot = old_rot;
;
	.dbg	line, "main.c", 2503
	lda     L129B
	sta     _cur_rot
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 2504
	lda     L129C
	sta     _is_last_rotate
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4);
;
	.dbg	line, "main.c", 2505
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; SFX_PLAY_WRAPPER(SOUND_BLOCKED);
;
	.dbg	line, "main.c", 2506
	lda     _sfx_on
	beq     L132C
	lda     #$06
	jsr     pusha
	lda     #$00
;
; else
;
	.dbg	line, "main.c", 2508
	jmp     L1AEA
;
; is_last_rotate = 1;
;
	.dbg	line, "main.c", 2510
L1AFB:	lda     #$01
	sta     _is_last_rotate
;
; SFX_PLAY_WRAPPER(SOUND_ROTATE);
;
	.dbg	line, "main.c", 2511
	lda     _sfx_on
	beq     L132C
	lda     #$00
	jsr     pusha
L1AEA:	jsr     _sfx_play
;
; }
;
	.dbg	line, "main.c", 2513
L132C:	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ rotate_srs (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate_srs: near

	.dbg	func, "rotate_srs", "00", extern, "_rotate_srs"
	.dbg	sym, "case_id", "00", auto, 0

.segment	"BSS"

L1333:
	.res	1,$00
L1334:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2516
	jsr     pusha
;
; for (test = 0; test < 5; ++test)
;
	.dbg	line, "main.c", 2519
	lda     #$00
	sta     L1333
	tax
L1AFE:	lda     L1333
	cmp     #$05
	bcs     L1AFF
;
; morton = srs_rotate_lookup[case_id][test];
;
	.dbg	line, "main.c", 2521
	lda     (sp,x)
	jsr     mulax5
	clc
	adc     #<(_srs_rotate_lookup)
	tay
	txa
	adc     #>(_srs_rotate_lookup)
	tax
	tya
	clc
	adc     L1333
	bcc     L1AFD
	inx
L1AFD:	ldy     #$00
	jsr     ldaidx
	sta     L1334
;
; cur_block.x += (morton_compact_one_by_one(morton >> 0) - 3);
;
	.dbg	line, "main.c", 2522
	jsr     _morton_compact_one_by_one
	sec
	sbc     #$03
	clc
	adc     _cur_block
	sta     _cur_block
;
; cur_block.y += (morton_compact_one_by_one(morton >> 1) - 3);
;
	.dbg	line, "main.c", 2523
	lda     L1334
	cmp     #$80
	ror     a
	jsr     _morton_compact_one_by_one
	sec
	sbc     #$03
	clc
	adc     _cur_block+1
	sta     _cur_block+1
;
; if (!is_cluster_colliding())
;
	.dbg	line, "main.c", 2524
	jsr     _is_cluster_colliding
	tax
	bne     L1337
;
; return 1;
;
	.dbg	line, "main.c", 2526
	lda     #$01
	jmp     incsp1
;
; for (test = 0; test < 5; ++test)
;
	.dbg	line, "main.c", 2519
L1337:	ldx     #$00
	inc     L1333
	jmp     L1AFE
;
; return 0;
;
	.dbg	line, "main.c", 2529
L1AFF:	txa
;
; }
;
	.dbg	line, "main.c", 2530
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ check_tspin (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_tspin: near

	.dbg	func, "check_tspin", "00", extern, "_check_tspin"

.segment	"BSS"

L10FB:
	.res	1,$00
L10FC:
	.res	1,$00
L10FD:
	.res	1,$00
L10FE:
	.res	1,$00

.segment	"CODE"

;
; result = 0;
;
	.dbg	line, "main.c", 2118
	lda     #$00
	sta     L10FE
;
; if (cur_cluster.id == 4 & is_last_rotate == 1) //Is T cluster
;
	.dbg	line, "main.c", 2119
	lda     _cur_cluster+21
	cmp     #$04
	jsr     booleq
	jsr     pusha0
	lda     _is_last_rotate
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	jeq     L1B04
;
; j = cur_cluster.layout[2];
;
	.dbg	line, "main.c", 2122
	lda     _cur_cluster+2
	sta     L10FD
;
; local_ix = morton_compact_one_by_one(j >> 0); 
;
	.dbg	line, "main.c", 2125
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); 
;
	.dbg	line, "main.c", 2126
	lda     L10FD
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2128
	lda     _cur_block
	clc
	adc     _local_ix
	sta     L10FB
;
; y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2129
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     L10FC
;
; result += is_block_occupied(x + 1, y - 1);
;
	.dbg	line, "main.c", 2131
	lda     L10FB
	clc
	adc     #$01
	jsr     pusha
	lda     L10FC
	sec
	sbc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10FE
	sta     L10FE
;
; result += is_block_occupied(x - 1, y + 1);
;
	.dbg	line, "main.c", 2132
	lda     L10FB
	sec
	sbc     #$01
	jsr     pusha
	lda     L10FC
	clc
	adc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10FE
	sta     L10FE
;
; result += is_block_occupied(x + 1, y + 1);
;
	.dbg	line, "main.c", 2133
	lda     L10FB
	clc
	adc     #$01
	jsr     pusha
	lda     L10FC
	clc
	adc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10FE
	sta     L10FE
;
; result += is_block_occupied(x - 1, y - 1);
;
	.dbg	line, "main.c", 2134
	lda     L10FB
	sec
	sbc     #$01
	jsr     pusha
	lda     L10FC
	sec
	sbc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10FE
	sta     L10FE
;
; if (result >= 3)
;
	.dbg	line, "main.c", 2136
	cmp     #$03
	lda     #$00
	bcc     L1B02
;
; result = 1;
;
	.dbg	line, "main.c", 2138
	lda     #$01
;
; result = 0;
;
	.dbg	line, "main.c", 2142
L1B02:	sta     L10FE
;
; return result;
;
	.dbg	line, "main.c", 2146
	ldx     #$00
L1B04:	lda     L10FE
;
; }
;
	.dbg	line, "main.c", 2147
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ go_to_state (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_go_to_state: near

	.dbg	func, "go_to_state", "00", extern, "_go_to_state"
	.dbg	sym, "new_state", "00", auto, 0

.segment	"BSS"

L1360:
	.res	1,$00
L1361:
	.res	1,$00
L1362:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2541
	jsr     pusha
;
; fade_delay = 5;
;
	.dbg	line, "main.c", 2551
	lda     #$05
	sta     L1361
;
; prev_state = state;
;
	.dbg	line, "main.c", 2552
	lda     _state
	sta     L1362
;
; switch (state)
;
	.dbg	line, "main.c", 2554
	lda     _state
;
; }
;
	.dbg	line, "main.c", 2650
	cmp     #$01
	beq     L136B
	cmp     #$03
	beq     L1374
	cmp     #$04
	beq     L1392
	cmp     #$05
	beq     L138E
	cmp     #$07
	jne     L1369
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 2559
L136B:	lda     _music_on
	jeq     L1369
	lda     #$00
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 2560
	jmp     L1369
;
; pal_bg(palette_bg);
;
	.dbg	line, "main.c", 2569
L1374:	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; saved_starting_level = cur_level;
;
	.dbg	line, "main.c", 2570
	lda     _cur_level
	sta     _saved_starting_level
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 2571
	lda     _cur_level
	cmp     #$1E
	bcs     L1B05
	jmp     L1383
L1B05:	lda     #$1E
L1383:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 2572
	lda     #$FF
	sta     _row_to_clear
;
; start_delay_remaining = START_DELAY;
;
	.dbg	line, "main.c", 2573
	lda     #$78
	sta     _start_delay_remaining
;
; display_level();
;
	.dbg	line, "main.c", 2574
	jsr     _display_level
;
; display_score();
;
	.dbg	line, "main.c", 2575
	jsr     _display_score
;
; break;
;
	.dbg	line, "main.c", 2576
	jmp     L1369
;
; pal_bright(4);
;
	.dbg	line, "main.c", 2582
L138E:	lda     #$04
	jsr     _pal_bright
;
; break;
;
	.dbg	line, "main.c", 2583
	jmp     L1369
;
; if (cur_score > high_scores[attack_style])
;
	.dbg	line, "main.c", 2633
L1392:	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	jsr     pusheax
	ldx     #$00
	lda     _attack_style
	jsr     aslax2
	clc
	adc     #<(_high_scores)
	tay
	txa
	adc     #>(_high_scores)
	tax
	tya
	jsr     ldeaxi
	jsr     tosugteax
	beq     L1369
;
; high_scores[attack_style] = cur_score;
;
	.dbg	line, "main.c", 2635
	ldx     #$00
	lda     _attack_style
	jsr     aslax2
	clc
	adc     #<(_high_scores)
	tay
	txa
	adc     #>(_high_scores)
	tax
	tya
	jsr     pushax
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	ldy     #$00
	jsr     steaxspidx
;
; state = new_state;
;
	.dbg	line, "main.c", 2652
L1369:	ldy     #$00
	lda     (sp),y
	sta     _state
;
; ticks_in_state_large = 0;
;
	.dbg	line, "main.c", 2654
	tya
	sta     _ticks_in_state_large
	sta     _ticks_in_state_large+1
;
; switch (state)
;
	.dbg	line, "main.c", 2656
	lda     _state
;
; }
;
	.dbg	line, "main.c", 3066
	beq     L13A2
	cmp     #$01
	beq     L13B1
	cmp     #$02
	beq     L13C0
	cmp     #$03
	jeq     L13FF
	cmp     #$04
	jeq     L1B09
	cmp     #$05
	jeq     L146B
	cmp     #$06
	jeq     L147E
	cmp     #$07
	jeq     L1419
	jmp     incsp1
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2660
L13A2:	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; ppu_off();
;
	.dbg	line, "main.c", 2661
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2662
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(boot_screen);
;
	.dbg	line, "main.c", 2663
	lda     #<(_boot_screen)
	ldx     #>(_boot_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2664
	jsr     _ppu_on_all
;
; break;
;
	.dbg	line, "main.c", 2666
	jmp     incsp1
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2670
L13B1:	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; ppu_off();
;
	.dbg	line, "main.c", 2671
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2672
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(ty_screen);
;
	.dbg	line, "main.c", 2673
	lda     #<(_ty_screen)
	ldx     #>(_ty_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2674
	jsr     _ppu_on_all
;
; break;
;
	.dbg	line, "main.c", 2676
	jmp     incsp1
;
; pal_bg(palette_bg);
;
	.dbg	line, "main.c", 2680
L13C0:	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	.dbg	line, "main.c", 2681
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 2682
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 2683
	lda     #$00
	sta     _time_of_day
;
; cur_konami_index = 0;
;
	.dbg	line, "main.c", 2684
	sta     _cur_konami_index
;
; if (prev_state == STATE_OPTIONS || prev_state == STATE_BOOT || prev_state == STATE_TY || prev_state == STATE_SOUND_TEST || prev_state == STATE_HIGH_SCORE_TABLE)
;
	.dbg	line, "main.c", 2689
	lda     L1362
	cmp     #$03
	beq     L1B07
	lda     L1362
	beq     L1B07
	cmp     #$01
	beq     L1B07
	cmp     #$07
	beq     L1B07
	cmp     #$08
	bne     L1B08
;
; oam_clear();
;
	.dbg	line, "main.c", 2691
L1B07:	jsr     _oam_clear
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 2692
	jsr     _draw_menu_sprites
;
; ppu_off();
;
	.dbg	line, "main.c", 2694
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2695
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 2696
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2697
	jsr     _ppu_on_all
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 2701
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; else
;
	.dbg	line, "main.c", 2704
	jmp     incsp1
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2706
L1B08:	lda     L1362
	cmp     #$06
	bne     L13E4
;
; fade_to_black();
;
	.dbg	line, "main.c", 2708
	jsr     _fade_to_black
;
; reset_gameplay_area();
;
	.dbg	line, "main.c", 2711
L13E4:	jsr     _reset_gameplay_area
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 2713
	jsr     _draw_menu_sprites
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 2715
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, 0x1df); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 2716
	jsr     push0
	ldx     #$01
	lda     #$DF
	jsr     _scroll
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 2717
	lda     _music_on
	beq     L13EE
	lda     #$00
	jsr     _music_play
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 2722
L13EE:	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2725
	lda     L1362
	cmp     #$06
	beq     L1B0C
;
; }
;
	.dbg	line, "main.c", 3067
	jmp     incsp1
;
; fade_from_black();
;
	.dbg	line, "main.c", 2727
L1B0C:	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 2731
	jmp     incsp1
;
; oam_clear();
;
	.dbg	line, "main.c", 2736
L13FF:	jsr     _oam_clear
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2741
	jsr     _clear_vram_buffer
;
; ppu_off();
;
	.dbg	line, "main.c", 2743
	jsr     _ppu_off
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2764
	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2768
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(options_screen);
;
	.dbg	line, "main.c", 2774
	lda     #<(_options_screen)
	ldx     #>(_options_screen)
	jsr     _vram_unrle
;
; cur_level %= 10;
;
	.dbg	line, "main.c", 2783
	lda     _cur_level
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	sta     _cur_level
;
; cur_option = 0;
;
	.dbg	line, "main.c", 2784
	lda     #$00
	sta     _cur_option
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2786
	jsr     _ppu_on_all
;
; display_options();
;
	.dbg	line, "main.c", 2788
	jsr     _display_options
;
; delay(1);
;
	.dbg	line, "main.c", 2790
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2791
	jsr     _clear_vram_buffer
;
; display_highscore();
;
	.dbg	line, "main.c", 2792
	jsr     _display_highscore
;
; break;
;
	.dbg	line, "main.c", 2795
	jmp     incsp1
;
; oam_clear();
;
	.dbg	line, "main.c", 2801
L1419:	jsr     _oam_clear
;
; ppu_off(); // screen off
;
	.dbg	line, "main.c", 2802
	jsr     _ppu_off
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2804
	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2805
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(sound_screen);
;
	.dbg	line, "main.c", 2806
	lda     #<(_sound_screen)
	ldx     #>(_sound_screen)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "main.c", 2808
	jsr     _ppu_on_all
;
; test_song = test_sound = 0;
;
	.dbg	line, "main.c", 2810
	lda     #$00
	sta     _test_sound
	sta     _test_song
;
; test_song_active = 0xff;
;
	.dbg	line, "main.c", 2811
	lda     #$FF
	sta     _test_song_active
;
; display_song();
;
	.dbg	line, "main.c", 2813
	jsr     _display_song
;
; display_sound();
;
	.dbg	line, "main.c", 2814
	jsr     _display_sound
;
; break;
;
	.dbg	line, "main.c", 2816
	jmp     incsp1
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2823
L1B09:	lda     L1362
	cmp     #$06
	bne     L1B0A
;
; reset_gameplay_area();
;
	.dbg	line, "main.c", 2825
	jsr     _reset_gameplay_area
;
; if (prev_state != STATE_PAUSE)
;
	.dbg	line, "main.c", 2828
L1B0A:	lda     L1362
	cmp     #$05
	jeq     L1B0B
;
; oam_clear();
;
	.dbg	line, "main.c", 2830
	jsr     _oam_clear
;
; if (prev_state == STATE_OPTIONS)
;
	.dbg	line, "main.c", 2844
	lda     L1362
	cmp     #$03
	bne     L143D
;
; scroll_y = 0;
;
	.dbg	line, "main.c", 2847
	lda     #$00
	sta     _scroll_y
	sta     _scroll_y+1
;
; while (scroll_y < 240)
;
	.dbg	line, "main.c", 2849
	jmp     L143D
;
; scroll(0, scroll_y);
;
	.dbg	line, "main.c", 2851
L143B:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; delay(1);
;
	.dbg	line, "main.c", 2852
	lda     #$01
	jsr     _delay
;
; scroll_y += 4;
;
	.dbg	line, "main.c", 2853
	lda     #$04
	clc
	adc     _scroll_y
	sta     _scroll_y
	bcc     L143D
	inc     _scroll_y+1
;
; while (scroll_y < 240)
;
	.dbg	line, "main.c", 2849
L143D:	lda     _scroll_y+1
	cmp     #$00
	bne     L143F
	lda     _scroll_y
	cmp     #$F0
L143F:	bcc     L143B
;
; scroll_y = 239;
;
	.dbg	line, "main.c", 2856
	ldx     #$00
	lda     #$EF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, scroll_y);
;
	.dbg	line, "main.c", 2857
	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 2860
	jsr     _spawn_new_cluster
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 2862
	jsr     _spawn_new_cluster
;
; memfill(attack_row_status, 0, BOARD_WIDTH);
;
	.dbg	line, "main.c", 2864
	jsr     decsp3
	lda     #<(_attack_row_status)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_attack_row_status)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$0A
	jsr     _memfill
;
; srand(tick_count_large);
;
	.dbg	line, "main.c", 2867
	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     _srand
;
; i = rand() % BOARD_WIDTH;
;
	.dbg	line, "main.c", 2870
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	sta     L1360
;
; attack_row_status[i] = 1;
;
	.dbg	line, "main.c", 2871
	ldy     L1360
	lda     #$01
	sta     _attack_row_status,y
;
; require_new_down_button = 1;
;
	.dbg	line, "main.c", 2873
	sta     _require_new_down_button
;
; if (attack_style == ATTACK_ON_TIME)
;
	.dbg	line, "main.c", 2874
	lda     _attack_style
	cmp     #$01
	bne     L1B0B
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 2876
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; cur_gameplay_music = select_gameplay_music;
;
	.dbg	line, "main.c", 2887
L1B0B:	lda     _select_gameplay_music
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(select_gameplay_music);
;
	.dbg	line, "main.c", 2888
	lda     _music_on
	bne     L1B0D
;
; }
;
	.dbg	line, "main.c", 3067
	jmp     incsp1
;
; MUSIC_PLAY_WRAPPER(select_gameplay_music);
;
	.dbg	line, "main.c", 2888
L1B0D:	lda     _select_gameplay_music
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 2891
	jmp     incsp1
;
; pal_bright(2);
;
	.dbg	line, "main.c", 2896
L146B:	lda     #$02
	jsr     _pal_bright
;
; if(select_gameplay_music == MUSIC_MUSICA){
;
	.dbg	line, "main.c", 2897
	lda     _select_gameplay_music
	cmp     #$04
	bne     L146E
;
; music_stop();
;
	.dbg	line, "main.c", 2898
	jsr     _music_stop
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_PAUSE);
;
	.dbg	line, "main.c", 2899
	lda     _music_on
	bne     L1B0E
;
; }
;
	.dbg	line, "main.c", 3067
	jmp     incsp1
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_PAUSE);
;
	.dbg	line, "main.c", 2899
L1B0E:	lda     #$09
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; }else{
;
	.dbg	line, "main.c", 2901
	jmp     incsp1
;
; MUSIC_PLAY_WRAPPER(MUSIC_PAUSE);
;
	.dbg	line, "main.c", 2902
L146E:	lda     _music_on
	bne     L1B0F
;
; }
;
	.dbg	line, "main.c", 3067
	jmp     incsp1
;
; MUSIC_PLAY_WRAPPER(MUSIC_PAUSE);
;
	.dbg	line, "main.c", 2902
L1B0F:	lda     #$03
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 2904
	jmp     incsp1
;
; delay(1);
;
	.dbg	line, "main.c", 2910
L147E:	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2911
	jsr     _clear_vram_buffer
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 2914
	jsr     _draw_gameplay_sprites
;
; music_stop();
;
	.dbg	line, "main.c", 2916
	jsr     _music_stop
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_GAMEOVER);
;
	.dbg	line, "main.c", 2917
	lda     _music_on
	beq     L1484
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (music_on)
;
	.dbg	line, "main.c", 2921
L1484:	lda     _music_on
	beq     L148A
;
; delay(120);
;
	.dbg	line, "main.c", 2923
	lda     #$78
	jsr     _delay
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_GAMEOVER_SONG);
;
	.dbg	line, "main.c", 2928
L148A:	lda     _music_on
	beq     L148E
	lda     #$0C
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_bright(5);
;
	.dbg	line, "main.c", 2934
L148E:	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2935
	lda     L1361
	jsr     _delay
;
; pal_bright(6);
;
	.dbg	line, "main.c", 2936
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2937
	lda     L1361
	jsr     _delay
;
; pal_bright(7);
;
	.dbg	line, "main.c", 2938
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2939
	lda     L1361
	jsr     _delay
;
; pal_bright(8);
;
	.dbg	line, "main.c", 2940
	lda     #$08
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2941
	lda     L1361
	jsr     _delay
;
; address = get_ppu_addr(cur_nt, 96, 14 << 3);
;
	.dbg	line, "main.c", 2943
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("GAME OVER!", 10, address);
;
	.dbg	line, "main.c", 2944
	jsr     decsp3
	lda     #<(L14AA)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L14AA)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; address = get_ppu_addr(cur_nt, 96, 15 << 3);
;
	.dbg	line, "main.c", 2946
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$78
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("A-RESTART ", 10, address);
;
	.dbg	line, "main.c", 2947
	jsr     decsp3
	lda     #<(L14B4)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L14B4)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; address = get_ppu_addr(cur_nt, 96, 16 << 3);
;
	.dbg	line, "main.c", 2948
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("B-QUIT    ", 10, address);
;
	.dbg	line, "main.c", 2949
	jsr     decsp3
	lda     #<(L14BE)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L14BE)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; pal_bright(7);
;
	.dbg	line, "main.c", 2951
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2952
	lda     L1361
	jsr     _delay
;
; pal_bright(6);
;
	.dbg	line, "main.c", 2953
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2954
	lda     L1361
	jsr     _delay
;
; pal_bright(5);
;
	.dbg	line, "main.c", 2955
	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2956
	lda     L1361
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "main.c", 2957
	lda     #$04
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2958
	lda     L1361
	jsr     _delay
;
; break;
;
	.dbg	line, "main.c", 2959
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ inc_lines_cleared (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inc_lines_cleared: near

	.dbg	func, "inc_lines_cleared", "00", extern, "_inc_lines_cleared"

.segment	"BSS"

L14D4:
	.res	1,$00

.segment	"CODE"

;
; ++lines_cleared_one;
;
	.dbg	line, "main.c", 3072
	inc     _lines_cleared_one
;
; if (lines_cleared_one == 10)
;
	.dbg	line, "main.c", 3074
	lda     _lines_cleared_one
	cmp     #$0A
	beq     L1B18
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3130
	jmp     _display_lines_cleared
;
; lines_total = (lines_cleared_hundred * 10) + lines_cleared_ten;
;
	.dbg	line, "main.c", 3077
L1B18:	ldx     #$00
	lda     _lines_cleared_hundred
	jsr     mulax10
	clc
	adc     _lines_cleared_ten
	sta     L14D4
;
; if (cur_level <= lines_total)
;
	.dbg	line, "main.c", 3079
	lda     _cur_level
	sec
	sbc     L14D4
	sta     tmp1
	lda     tmp1
	beq     L1B12
	bcs     L1B16
;
; ++cur_level;
;
	.dbg	line, "main.c", 3081
L1B12:	inc     _cur_level
;
; if (cur_level <= 29)
;
	.dbg	line, "main.c", 3084
	lda     _cur_level
	cmp     #$1E
	bcs     L1B14
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 3086
	cmp     #$1E
	bcs     L1B13
	jmp     L14EA
L1B13:	lda     #$1E
L14EA:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; else if (cur_level < 40) // raise the floor 10 levels.
;
	.dbg	line, "main.c", 3088
	jmp     L1B16
L1B14:	lda     _cur_level
	cmp     #$28
	bcs     L1B16
;
; if (cur_level == 30)
;
	.dbg	line, "main.c", 3090
	cmp     #$1E
	bne     L1B15
;
; one_vram_buffer(SKULL_SPRITE, get_ppu_addr(cur_nt, 4 << 3, 9 << 3)); // skull
;
	.dbg	line, "main.c", 3092
	lda     #$3B
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; kill_row_queued = 1;
;
	.dbg	line, "main.c", 3094
L1B15:	lda     #$01
	sta     _kill_row_queued
;
; ++time_of_day;
;
	.dbg	line, "main.c", 3098
L1B16:	inc     _time_of_day
;
; if (time_of_day >= NUM_TIMES_OF_DAY)
;
	.dbg	line, "main.c", 3099
	lda     _time_of_day
	cmp     #$08
	ldx     #$00
	bcc     L1B17
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 3101
	stx     _time_of_day
;
; pal_bg(palette_bg_list[time_of_day]);
;
	.dbg	line, "main.c", 3104
L1B17:	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	tay
	txa
	adc     #>(_palette_bg_list)
	tax
	tya
	jsr     _pal_bg
;
; memcpy(temp_pal, palette_sp, sizeof(palette_sp));
;
	.dbg	line, "main.c", 3107
	ldy     #$0F
L1508:	lda     _palette_sp,y
	sta     _temp_pal,y
	dey
	bpl     L1508
;
; temp_pal[1] = palette_bg_list[time_of_day][1];
;
	.dbg	line, "main.c", 3109
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temp_pal+1
;
; temp_pal[2] = palette_bg_list[time_of_day][2];
;
	.dbg	line, "main.c", 3110
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+2
;
; temp_pal[3] = palette_bg_list[time_of_day][3];
;
	.dbg	line, "main.c", 3111
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+3
;
; temp_pal[6] = palette_bg_list[time_of_day][14];
;
	.dbg	line, "main.c", 3113
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$0E
	lda     (ptr1),y
	sta     _temp_pal+6
;
; temp_pal[7] = palette_bg_list[time_of_day][15];
;
	.dbg	line, "main.c", 3114
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+7
;
; temp_pal[10] = palette_bg_list[time_of_day][2];
;
	.dbg	line, "main.c", 3116
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     _temp_pal+10
;
; pal_spr(temp_pal);
;
	.dbg	line, "main.c", 3118
	lda     #<(_temp_pal)
	ldx     #>(_temp_pal)
	jsr     _pal_spr
;
; display_level();
;
	.dbg	line, "main.c", 3120
	jsr     _display_level
;
; lines_cleared_one = 0;
;
	.dbg	line, "main.c", 3122
	lda     #$00
	sta     _lines_cleared_one
;
; ++lines_cleared_ten;
;
	.dbg	line, "main.c", 3123
	inc     _lines_cleared_ten
;
; if (lines_cleared_ten == 10)
;
	.dbg	line, "main.c", 3124
	lda     _lines_cleared_ten
	cmp     #$0A
	bne     L152D
;
; lines_cleared_ten = 0;
;
	.dbg	line, "main.c", 3126
	lda     #$00
	sta     _lines_cleared_ten
;
; ++lines_cleared_hundred;
;
	.dbg	line, "main.c", 3127
	inc     _lines_cleared_hundred
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3130
L152D:	jmp     _display_lines_cleared
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_lines_cleared (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_lines_cleared: near

	.dbg	func, "display_lines_cleared", "00", extern, "_display_lines_cleared"

.segment	"CODE"

;
; one_vram_buffer('0' + lines_cleared_hundred, get_ppu_addr(cur_nt, 4 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3135
	lda     _lines_cleared_hundred
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; one_vram_buffer('0' + lines_cleared_ten, get_ppu_addr(cur_nt, 5 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3136
	lda     _lines_cleared_ten
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$28
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; one_vram_buffer('0' + lines_cleared_one, get_ppu_addr(cur_nt, 6 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3137
	lda     _lines_cleared_one
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jmp     _one_vram_buffer
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_score: near

	.dbg	func, "display_score", "00", extern, "_display_score"

.segment	"BSS"

L154A:
	.res	4,$00
L154B:
	.res	1,$00

.segment	"CODE"

;
; temp_score = cur_score; //cur_score;
;
	.dbg	line, "main.c", 3145
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	sta     L154A
	stx     L154A+1
	ldy     sreg
	sty     L154A+2
	ldy     sreg+1
	sty     L154A+3
;
; multi_vram_buffer_horz("      ", 6, get_ppu_addr(cur_nt, 0, 6 << 3));
;
	.dbg	line, "main.c", 3148
	jsr     decsp3
	lda     #<(L154F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L154F)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; i = 0;
;
	.dbg	line, "main.c", 3150
	lda     #$00
	sta     L154B
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3151
	jmp     L155A
;
; unsigned char digit = temp_score % 10;
;
	.dbg	line, "main.c", 3153
L1558:	lda     L154A+3
	sta     sreg+1
	lda     L154A+2
	sta     sreg
	ldx     L154A+1
	lda     L154A
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (6 << 3) - (i << 3), 6 << 3));
;
	.dbg	line, "main.c", 3154
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L154B
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_score = temp_score / 10;
;
	.dbg	line, "main.c", 3156
	lda     L154A+3
	sta     sreg+1
	lda     L154A+2
	sta     sreg
	ldx     L154A+1
	lda     L154A
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L154A
	stx     L154A+1
	ldy     sreg
	sty     L154A+2
	ldy     sreg+1
	sty     L154A+3
;
; ++i;
;
	.dbg	line, "main.c", 3157
	inc     L154B
;
; }
;
	.dbg	line, "main.c", 3158
	jsr     incsp1
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3151
L155A:	lda     L154A+3
	sta     sreg+1
	lda     L154A+2
	sta     sreg
	ldx     L154A+1
	lda     L154A
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L1558
;
; }
;
	.dbg	line, "main.c", 3159
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_combo (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_combo: near

	.dbg	func, "display_combo", "00", extern, "_display_combo"

.segment	"BSS"

L156A:
	.res	4,$00
L156B:
	.res	1,$00

.segment	"CODE"

;
; temp_combo = combo_count; //cur_score;
;
	.dbg	line, "main.c", 3167
	lda     _combo_count
	ldx     #$00
	sta     L156A
	stx     L156A+1
	stx     L156A+2
	stx     L156A+3
;
; multi_vram_buffer_horz("   ", 3, get_ppu_addr(cur_nt, (26 << 3) , (8 << 3) ));
;
	.dbg	line, "main.c", 3170
	jsr     decsp3
	lda     #<(L156F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L156F)
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; i = 0;
;
	.dbg	line, "main.c", 3172
	lda     #$00
	sta     L156B
;
; while (temp_combo != 0)
;
	.dbg	line, "main.c", 3173
	jmp     L157C
;
; unsigned char digit = temp_combo % 10;
;
	.dbg	line, "main.c", 3175
L157A:	lda     L156A+3
	sta     sreg+1
	lda     L156A+2
	sta     sreg
	ldx     L156A+1
	lda     L156A
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (28 << 3) - (i << 3), (8 << 3)));
;
	.dbg	line, "main.c", 3176
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$E0
	jsr     pusha0
	lda     L156B
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_combo = temp_combo / 10;
;
	.dbg	line, "main.c", 3178
	lda     L156A+3
	sta     sreg+1
	lda     L156A+2
	sta     sreg
	ldx     L156A+1
	lda     L156A
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L156A
	stx     L156A+1
	ldy     sreg
	sty     L156A+2
	ldy     sreg+1
	sty     L156A+3
;
; ++i;
;
	.dbg	line, "main.c", 3179
	inc     L156B
;
; }
;
	.dbg	line, "main.c", 3180
	jsr     incsp1
;
; while (temp_combo != 0)
;
	.dbg	line, "main.c", 3173
L157C:	lda     L156A+3
	sta     sreg+1
	lda     L156A+2
	sta     sreg
	ldx     L156A+1
	lda     L156A
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L157A
;
; }
;
	.dbg	line, "main.c", 3181
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_highscore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_highscore: near

	.dbg	func, "display_highscore", "00", extern, "_display_highscore"

.segment	"BSS"

L158D:
	.res	4,$00
L158E:
	.res	1,$00

.segment	"CODE"

;
; temp_score = high_scores[attack_style];
;
	.dbg	line, "main.c", 3189
	ldx     #$00
	lda     _attack_style
	jsr     aslax2
	clc
	adc     #<(_high_scores)
	tay
	txa
	adc     #>(_high_scores)
	tax
	tya
	jsr     ldeaxi
	sta     L158D
	stx     L158D+1
	ldy     sreg
	sty     L158D+2
	ldy     sreg+1
	sty     L158D+3
;
; multi_vram_buffer_horz("0000000", 7, get_ppu_addr(0, 17 << 3, 27 << 3));
;
	.dbg	line, "main.c", 3192
	jsr     decsp3
	lda     #<(L1593)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1593)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     #$D8
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; i = 0;
;
	.dbg	line, "main.c", 3194
	lda     #$00
	sta     L158E
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3195
	jmp     L159E
;
; unsigned char digit = temp_score % 10;
;
	.dbg	line, "main.c", 3197
L159C:	lda     L158D+3
	sta     sreg+1
	lda     L158D+2
	sta     sreg
	ldx     L158D+1
	lda     L158D
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(0, (23 << 3) - (i << 3), 27 << 3));
;
	.dbg	line, "main.c", 3198
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$B8
	jsr     pusha0
	lda     L158E
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$D8
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_score = temp_score / 10;
;
	.dbg	line, "main.c", 3200
	lda     L158D+3
	sta     sreg+1
	lda     L158D+2
	sta     sreg
	ldx     L158D+1
	lda     L158D
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L158D
	stx     L158D+1
	ldy     sreg
	sty     L158D+2
	ldy     sreg+1
	sty     L158D+3
;
; ++i;
;
	.dbg	line, "main.c", 3201
	inc     L158E
;
; }
;
	.dbg	line, "main.c", 3202
	jsr     incsp1
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3195
L159E:	lda     L158D+3
	sta     sreg+1
	lda     L158D+2
	sta     sreg
	ldx     L158D+1
	lda     L158D
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L159C
;
; }
;
	.dbg	line, "main.c", 3203
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_level: near

	.dbg	func, "display_level", "00", extern, "_display_level"

.segment	"BSS"

L15AE:
	.res	1,$00
L15AF:
	.res	1,$00

.segment	"CODE"

;
; temp_level = cur_level;
;
	.dbg	line, "main.c", 3213
	lda     _cur_level
	sta     L15AE
;
; i = 0;
;
	.dbg	line, "main.c", 3214
	lda     #$00
	sta     L15AF
;
; if (cur_level < 10)
;
	.dbg	line, "main.c", 3216
	tax
	lda     _cur_level
	cmp     #$0A
	jcs     L1B1A
;
; multi_vram_buffer_horz("00", 2, get_ppu_addr(cur_nt, 5 << 3, 9 << 3));
;
	.dbg	line, "main.c", 3218
	jsr     decsp3
	lda     #<(L15B7)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L15B7)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$28
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp_level != 0)
;
	.dbg	line, "main.c", 3221
	jmp     L15C0
;
; unsigned char digit = temp_level % 10;
;
	.dbg	line, "main.c", 3223
L1B19:	lda     L15AE
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (6 << 3) - (i << 3), 9 << 3));
;
	.dbg	line, "main.c", 3224
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L15AF
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_level = temp_level / 10;
;
	.dbg	line, "main.c", 3226
	lda     L15AE
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L15AE
;
; ++i;
;
	.dbg	line, "main.c", 3227
	inc     L15AF
;
; }
;
	.dbg	line, "main.c", 3228
	jsr     incsp1
;
; while (temp_level != 0)
;
	.dbg	line, "main.c", 3221
L15C0:	ldx     #$00
L1B1A:	lda     L15AE
	bne     L1B19
;
; }
;
	.dbg	line, "main.c", 3229
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ clear_rows_in_data (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_rows_in_data: near

	.dbg	func, "clear_rows_in_data", "00", extern, "_clear_rows_in_data"
	.dbg	sym, "start_y", "00", auto, 1
	.dbg	sym, "is_attack", "00", auto, 0

.segment	"BSS"

L15D0:
	.res	1,$00
L15D1:
	.res	1,$00
L15D2:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 3234
	jsr     pusha
;
; i = 0;
;
	.dbg	line, "main.c", 3240
	lda     #$00
	sta     L15D1
;
; prev_level = cur_level;
;
	.dbg	line, "main.c", 3241
	lda     _cur_level
	sta     L15D2
;
; memfill(lines_cleared_y, 0xff, 4);
;
	.dbg	line, "main.c", 3244
	jsr     decsp3
	lda     #<(_lines_cleared_y)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lines_cleared_y)
	sta     (sp),y
	lda     #$FF
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$04
	jsr     _memfill
;
; for (local_iy = start_y; local_iy > BOARD_OOB_END; --local_iy)
;
	.dbg	line, "main.c", 3247
	ldy     #$01
	lda     (sp),y
	sta     _local_iy
L1B24:	lda     _local_iy
	cmp     #$04
	jcc     L1B2F
;
; line_complete = 1;
;
	.dbg	line, "main.c", 3251
	lda     #$01
	sta     L15D0
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3252
	lda     #$00
	sta     _local_ix
L1B25:	lda     _local_ix
	cmp     #$0A
	bcs     L15E6
;
; if (game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] == 0 || game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] == 1)
;
	.dbg	line, "main.c", 3255
	ldy     _local_iy
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L1B1B
	inx
L1B1B:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	beq     L1B40
	ldy     _local_iy
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L1B1C
	inx
L1B1C:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	cmp     #$01
	bne     L1B29
;
; line_complete = 0;
;
	.dbg	line, "main.c", 3259
	lda     #$00
L1B40:	sta     L15D0
;
; break;
;
	.dbg	line, "main.c", 3260
	jmp     L15E6
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3252
L1B29:	inc     _local_ix
	jmp     L1B25
;
; if (line_complete)
;
	.dbg	line, "main.c", 3267
L15E6:	lda     L15D0
	beq     L1B2E
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 3281
	lda     #$00
	sta     _local_ix
L1B2A:	lda     _local_ix
	cmp     #$0A
	bcs     L1603
;
; if (attack_row_status[local_ix] > ATTACK_QUEUE_SIZE && attack_row_status[local_ix] - (ATTACK_QUEUE_SIZE + 1) >= (BOARD_END_Y_PX_BOARD - local_iy))
;
	.dbg	line, "main.c", 3283
	ldy     _local_ix
	lda     _attack_row_status,y
	cmp     #$04
	bcc     L1B2D
	ldy     _local_ix
	ldx     #$00
	lda     _attack_row_status,y
	sec
	sbc     #$04
	bcs     L1613
	dex
L1613:	jsr     pushax
	lda     #$17
	sec
	sbc     _local_iy
	jsr     tosicmp0
	bcc     L1B2D
;
; hit_reaction_remaining = 60;
;
	.dbg	line, "main.c", 3285
	lda     #$3C
	sta     _hit_reaction_remaining
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 3281
L1B2D:	inc     _local_ix
	jmp     L1B2A
;
; inc_lines_cleared();
;
	.dbg	line, "main.c", 3290
L1603:	jsr     _inc_lines_cleared
;
; memcpy(&game_board[TILE_TO_BOARD_INDEX(0, local_iy)], empty_row, 10);
;
	.dbg	line, "main.c", 3293
	ldy     _local_iy
	lda     _board_lookup_y,y
	clc
	adc     #<(_game_board)
	tay
	lda     #$00
	adc     #>(_game_board)
	tax
	tya
	jsr     pushax
	lda     #<(_empty_row)
	ldx     #>(_empty_row)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _memcpy
;
; lines_cleared_y[i] = local_iy;
;
	.dbg	line, "main.c", 3297
	ldy     L15D1
	lda     _local_iy
	sta     _lines_cleared_y,y
;
; ++i;
;
	.dbg	line, "main.c", 3300
	inc     L15D1
;
; for (local_iy = start_y; local_iy > BOARD_OOB_END; --local_iy)
;
	.dbg	line, "main.c", 3247
L1B2E:	dec     _local_iy
	jmp     L1B24
;
; if (i == 0 )
;
	.dbg	line, "main.c", 3306
L1B2F:	lda     L15D1
	jne     L1B33
;
; last_lines = 0;
;
	.dbg	line, "main.c", 3308
	sta     _last_lines
;
; if(is_attack == 0){
;
	.dbg	line, "main.c", 3310
	tay
	lda     (sp),y
	bne     L1B32
;
; if(combo_count > 1){
;
	.dbg	line, "main.c", 3311
	lda     _combo_count
	cmp     #$02
	tya
	bcc     L1B31
;
; cur_score += 50 * (combo_count - 1) * (cur_level + 1);
;
	.dbg	line, "main.c", 3312
	tax
	lda     _combo_count
	sec
	sbc     #$01
	bcs     L1634
	dex
L1634:	jsr     pushax
	lda     #$32
	jsr     tosumula0
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L1636
	inx
L1636:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; combo_count = 0;
;
	.dbg	line, "main.c", 3314
	lda     #$00
L1B31:	sta     _combo_count
;
; display_combo();
;
	.dbg	line, "main.c", 3315
	jsr     _display_combo
;
; if(is_tspin != 0){
;
	.dbg	line, "main.c", 3317
L1B32:	lda     _is_tspin
	beq     L163A
;
; cur_score += (100 * is_tspin * (cur_level + 1));
;
	.dbg	line, "main.c", 3318
	lda     _is_tspin
	jsr     pusha0
	lda     #$64
	jsr     tosumula0
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L1640
	inx
L1640:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; display_score();
;
	.dbg	line, "main.c", 3319
	jsr     _display_score
;
; multi_vram_buffer_horz("TSPIN", 5, get_ppu_addr(cur_nt, (27 << 3) , (9 << 3) ));
;
	.dbg	line, "main.c", 3321
	jsr     decsp3
	lda     #<(L1643)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1643)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; else{
;
	.dbg	line, "main.c", 3323
	jmp     incsp2
;
; multi_vram_buffer_horz("     ", 5, get_ppu_addr(cur_nt, (27 << 3) , (9 << 3) ));
;
	.dbg	line, "main.c", 3324
L163A:	jsr     decsp3
	lda     #<(L164E)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L164E)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; else if (i > 0)
;
	.dbg	line, "main.c", 3327
	jmp     incsp2
L1B33:	lda     L15D1
	bne     L1B4E
;
; }
;
	.dbg	line, "main.c", 3447
	jmp     incsp2
;
; if (prev_level != cur_level)
;
	.dbg	line, "main.c", 3329
L1B4E:	lda     _cur_level
	cmp     L15D2
	beq     L1B35
;
; if (i == 4|| (i == 3 & is_tspin != 0))
;
	.dbg	line, "main.c", 3331
	lda     L15D1
	cmp     #$04
	beq     L1B34
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L165C
;
; screen_shake_remaining = 5;
;
	.dbg	line, "main.c", 3333
L1B34:	lda     #$05
	sta     _screen_shake_remaining
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP_MULTI);
;
	.dbg	line, "main.c", 3334
	lda     _sfx_on
	beq     L167D
	lda     #$08
;
; else
;
	.dbg	line, "main.c", 3336
	jmp     L1B41
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP);
;
	.dbg	line, "main.c", 3338
L165C:	lda     _sfx_on
	beq     L1B37
	lda     #$07
;
; else if (i == 4 || (i == 3 & is_tspin != 0))
;
	.dbg	line, "main.c", 3341
	jmp     L1B41
L1B35:	lda     L15D1
	cmp     #$04
	beq     L1B36
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L1670
;
; screen_shake_remaining = 5;
;
	.dbg	line, "main.c", 3345
L1B36:	ldx     #$00
	lda     #$05
	sta     _screen_shake_remaining
;
; SFX_PLAY_WRAPPER(SOUND_MULTIROW);
;
	.dbg	line, "main.c", 3346
	lda     _sfx_on
	beq     L1B37
	lda     #$03
;
; else
;
	.dbg	line, "main.c", 3348
	jmp     L1B41
;
; SFX_PLAY_WRAPPER(SOUND_ROW);
;
	.dbg	line, "main.c", 3351
L1670:	lda     _sfx_on
	beq     L1B37
	lda     #$02
L1B41:	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; switch (i)
;
	.dbg	line, "main.c", 3355
L167D:	ldx     #$00
L1B37:	lda     L15D1
;
; }
;
	.dbg	line, "main.c", 3381
	cmp     #$01
	beq     L1B38
	cmp     #$02
	beq     L168B
	cmp     #$03
	beq     L168F
	cmp     #$04
	beq     L1693
	jmp     L1693
;
; line_score_mod = 100;
;
	.dbg	line, "main.c", 3359
L1B38:	lda     #$64
;
; break;
;
	.dbg	line, "main.c", 3360
	jmp     L1B3D
;
; line_score_mod = 300;
;
	.dbg	line, "main.c", 3365
L168B:	ldx     #$01
	lda     #$2C
;
; break;
;
	.dbg	line, "main.c", 3366
	jmp     L1B3D
;
; line_score_mod = 500;
;
	.dbg	line, "main.c", 3371
L168F:	ldx     #$01
	lda     #$F4
;
; break;
;
	.dbg	line, "main.c", 3372
	jmp     L1B3D
;
; line_score_mod = 800;
;
	.dbg	line, "main.c", 3378
L1693:	ldx     #$03
	lda     #$20
L1B3D:	sta     _line_score_mod
	stx     _line_score_mod+1
;
; if(last_lines == i & i == 4) //Back to Back Tetris x 1.5
;
	.dbg	line, "main.c", 3382
	lda     L15D1
	cmp     _last_lines
	jsr     booleq
	jsr     pusha0
	lda     L15D1
	cmp     #$04
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1B39
;
; line_score_mod = line_score_mod + (line_score_mod / 2);
;
	.dbg	line, "main.c", 3384
	lda     _line_score_mod
	ldx     _line_score_mod+1
	jsr     shrax1
	clc
	adc     _line_score_mod
	sta     _line_score_mod
	txa
	adc     _line_score_mod+1
	sta     _line_score_mod+1
;
; multi_vram_buffer_horz("BTB-T", 5, get_ppu_addr(cur_nt, (27 << 3) , (9 << 3) ));
;
	.dbg	line, "main.c", 3385
	jsr     decsp3
	lda     #<(L169D)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L169D)
;
; else if(is_tspin != 0){
;
	.dbg	line, "main.c", 3387
	jmp     L1B4D
L1B39:	lda     _is_tspin
	beq     L16A7
;
; multi_vram_buffer_horz("TSPIN", 5, get_ppu_addr(cur_nt, (27 << 3) , (9 << 3) ));
;
	.dbg	line, "main.c", 3388
	jsr     decsp3
	lda     #<(L16AA)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L16AA)
;
; else{
;
	.dbg	line, "main.c", 3390
	jmp     L1B4D
;
; multi_vram_buffer_horz("     ", 5, get_ppu_addr(cur_nt, (27 << 3) , (9 << 3) ));
;
	.dbg	line, "main.c", 3391
L16A7:	jsr     decsp3
	lda     #<(L16B5)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L16B5)
L1B4D:	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; cur_score += (line_score_mod * (4*is_tspin + 1) * (cur_level + 1)); 
;
	.dbg	line, "main.c", 3393
	lda     _line_score_mod
	ldx     _line_score_mod+1
	jsr     pushax
	ldx     #$00
	lda     _is_tspin
	jsr     shlax2
	clc
	adc     #$01
	bcc     L16C2
	inx
L16C2:	jsr     tosumulax
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L16C4
	inx
L16C4:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; display_score();
;
	.dbg	line, "main.c", 3394
	jsr     _display_score
;
; if(is_attack == 0){
;
	.dbg	line, "main.c", 3395
	ldy     #$00
	lda     (sp),y
	bne     L1B3A
;
; combo_count += 1;
;
	.dbg	line, "main.c", 3396
	inc     _combo_count
;
; display_combo();
;
	.dbg	line, "main.c", 3397
	jsr     _display_combo
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 3400
L1B3A:	lda     _hit_reaction_remaining
	beq     L16CB
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3402
	jsr     _draw_gameplay_sprites
;
; reveal_empty_rows_to_nt();
;
	.dbg	line, "main.c", 3405
L16CB:	jsr     _reveal_empty_rows_to_nt
;
; if(is_perfect_clear())
;
	.dbg	line, "main.c", 3407
	jsr     _is_perfect_clear
	tax
	jeq     L1B3B
;
; switch (i)
;
	.dbg	line, "main.c", 3409
	lda     L15D1
;
; }
;
	.dbg	line, "main.c", 3435
	cmp     #$01
	beq     L16D5
	cmp     #$02
	beq     L16D9
	cmp     #$03
	beq     L16DD
	cmp     #$04
	beq     L16E1
	jmp     L16E1
;
; line_score_mod = 800;
;
	.dbg	line, "main.c", 3413
L16D5:	ldx     #$03
	lda     #$20
;
; break;
;
	.dbg	line, "main.c", 3414
	jmp     L1B3F
;
; line_score_mod = 1200;
;
	.dbg	line, "main.c", 3419
L16D9:	ldx     #$04
	lda     #$B0
;
; break;
;
	.dbg	line, "main.c", 3420
	jmp     L1B3F
;
; line_score_mod = 1800;
;
	.dbg	line, "main.c", 3425
L16DD:	ldx     #$07
	lda     #$08
;
; break;
;
	.dbg	line, "main.c", 3426
	jmp     L1B3F
;
; line_score_mod = 2000;
;
	.dbg	line, "main.c", 3432
L16E1:	ldx     #$07
	lda     #$D0
L1B3F:	sta     _line_score_mod
	stx     _line_score_mod+1
;
; if(last_lines == i & i == 4) //Back to Back Tetris
;
	.dbg	line, "main.c", 3436
	lda     L15D1
	cmp     _last_lines
	jsr     booleq
	jsr     pusha0
	lda     L15D1
	cmp     #$04
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L16E5
;
; line_score_mod = 3200;
;
	.dbg	line, "main.c", 3438
	ldx     #$0C
	lda     #$80
	sta     _line_score_mod
	stx     _line_score_mod+1
;
; cur_score += (line_score_mod * (cur_level + 1));
;
	.dbg	line, "main.c", 3440
L16E5:	lda     _line_score_mod
	ldx     _line_score_mod+1
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L16ED
	inx
L16ED:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; multi_vram_buffer_horz("CLEAR", 5, get_ppu_addr(cur_nt, (27 << 3) , (9 << 3) ));
;
	.dbg	line, "main.c", 3441
	jsr     decsp3
	lda     #<(L16EF)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L16EF)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$D8
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; last_lines = i; //Set last line equal to lines cleared
;
	.dbg	line, "main.c", 3444
L1B3B:	lda     L15D1
	sta     _last_lines
;
; }
;
	.dbg	line, "main.c", 3447
	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ reveal_empty_rows_to_nt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reveal_empty_rows_to_nt: near

	.dbg	func, "reveal_empty_rows_to_nt", "00", extern, "_reveal_empty_rows_to_nt"

.segment	"BSS"

L16FB:
	.res	1,$00
L16FC:
	.res	1,$00

.segment	"CODE"

;
; delay(1);
;
	.dbg	line, "main.c", 3460
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3461
	jsr     _clear_vram_buffer
;
; for (ix = 4; ix >= 0; --ix)
;
	.dbg	line, "main.c", 3464
	lda     #$04
	sta     L16FB
L1B52:	ldx     L16FB
	bpl     L1B55
;
; try_collapse_empty_row_data();
;
	.dbg	line, "main.c", 3503
	jmp     _try_collapse_empty_row_data
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3469
L1B55:	lda     #$00
	sta     L16FC
L1B53:	lda     L16FC
	cmp     #$14
	bcs     L170B
;
; copy_board_data[iy] = game_board[TILE_TO_BOARD_INDEX(ix, iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3471
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     L16FC
	bcc     L1715
	inx
L1715:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     L16FC
	clc
	adc     #$03
	bcc     L1B50
	inx
	clc
L1B50:	adc     #$01
	bcc     L171D
	inx
L171D:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     L16FB
	bpl     L171F
	dex
L171F:	clc
	adc     ptr1
	bcc     L1B4F
	inx
L1B4F:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3469
	inc     L16FC
	jmp     L1B53
;
; copy_board_data,
;
	.dbg	line, "main.c", 3475
L170B:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3476
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3478
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + (ix << 3),
;
	.dbg	line, "main.c", 3479
	lda     L16FB
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3480
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3484
	lda     #$00
	sta     L16FC
L1B54:	lda     L16FC
	cmp     #$14
	bcs     L172E
;
; copy_board_data[iy] = game_board[TILE_TO_BOARD_INDEX(BOARD_END_X_PX_BOARD - ix, iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3486
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     L16FC
	bcc     L1738
	inx
L1738:	jsr     pushax
	ldx     #$00
	lda     L16FC
	clc
	adc     #$03
	bcc     L1B51
	inx
	clc
L1B51:	adc     #$01
	bcc     L1740
	inx
L1740:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	jsr     pusha0
	lda     #$09
	jsr     pusha0
	lda     L16FB
	bpl     L1742
	ldx     #$FF
L1742:	jsr     tossubax
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3484
	inc     L16FC
	jmp     L1B54
;
; copy_board_data,
;
	.dbg	line, "main.c", 3490
L172E:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3491
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3493
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + ((BOARD_END_X_PX_BOARD - ix) << 3),
;
	.dbg	line, "main.c", 3494
	lda     #$09
	jsr     pusha0
	lda     L16FB
	bpl     L174C
	ldx     #$FF
L174C:	jsr     tossubax
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$00
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3495
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; delay(5);
;
	.dbg	line, "main.c", 3498
	lda     #$05
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3499
	jsr     _clear_vram_buffer
;
; for (ix = 4; ix >= 0; --ix)
;
	.dbg	line, "main.c", 3464
	dec     L16FB
	jpl     L1B52
	jmp     L1B52
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ try_collapse_empty_row_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_try_collapse_empty_row_data: near

	.dbg	func, "try_collapse_empty_row_data", "00", extern, "_try_collapse_empty_row_data"

.segment	"BSS"

L1756:
	.res	1,$00
L1757:
	.res	1,$00
L1758:
	.res	1,$00

.segment	"CODE"

;
; iy = BOARD_END_Y_PX_BOARD - lines_cleared_y[0];
;
	.dbg	line, "main.c", 3516
	lda     #$17
	sec
	sbc     _lines_cleared_y
	sta     L1757
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3520
	lda     #$00
	sta     L1756
L1B56:	lda     L1756
	cmp     #$0A
	bcs     L1B5B
;
; if (attack_row_status[ix] > ATTACK_QUEUE_SIZE && attack_row_status[ix] - (ATTACK_QUEUE_SIZE + 1) >= (iy))
;
	.dbg	line, "main.c", 3522
	ldy     L1756
	lda     _attack_row_status,y
	cmp     #$04
	bcc     L1B5A
	ldy     L1756
	ldx     #$00
	lda     _attack_row_status,y
	sec
	sbc     #$04
	bcs     L176D
	dex
L176D:	cmp     L1757
	txa
	sbc     #$00
	bcs     L1772
	jmp     L1B5A
;
; --attack_row_status[ix];
;
	.dbg	line, "main.c", 3527
L1770:	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     L1756
	bcc     L1778
	inx
L1778:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; delay(1);
;
	.dbg	line, "main.c", 3528
	lda     #$01
	jsr     _delay
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3529
	jsr     _draw_gameplay_sprites
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3530
	jsr     _clear_vram_buffer
;
; while (attack_row_status[ix] > 0)
;
	.dbg	line, "main.c", 3524
L1772:	ldy     L1756
	lda     _attack_row_status,y
	bne     L1770
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3520
L1B5A:	inc     L1756
	jmp     L1B56
;
; for (i = 3; i >= 0; --i)
;
	.dbg	line, "main.c", 3536
L1B5B:	lda     #$03
	sta     L1758
L1B5C:	ldx     L1758
	bmi     L177E
;
; iy = lines_cleared_y[i];
;
	.dbg	line, "main.c", 3541
	ldy     L1758
	lda     _lines_cleared_y,y
	sta     L1757
;
; if (iy != 0xff)
;
	.dbg	line, "main.c", 3543
	cmp     #$FF
	beq     L1B5D
;
; memcpy(game_board_temp, game_board, sizeof(game_board));
;
	.dbg	line, "main.c", 3547
	ldy     #$00
L1793:	lda     _game_board,y
	sta     _game_board_temp,y
	iny
	cpy     #$F0
	bne     L1793
;
; memcpy(&game_board[10], game_board_temp, iy * 10);
;
	.dbg	line, "main.c", 3549
	lda     #<(_game_board+10)
	ldx     #>(_game_board+10)
	jsr     pushax
	lda     #<(_game_board_temp)
	ldx     #>(_game_board_temp)
	jsr     pushax
	ldx     #$00
	lda     L1757
	jsr     mulax10
	jsr     _memcpy
;
; for (i = 3; i >= 0; --i)
;
	.dbg	line, "main.c", 3536
L1B5D:	dec     L1758
	bpl     L1B5C
	jmp     L1B5C
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3554
L177E:	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ copy_board_to_nt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copy_board_to_nt: near

	.dbg	func, "copy_board_to_nt", "00", extern, "_copy_board_to_nt"

.segment	"CODE"

;
; if (state == STATE_GAME)
;
	.dbg	line, "main.c", 3563
	lda     _state
	cmp     #$04
	bne     L1B60
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3565
	jsr     _draw_gameplay_sprites
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3571
L1B60:	lda     #$00
	sta     _local_ix
L1B61:	lda     _local_ix
	cmp     #$0A
	bcc     L1B63
;
; }
;
	.dbg	line, "main.c", 3618
	rts
;
; for (local_iy = 0; local_iy < BOARD_HEIGHT; ++local_iy)
;
	.dbg	line, "main.c", 3574
L1B63:	lda     #$00
	sta     _local_iy
L1B62:	lda     _local_iy
	cmp     #$14
	bcs     L17A7
;
; copy_board_data[local_iy] = game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3576
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     _local_iy
	bcc     L17B1
	inx
L17B1:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _local_iy
	clc
	adc     #$03
	bcc     L1B5F
	inx
	clc
L1B5F:	adc     #$01
	bcc     L17B9
	inx
L17B9:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     _local_ix
	bcc     L1B5E
	inx
L1B5E:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (local_iy = 0; local_iy < BOARD_HEIGHT; ++local_iy)
;
	.dbg	line, "main.c", 3574
	inc     _local_iy
	jmp     L1B62
;
; copy_board_data,
;
	.dbg	line, "main.c", 3585
L17A7:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3586
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3588
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + (local_ix << 3),
;
	.dbg	line, "main.c", 3589
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3590
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; if (local_ix % 3 == 0)
;
	.dbg	line, "main.c", 3593
	lda     _local_ix
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	cpx     #$00
	bne     L17A0
	cmp     #$00
	bne     L17A0
;
; delay(1);
;
	.dbg	line, "main.c", 3599
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3600
	jsr     _clear_vram_buffer
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3571
L17A0:	inc     _local_ix
	jmp     L1B61
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_block_at_bottom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_block_at_bottom: near

	.dbg	func, "add_block_at_bottom", "00", extern, "_add_block_at_bottom"

.segment	"BSS"

L17CE:
	.res	1,$00
L17CF:
	.res	1,$00
L17D0:
	.res	1,$00

.segment	"CODE"

;
; attacks = 0;
;
	.dbg	line, "main.c", 3627
	lda     #$00
	sta     L17D0
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3634
	sta     L17CE
L1B6A:	lda     L17CE
	sec
	sbc     #$0A
	bvc     L17DC
	eor     #$80
L17DC:	jpl     L1B72
;
; if (attack_row_status[ix] > 0)
;
	.dbg	line, "main.c", 3636
	ldy     L17CE
	lda     _attack_row_status,y
	jeq     L1B71
;
; if (attack_row_status[ix] >= ATTACK_MAX)
;
	.dbg	line, "main.c", 3638
	ldy     L17CE
	lda     _attack_row_status,y
	cmp     #$0A
	bcc     L1B6B
;
; row_to_clear = ix;
;
	.dbg	line, "main.c", 3650
	lda     L17CE
	sta     _row_to_clear
;
; break;
;
	.dbg	line, "main.c", 3657
	jmp     L1B72
;
; ++attacks;
;
	.dbg	line, "main.c", 3659
L1B6B:	inc     L17D0
;
; ++attack_row_status[ix];
;
	.dbg	line, "main.c", 3660
	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     L17CE
	bcc     L17F0
	inx
L17F0:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (attack_row_status[ix] > ATTACK_QUEUE_SIZE)
;
	.dbg	line, "main.c", 3662
	ldy     L17CE
	lda     _attack_row_status,y
	cmp     #$04
	jcc     L1B71
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
	.dbg	line, "main.c", 3664
	lda     #$17
	sta     L17CF
L1B6C:	lda     L17CF
	cmp     #$04
	ldx     #$00
	jcc     L1B70
;
; if (game_board[TILE_TO_BOARD_INDEX(ix, iy)] == 0)
;
	.dbg	line, "main.c", 3667
	ldy     L17CF
	lda     _board_lookup_y,y
	sta     ptr1
	lda     L17CE
	bpl     L1807
	dex
L1807:	clc
	adc     ptr1
	bcc     L1B64
	inx
L1B64:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L1B6E
;
; for (; iy <= BOARD_END_Y_PX_BOARD; ++iy)
;
	.dbg	line, "main.c", 3670
	tax
L1B6D:	lda     L17CF
	cmp     #$18
	bcs     L1B70
;
; game_board[TILE_TO_BOARD_INDEX(ix, iy)] = game_board[TILE_TO_BOARD_INDEX(ix, iy + 1)];
;
	.dbg	line, "main.c", 3672
	ldy     L17CF
	lda     _board_lookup_y,y
	sta     ptr1
	lda     L17CE
	bpl     L1816
	dex
L1816:	clc
	adc     ptr1
	bcc     L1B68
	inx
	clc
L1B68:	adc     #<(_game_board)
	sta     sreg
	txa
	adc     #>(_game_board)
	sta     sreg+1
	ldx     #$00
	lda     L17CF
	clc
	adc     #$01
	bcc     L181D
	inx
L181D:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     L17CE
	bpl     L181F
	dex
L181F:	clc
	adc     ptr1
	bcc     L1B66
	inx
L1B66:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (; iy <= BOARD_END_Y_PX_BOARD; ++iy)
;
	.dbg	line, "main.c", 3670
	ldx     #$00
	inc     L17CF
	jmp     L1B6D
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
	.dbg	line, "main.c", 3664
L1B6E:	dec     L17CF
	jmp     L1B6C
;
; game_board[TILE_TO_BOARD_INDEX(ix, BOARD_END_Y_PX_BOARD)] = garbage_types[cur_garbage_type]; //     0x60; //0xf7; //(attack_row_status[ix] == (ATTACK_QUEUE_SIZE + 1)) ? 0xf9 : 0xf8;
;
	.dbg	line, "main.c", 3679
L1B70:	lda     L17CE
	bpl     L1827
	dex
L1827:	clc
	adc     _board_lookup_y+23
	bcc     L1B69
	inx
	clc
L1B69:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     _cur_garbage_type
	lda     _garbage_types,y
	ldy     #$00
	sta     (ptr1),y
;
; ++cur_garbage_type;
;
	.dbg	line, "main.c", 3680
	inc     _cur_garbage_type
;
; if (cur_garbage_type >= NUM_GARBAGE_TYPES)
;
	.dbg	line, "main.c", 3681
	lda     _cur_garbage_type
	cmp     #$03
	bcc     L1B71
;
; cur_garbage_type = 0;
;
	.dbg	line, "main.c", 3683
	sty     _cur_garbage_type
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3634
L1B71:	inc     L17CE
	jpl     L1B6A
	jmp     L1B6A
;
; if (attacks == 0)
;
	.dbg	line, "main.c", 3692
L1B72:	lda     L17D0
	bne     L1830
;
; attack_row_status[rand() % BOARD_WIDTH] = 1;
;
	.dbg	line, "main.c", 3695
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	clc
	adc     #<(_attack_row_status)
	sta     ptr1
	txa
	adc     #>(_attack_row_status)
	sta     ptr1+1
	lda     #$01
	ldy     #$00
	sta     (ptr1),y
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3699
L1830:	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_row_at_bottom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_row_at_bottom: near

	.dbg	func, "add_row_at_bottom", "00", extern, "_add_row_at_bottom"

.segment	"CODE"

;
; memfill(&game_board[TILE_TO_BOARD_INDEX(0, BOARD_END_Y_PX_BOARD - kill_row_cur)], 1, BOARD_WIDTH);
;
	.dbg	line, "main.c", 3704
	jsr     decsp3
	lda     #$17
	sec
	sbc     _kill_row_cur
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	clc
	adc     #<(_game_board)
	tay
	lda     #$00
	adc     #>(_game_board)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _memfill
;
; ++kill_row_cur;
;
	.dbg	line, "main.c", 3705
	inc     _kill_row_cur
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3706
	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ reset_gameplay_area (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_gameplay_area: near

	.dbg	func, "reset_gameplay_area", "00", extern, "_reset_gameplay_area"

.segment	"CODE"

;
; memfill(game_board, 0, BOARD_SIZE);
;
	.dbg	line, "main.c", 3711
	jsr     decsp3
	lda     #<(_game_board)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_game_board)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$F0
	jsr     _memfill
;
; lines_cleared_one = lines_cleared_ten = lines_cleared_hundred = cur_score = 0;
;
	.dbg	line, "main.c", 3714
	lda     #$00
	sta     _cur_score
	sta     _cur_score+1
	sta     _cur_score+2
	sta     _cur_score+3
	sta     _lines_cleared_hundred
	sta     _lines_cleared_ten
	sta     _lines_cleared_one
;
; held_cluster_id = 255; // Doesn't exist
;
	.dbg	line, "main.c", 3716
	lda     #$FF
	sta     _held_cluster_id
;
; held_cluster_rot = 0;
;
	.dbg	line, "main.c", 3717
	lda     #$00
	sta     _held_cluster_rot
;
; cur_level = saved_starting_level;
;
	.dbg	line, "main.c", 3719
	lda     _saved_starting_level
	sta     _cur_level
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 3720
	cmp     #$1E
	bcs     L1B73
	lda     _cur_level
	jmp     L185F
L1B73:	lda     #$1E
L185F:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 3721
	lda     #$FF
	sta     _row_to_clear
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 3722
	sta     _delay_lock_remaining
;
; kill_row_cur = 0;
;
	.dbg	line, "main.c", 3723
	lda     #$00
	sta     _kill_row_cur
;
; last_lines = 0;
;
	.dbg	line, "main.c", 3724
	sta     _last_lines
;
; combo_count = 0;
;
	.dbg	line, "main.c", 3725
	sta     _combo_count
;
; start_delay_remaining = START_DELAY;
;
	.dbg	line, "main.c", 3726
	lda     #$78
	sta     _start_delay_remaining
;
; bag_index = rand() % NUM_CLUSTERS;
;
	.dbg	line, "main.c", 3729
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosmoda0
	sta     _bag_index
;
; randomize_bag(bag, NUM_CLUSTERS);
;
	.dbg	line, "main.c", 3730
	lda     #<(_bag)
	ldx     #>(_bag)
	jsr     pushax
	lda     #$07
	jsr     _randomize_bag
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 3734
	lda     #$00
	sta     _time_of_day
;
; pal_bg(palette_bg_list[time_of_day]);
;
	.dbg	line, "main.c", 3735
	tax
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	tay
	txa
	adc     #>(_palette_bg_list)
	tax
	tya
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	.dbg	line, "main.c", 3736
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; one_vram_buffer(0x8, get_ppu_addr(2, 4 << 3, 9 << 3));
;
	.dbg	line, "main.c", 3739
	lda     #$08
	jsr     pusha
	jsr     decsp2
	lda     #$02
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3741
	jsr     _display_lines_cleared
;
; display_score();
;
	.dbg	line, "main.c", 3742
	jsr     _display_score
;
; display_level();
;
	.dbg	line, "main.c", 3743
	jsr     _display_level
;
; oam_clear();
;
	.dbg	line, "main.c", 3745
	jsr     _oam_clear
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 16));
;
	.dbg	line, "main.c", 3748
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$10
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 24));
;
	.dbg	line, "main.c", 3749
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 32));
;
	.dbg	line, "main.c", 3756
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 40));
;
	.dbg	line, "main.c", 3757
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$28
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; delay(1);
;
	.dbg	line, "main.c", 3759
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3760
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 48));
;
	.dbg	line, "main.c", 3762
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold_sky, 4, get_ppu_addr(cur_nt, 220, 56));
;
	.dbg	line, "main.c", 3763
	jsr     decsp3
	lda     #<(_empty_row_hold_sky)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold_sky)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$38
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3766
	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_song (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_song: near

	.dbg	func, "display_song", "00", extern, "_display_song"

.segment	"BSS"

L18B4:
	.res	1,$00
L18B5:
	.res	1,$00

.segment	"CODE"

;
; temp = test_song;
;
	.dbg	line, "main.c", 3775
	lda     _test_song
	sta     L18B4
;
; i = 0;
;
	.dbg	line, "main.c", 3776
	lda     #$00
	sta     L18B5
;
; if (test_song < 100)
;
	.dbg	line, "main.c", 3778
	tax
	lda     _test_song
	cmp     #$64
	bcs     L1B75
;
; multi_vram_buffer_horz("000", 3, get_ppu_addr(0, (4 << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3780
	jsr     decsp3
	lda     #<(L18BD)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L18BD)
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	txa
	iny
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3783
	jmp     L18C8
;
; unsigned char digit = temp % 10;
;
	.dbg	line, "main.c", 3785
L1B74:	lda     L18B4
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(0, (6 << 3) - (i << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3786
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L18B5
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp = temp / 10;
;
	.dbg	line, "main.c", 3788
	lda     L18B4
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L18B4
;
; ++i;
;
	.dbg	line, "main.c", 3789
	inc     L18B5
;
; }
;
	.dbg	line, "main.c", 3790
	jsr     incsp1
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3783
L18C8:	ldx     #$00
L1B75:	lda     L18B4
	bne     L1B74
;
; }
;
	.dbg	line, "main.c", 3791
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_sound (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_sound: near

	.dbg	func, "display_sound", "00", extern, "_display_sound"

.segment	"BSS"

L18D9:
	.res	1,$00
L18DA:
	.res	1,$00

.segment	"CODE"

;
; temp = test_sound;
;
	.dbg	line, "main.c", 3799
	lda     _test_sound
	sta     L18D9
;
; i = 0;
;
	.dbg	line, "main.c", 3800
	lda     #$00
	sta     L18DA
;
; if (test_song < 100)
;
	.dbg	line, "main.c", 3802
	tax
	lda     _test_song
	cmp     #$64
	bcs     L1B77
;
; multi_vram_buffer_horz("000", 3, get_ppu_addr(0, (25 << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3804
	jsr     decsp3
	lda     #<(L18E2)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L18E2)
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	txa
	iny
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3807
	jmp     L18ED
;
; unsigned char digit = temp % 10;
;
	.dbg	line, "main.c", 3809
L1B76:	lda     L18D9
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(0, (27 << 3) - (i << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3810
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$D8
	jsr     pusha0
	lda     L18DA
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp = temp / 10;
;
	.dbg	line, "main.c", 3812
	lda     L18D9
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L18D9
;
; ++i;
;
	.dbg	line, "main.c", 3813
	inc     L18DA
;
; }
;
	.dbg	line, "main.c", 3814
	jsr     incsp1
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3807
L18ED:	ldx     #$00
L1B77:	lda     L18D9
	bne     L1B76
;
; }
;
	.dbg	line, "main.c", 3815
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_options (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_options: near

	.dbg	func, "display_options", "00", extern, "_display_options"

.segment	"DATA"

L18FE:
	.byte	$10

.segment	"CODE"

;
; delay(1);
;
	.dbg	line, "main.c", 3824
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3825
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(&starting_levels[cur_level], 1, get_ppu_addr(0, 17 << 3, start_y << 3));
;
	.dbg	line, "main.c", 3827
	jsr     decsp3
	lda     #<(_starting_levels)
	ldx     #>(_starting_levels)
	clc
	adc     _cur_level
	bcc     L1906
	inx
L1906:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L18FE
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(attack_style_strings[attack_style], ATTACK_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 2) << 3));
;
	.dbg	line, "main.c", 3828
	jsr     decsp3
	ldx     #$00
	lda     _attack_style
	jsr     mulax7
	clc
	adc     #<(_attack_style_strings)
	tay
	txa
	adc     #>(_attack_style_strings)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L18FE
	clc
	adc     #$02
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(off_on_string[music_on], OFF_ON_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 4) << 3));
;
	.dbg	line, "main.c", 3829
	jsr     decsp3
	ldx     #$00
	lda     _music_on
	jsr     aslax2
	clc
	adc     #<(_off_on_string)
	tay
	txa
	adc     #>(_off_on_string)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L18FE
	clc
	adc     #$04
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(off_on_string[sfx_on], OFF_ON_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 6) << 3));
;
	.dbg	line, "main.c", 3830
	jsr     decsp3
	ldx     #$00
	lda     _sfx_on
	jsr     aslax2
	clc
	adc     #<(_off_on_string)
	tay
	txa
	adc     #>(_off_on_string)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L18FE
	clc
	adc     #$06
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(hard_drop_types[hard_drops_on], HARD_DROP_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 8) << 3));
;
	.dbg	line, "main.c", 3831
	jsr     decsp3
	ldx     #$00
	lda     _hard_drops_on
	jsr     aslax2
	clc
	adc     #<(_hard_drop_types)
	tay
	txa
	adc     #>(_hard_drop_types)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L18FE
	clc
	adc     #$08
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y) << 3));
;
	.dbg	line, "main.c", 3834
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L18FE
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 2) << 3));
;
	.dbg	line, "main.c", 3835
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L18FE
	clc
	adc     #$02
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 4) << 3));
;
	.dbg	line, "main.c", 3836
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L18FE
	clc
	adc     #$04
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 6) << 3));
;
	.dbg	line, "main.c", 3837
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L18FE
	clc
	adc     #$06
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 8) << 3));
;
	.dbg	line, "main.c", 3838
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L18FE
	clc
	adc     #$08
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_icon, 2, get_ppu_addr(0, 7 << 3, (start_y + (cur_option << 1) << 3)));
;
	.dbg	line, "main.c", 3840
	jsr     decsp3
	lda     #<(_option_icon)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_icon)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     _cur_option
	asl     a
	bcc     L1B7A
	clc
L1B7A:	adc     L18FE
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; delay(1);
;
	.dbg	line, "main.c", 3843
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3844
	jmp     _clear_vram_buffer
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ fade_to_black (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_to_black: near

	.dbg	func, "fade_to_black", "00", extern, "_fade_to_black"

.segment	"CODE"

;
; pal_bright(3);
;
	.dbg	line, "main.c", 3850
	lda     #$03
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3851
	lda     #$02
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "main.c", 3852
	lda     #$02
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3853
	lda     #$02
	jsr     _delay
;
; pal_bright(1);
;
	.dbg	line, "main.c", 3854
	lda     #$01
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3855
	lda     #$02
	jsr     _delay
;
; pal_bright(0);
;
	.dbg	line, "main.c", 3856
	lda     #$00
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3857
	lda     #$02
	jmp     _delay
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ fade_from_black (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_from_black: near

	.dbg	func, "fade_from_black", "00", extern, "_fade_from_black"

.segment	"CODE"

;
; pal_bright(1);
;
	.dbg	line, "main.c", 3862
	lda     #$01
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3863
	lda     #$02
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "main.c", 3864
	lda     #$02
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3865
	lda     #$02
	jsr     _delay
;
; pal_bright(3);
;
	.dbg	line, "main.c", 3866
	lda     #$03
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3867
	lda     #$02
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "main.c", 3868
	lda     #$04
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3869
	lda     #$02
	jmp     _delay
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ difficulty_to_leaderboard_pos (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_difficulty_to_leaderboard_pos: near

	.dbg	func, "difficulty_to_leaderboard_pos", "00", extern, "_difficulty_to_leaderboard_pos"
	.dbg	sym, "dif", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 3873
	jsr     pusha
;
; switch (dif)
;
	.dbg	line, "main.c", 3874
	ldy     #$00
	lda     (sp),y
;
; }
;
	.dbg	line, "main.c", 3892
	beq     L1B7C
	cmp     #$01
	beq     L1B7D
	cmp     #$02
	beq     L1B7E
	cmp     #$03
	beq     L1B7F
	jmp     incsp1
;
; in_x = 4;
;
	.dbg	line, "main.c", 3877
L1B7C:	lda     #$04
	sta     _in_x
;
; in_y = 12;
;
	.dbg	line, "main.c", 3878
	lda     #$0C
;
; break;
;
	.dbg	line, "main.c", 3879
	jmp     L1B7B
;
; in_x = 18;
;
	.dbg	line, "main.c", 3881
L1B7D:	lda     #$12
	sta     _in_x
;
; in_y = 12;
;
	.dbg	line, "main.c", 3882
	lda     #$0C
;
; break;
;
	.dbg	line, "main.c", 3883
	jmp     L1B7B
;
; in_x = 4;
;
	.dbg	line, "main.c", 3885
L1B7E:	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 3887
	jmp     L1B81
;
; in_x = 18;
;
	.dbg	line, "main.c", 3889
L1B7F:	lda     #$12
L1B81:	sta     _in_x
;
; in_y = 22;
;
	.dbg	line, "main.c", 3890
	lda     #$16
L1B7B:	sta     _in_y
;
; }
;
	.dbg	line, "main.c", 3893
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "main.c", 339
	jsr     _ppu_off
;
; bank_spr(1);
;
	.dbg	line, "main.c", 353
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	.dbg	line, "main.c", 355
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 356
	jsr     _clear_vram_buffer
;
; off_nt = 0;
;
	.dbg	line, "main.c", 359
	lda     #$00
	sta     _off_nt
;
; cur_nt = 2;
;
	.dbg	line, "main.c", 360
	lda     #$02
	sta     _cur_nt
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 362
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 363
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; vram_adr(NTADR_C(0, 0));
;
	.dbg	line, "main.c", 364
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(game_area);
;
	.dbg	line, "main.c", 365
	lda     #<(_game_area)
	ldx     #>(_game_area)
	jsr     _vram_unrle
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 367
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, scroll_y); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 368
	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "main.c", 371
	jsr     _ppu_on_all
;
; attack_style = ATTACK_ON_TIME; // ATTACK_ON_LAND;
;
	.dbg	line, "main.c", 375
	lda     #$01
	sta     _attack_style
;
; music_on = 1;
;
	.dbg	line, "main.c", 376
	sta     _music_on
;
; sfx_on = 1;
;
	.dbg	line, "main.c", 377
	sta     _sfx_on
;
; hard_drops_on = 1;
;
	.dbg	line, "main.c", 378
	sta     _hard_drops_on
;
; block_style = BLOCK_STYLE_CLASSIC;
;
	.dbg	line, "main.c", 379
	sta     _block_style
;
; state = 0xff; // uninitialized so that we don't trigger a "leaving state".
;
	.dbg	line, "main.c", 380
	lda     #$FF
	sta     _state
;
; cur_garbage_type = 0;
;
	.dbg	line, "main.c", 381
	lda     #$00
	sta     _cur_garbage_type
;
; pal_bright(0);
;
	.dbg	line, "main.c", 397
	jsr     _pal_bright
;
; go_to_state(STATE_BOOT);
;
	.dbg	line, "main.c", 398
	lda     #$00
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 399
	jsr     _fade_from_black
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	.dbg	line, "main.c", 448
L0D02:	jsr     _ppu_wait_nmi
;
; ++tick_count;
;
	.dbg	line, "main.c", 452
	inc     _tick_count
;
; ++tick_count_large;
;
	.dbg	line, "main.c", 453
	inc     _tick_count_large
	bne     L0D09
	inc     _tick_count_large+1
;
; ++ticks_in_state_large;
;
	.dbg	line, "main.c", 454
L0D09:	inc     _ticks_in_state_large
	bne     L0D0B
	inc     _ticks_in_state_large+1
;
; pad1 = pad_poll(0);     // read the first controller
;
	.dbg	line, "main.c", 456
L0D0B:	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	.dbg	line, "main.c", 457
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; pad2 = pad_poll(1);
;
	.dbg	line, "main.c", 459
	lda     #$01
	jsr     _pad_poll
	sta     _pad2
;
; pad2_new = get_pad_new(1);
;
	.dbg	line, "main.c", 460
	lda     #$01
	jsr     _get_pad_new
	sta     _pad2_new
;
; pad_all = pad1 | pad2;
;
	.dbg	line, "main.c", 464
	lda     _pad2
	ora     _pad1
	sta     _pad_all
;
; pad_all_new = pad1_new | pad2_new;
;
	.dbg	line, "main.c", 465
	lda     _pad2_new
	ora     _pad1_new
	sta     _pad_all_new
;
; clear_vram_buffer(); // do at the beginning of each frame
;
	.dbg	line, "main.c", 574
	jsr     _clear_vram_buffer
;
; if (state != STATE_MENU)
;
	.dbg	line, "main.c", 578
	lda     _state
	cmp     #$02
	beq     L1B8E
;
; if (pad_all & PAD_A && pad_all & PAD_B && pad_all & PAD_SELECT && pad_all & PAD_START)
;
	.dbg	line, "main.c", 580
	lda     _pad_all
	and     #$80
	beq     L1B8E
	lda     _pad_all
	and     #$40
	beq     L1B8E
	lda     _pad_all
	and     #$20
	beq     L1B8E
	lda     _pad_all
	and     #$10
	beq     L1B8E
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 582
	lda     #$02
	jsr     _go_to_state
;
; switch (state)
;
	.dbg	line, "main.c", 587
L1B8E:	lda     _state
;
; }
;
	.dbg	line, "main.c", 1538
	beq     L1B8F
	cmp     #$01
	beq     L1B91
	cmp     #$02
	beq     L0D3D
	cmp     #$03
	jeq     L1B98
	cmp     #$04
	jeq     L1BB2
	cmp     #$05
	jeq     L0EB2
	cmp     #$06
	jeq     L1BC9
	cmp     #$07
	jeq     L1BCB
	jmp     L1BE0
;
; if (tick_count == 120 || pad_all_new & PAD_ALL_BUTTONS)
;
	.dbg	line, "main.c", 591
L1B8F:	lda     _tick_count
	cmp     #$78
	beq     L1B90
	lda     _pad_all_new
	and     #$F0
	jeq     L1BE0
;
; fade_to_black();
;
	.dbg	line, "main.c", 593
L1B90:	jsr     _fade_to_black
;
; go_to_state(STATE_TY);
;
	.dbg	line, "main.c", 594
	lda     #$01
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 595
	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 597
	jmp     L1BE0
;
; if (tick_count == 104 || pad_all_new & PAD_ALL_BUTTONS)
;
	.dbg	line, "main.c", 602
L1B91:	lda     _tick_count
	cmp     #$68
	beq     L1B92
	lda     _pad_all_new
	and     #$F0
	jeq     L1BE0
;
; fade_to_black();
;
	.dbg	line, "main.c", 604
L1B92:	jsr     _fade_to_black
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 605
	lda     #$02
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 606
	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 608
	jmp     L1BE0
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 612
L0D3D:	jsr     _draw_menu_sprites
;
; if (tick_count % 128 == 0)
;
	.dbg	line, "main.c", 614
	lda     _tick_count
	and     #$7F
	bne     L1B93
;
; multi_vram_buffer_horz(text_push_start, sizeof(text_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 637
	jsr     decsp3
	lda     #<(_text_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_push_start)
;
; else if (tick_count % 128 == 96)
;
	.dbg	line, "main.c", 640
	jmp     L1BFA
L1B93:	lda     _tick_count
	and     #$7F
	cmp     #$60
	bne     L1B94
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 645
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
L1BFA:	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (pad_all_new != 0)
;
	.dbg	line, "main.c", 650
L1B94:	lda     _pad_all_new
	beq     L1B97
;
; if (pad_all_new & konami_code[cur_konami_index])
;
	.dbg	line, "main.c", 652
	ldy     _cur_konami_index
	lda     _konami_code,y
	and     _pad_all_new
	pha
	pla
	beq     L1B96
;
; ++cur_konami_index;
;
	.dbg	line, "main.c", 654
	inc     _cur_konami_index
;
; else
;
	.dbg	line, "main.c", 656
	jmp     L1B97
;
; cur_konami_index = 0;
;
	.dbg	line, "main.c", 658
L1B96:	sta     _cur_konami_index
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 674
L1B97:	lda     _pad_all_new
	and     #$10
	jeq     L1BE0
;
; srand(tick_count_large);
;
	.dbg	line, "main.c", 677
	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     _srand
;
; if (cur_konami_index >= KONAMI_CODE_LEN)
;
	.dbg	line, "main.c", 680
	lda     _cur_konami_index
	cmp     #$0B
	bcc     L0D64
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP_MULTI);
;
	.dbg	line, "main.c", 682
	lda     _sfx_on
	beq     L0D66
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; music_stop();
;
	.dbg	line, "main.c", 683
L0D66:	jsr     _music_stop
;
; go_to_state(STATE_SOUND_TEST);
;
	.dbg	line, "main.c", 684
	lda     #$07
;
; else
;
	.dbg	line, "main.c", 686
	jmp     L1B85
;
; fade_to_black();
;
	.dbg	line, "main.c", 689
L0D64:	jsr     _fade_to_black
;
; go_to_state(STATE_OPTIONS);
;
	.dbg	line, "main.c", 690
	lda     #$03
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 691
	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 706
	jmp     L1BE0
;
; if (tick_count % 128 == 0)
;
	.dbg	line, "main.c", 899
L1B98:	lda     _tick_count
	and     #$7F
	bne     L1B99
;
; multi_vram_buffer_horz(text_push_start, sizeof(text_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 901
	jsr     decsp3
	lda     #<(_text_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_push_start)
;
; else if (tick_count % 128 == 96)
;
	.dbg	line, "main.c", 903
	jmp     L1BFB
L1B99:	lda     _tick_count
	and     #$7F
	cmp     #$60
	bne     L1B9A
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 905
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
L1BFB:	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 908
L1B9A:	lda     _pad_all_new
	and     #$10
	beq     L1B9F
;
; music_stop();
;
	.dbg	line, "main.c", 910
	jsr     _music_stop
;
; SFX_PLAY_WRAPPER(SOUND_START);
;
	.dbg	line, "main.c", 911
	lda     _sfx_on
	beq     L0D90
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; fade_to_black();
;
	.dbg	line, "main.c", 913
L0D90:	jsr     _fade_to_black
;
; ppu_off();
;
	.dbg	line, "main.c", 914
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 915
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 916
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 917
	jsr     _ppu_on_all
;
; fade_from_black();
;
	.dbg	line, "main.c", 918
	jsr     _fade_from_black
;
; if (pad_all & PAD_SELECT)
;
	.dbg	line, "main.c", 919
	lda     _pad_all
	and     #$20
	beq     L1B9B
;
; select_gameplay_music = MUSIC_MUSICA;
;
	.dbg	line, "main.c", 921
	lda     #$04
;
; }else
;
	.dbg	line, "main.c", 922
	jmp     L1B87
;
; select_gameplay_music = MUSIC_GAMEPLAY;
;
	.dbg	line, "main.c", 924
L1B9B:	lda     #$01
L1B87:	sta     _select_gameplay_music
;
; if (cur_level == 9 && pad_all & PAD_SELECT)
;
	.dbg	line, "main.c", 927
	lda     _cur_level
	cmp     #$09
	bne     L1B9E
	lda     _pad_all
	and     #$20
	beq     L1B9E
;
; cur_level = 29;
;
	.dbg	line, "main.c", 929
	lda     #$1D
;
; else if (pad_all & PAD_A)
;
	.dbg	line, "main.c", 931
	jmp     L1B88
L1B9E:	lda     _pad_all
	and     #$80
	beq     L0DB1
;
; cur_level += 10;
;
	.dbg	line, "main.c", 933
	lda     #$0A
	clc
	adc     _cur_level
L1B88:	sta     _cur_level
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 935
L0DB1:	lda     #$04
	jsr     _go_to_state
;
; if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 938
L1B9F:	lda     _pad_all_new
	and     #$40
	beq     L1BA0
;
; fade_to_black();
;
	.dbg	line, "main.c", 940
	jsr     _fade_to_black
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 941
	lda     #$02
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 942
	jsr     _fade_from_black
;
; else if (pad_all_new & PAD_RIGHT)
;
	.dbg	line, "main.c", 944
	jmp     L1BE0
L1BA0:	lda     _pad_all_new
	and     #$01
	jeq     L1BA8
;
; switch (cur_option)
;
	.dbg	line, "main.c", 946
	lda     _cur_option
;
; }
;
	.dbg	line, "main.c", 1012
	beq     L1BA1
	cmp     #$01
	beq     L1BA3
	cmp     #$02
	beq     L1BA4
	cmp     #$03
	beq     L1BA6
	cmp     #$04
	beq     L1BA7
	jmp     L0DC2
;
; if (cur_level < 9)
;
	.dbg	line, "main.c", 951
L1BA1:	lda     _cur_level
	cmp     #$09
	bcs     L1BA2
;
; ++cur_level;
;
	.dbg	line, "main.c", 953
	inc     _cur_level
;
; else
;
	.dbg	line, "main.c", 955
	jmp     L0DC2
;
; cur_level = 0;
;
	.dbg	line, "main.c", 957
L1BA2:	lda     #$00
	sta     _cur_level
;
; break;
;
	.dbg	line, "main.c", 959
	jmp     L0DC2
;
; if (attack_style < ATTACK_NUM - 1)
;
	.dbg	line, "main.c", 965
L1BA3:	lda     _attack_style
	cmp     #$02
	bcs     L0DC2
;
; ++attack_style;
;
	.dbg	line, "main.c", 967
	inc     _attack_style
;
; display_highscore();
;
	.dbg	line, "main.c", 968
	jsr     _display_highscore
;
; break;
;
	.dbg	line, "main.c", 970
	jmp     L0DC2
;
; if (music_on == 0)
;
	.dbg	line, "main.c", 976
L1BA4:	lda     _music_on
	bne     L0DC2
;
; music_on = 1;
;
	.dbg	line, "main.c", 978
	lda     #$01
	sta     _music_on
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 979
	lda     _music_on
	beq     L1BA5
	lda     #$00
	jsr     _music_play
;
; music_pause(0);
;
	.dbg	line, "main.c", 980
	lda     #$00
L1BA5:	jsr     _music_pause
;
; break;
;
	.dbg	line, "main.c", 991
	jmp     L0DC2
;
; if (sfx_on == 0)
;
	.dbg	line, "main.c", 995
L1BA6:	lda     _sfx_on
	bne     L0DC2
;
; sfx_on = 1;
;
	.dbg	line, "main.c", 997
	lda     #$01
	sta     _sfx_on
;
; break;
;
	.dbg	line, "main.c", 999
	jmp     L0DC2
;
; if (hard_drops_on < NUM_HARD_DROP_SETTINGS - 1)
;
	.dbg	line, "main.c", 1004
L1BA7:	lda     _hard_drops_on
	cmp     #$02
	bcs     L0DC2
;
; ++hard_drops_on;
;
	.dbg	line, "main.c", 1006
	inc     _hard_drops_on
;
; SFX_PLAY_WRAPPER(SOUND_MENU_HIGH);
;
	.dbg	line, "main.c", 1014
L0DC2:	lda     _sfx_on
	beq     L0DEA
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1015
L0DEA:	jsr     _display_options
;
; else if (pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 1017
	jmp     L1BE0
L1BA8:	lda     _pad_all_new
	and     #$02
	beq     L1BAF
;
; switch (cur_option)
;
	.dbg	line, "main.c", 1019
	lda     _cur_option
;
; }
;
	.dbg	line, "main.c", 1093
	beq     L1BA9
	cmp     #$01
	beq     L1BAB
	cmp     #$02
	beq     L1BAC
	cmp     #$03
	beq     L1BAD
	cmp     #$04
	beq     L1BAE
	jmp     L0DF6
;
; if (cur_level != 0)
;
	.dbg	line, "main.c", 1024
L1BA9:	lda     _cur_level
	beq     L1BAA
;
; --cur_level;
;
	.dbg	line, "main.c", 1026
	dec     _cur_level
;
; else
;
	.dbg	line, "main.c", 1028
	jmp     L0DF6
;
; cur_level = 9;
;
	.dbg	line, "main.c", 1030
L1BAA:	lda     #$09
	sta     _cur_level
;
; break;
;
	.dbg	line, "main.c", 1032
	jmp     L0DF6
;
; if (attack_style != 0)
;
	.dbg	line, "main.c", 1041
L1BAB:	lda     _attack_style
	beq     L0DF6
;
; --attack_style;
;
	.dbg	line, "main.c", 1043
	dec     _attack_style
;
; display_highscore();
;
	.dbg	line, "main.c", 1044
	jsr     _display_highscore
;
; break;
;
	.dbg	line, "main.c", 1047
	jmp     L0DF6
;
; if (music_on != 0)
;
	.dbg	line, "main.c", 1056
L1BAC:	lda     _music_on
	beq     L0DF6
;
; music_on = 0;
;
	.dbg	line, "main.c", 1058
	lda     #$00
	sta     _music_on
;
; music_pause(1);
;
	.dbg	line, "main.c", 1059
	lda     #$01
	jsr     _music_pause
;
; music_stop();
;
	.dbg	line, "main.c", 1060
	jsr     _music_stop
;
; break;
;
	.dbg	line, "main.c", 1072
	jmp     L0DF6
;
; if (sfx_on != 0)
;
	.dbg	line, "main.c", 1076
L1BAD:	lda     _sfx_on
	beq     L0DF6
;
; sfx_on = 0;
;
	.dbg	line, "main.c", 1078
	lda     #$00
	sta     _sfx_on
;
; break;
;
	.dbg	line, "main.c", 1080
	jmp     L0DF6
;
; if (hard_drops_on != 0)
;
	.dbg	line, "main.c", 1084
L1BAE:	lda     _hard_drops_on
	beq     L0DF6
;
; --hard_drops_on;
;
	.dbg	line, "main.c", 1086
	dec     _hard_drops_on
;
; SFX_PLAY_WRAPPER(SOUND_MENU_LOW);
;
	.dbg	line, "main.c", 1095
L0DF6:	lda     _sfx_on
	beq     L0E1A
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1096
L0E1A:	jsr     _display_options
;
; else if (pad_all_new & PAD_DOWN)
;
	.dbg	line, "main.c", 1098
	jmp     L1BE0
L1BAF:	lda     _pad_all_new
	and     #$04
	beq     L1BB0
;
; cur_option = (cur_option + 1) % NUM_OPTIONS;
;
	.dbg	line, "main.c", 1100
	ldx     #$00
	lda     _cur_option
	clc
	adc     #$01
	bcc     L0E27
	inx
L0E27:	jsr     pushax
	lda     #$05
	jsr     tosumoda0
	sta     _cur_option
;
; SFX_PLAY_WRAPPER(SOUND_MENU_LOW);
;
	.dbg	line, "main.c", 1101
	lda     _sfx_on
	beq     L0E28
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1102
L0E28:	jsr     _display_options
;
; else if (pad_all_new & PAD_UP)
;
	.dbg	line, "main.c", 1104
	jmp     L1BE0
L1BB0:	lda     _pad_all_new
	ldx     #$00
	and     #$08
	jeq     L1BE0
;
; if (cur_option == 0)
;
	.dbg	line, "main.c", 1106
	lda     _cur_option
	bne     L1BB1
;
; cur_option = NUM_OPTIONS;
;
	.dbg	line, "main.c", 1108
	lda     #$05
	sta     _cur_option
;
; cur_option = (cur_option - 1) % NUM_OPTIONS;
;
	.dbg	line, "main.c", 1110
L1BB1:	lda     _cur_option
	sec
	sbc     #$01
	bcs     L0E39
	dex
L0E39:	jsr     pushax
	lda     #$05
	jsr     tosumoda0
	sta     _cur_option
;
; SFX_PLAY_WRAPPER(SOUND_MENU_HIGH);
;
	.dbg	line, "main.c", 1111
	lda     _sfx_on
	beq     L0E3A
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1112
L0E3A:	jsr     _display_options
;
; break;
;
	.dbg	line, "main.c", 1115
	jmp     L1BE0
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 1120
L1BB2:	lda     _hit_reaction_remaining
	beq     L1BB3
;
; --hit_reaction_remaining;
;
	.dbg	line, "main.c", 1122
	dec     _hit_reaction_remaining
;
; if (row_to_clear >= 0)
;
	.dbg	line, "main.c", 1125
L1BB3:	ldx     _row_to_clear
	bmi     L1BB4
;
; --attack_row_status[row_to_clear];
;
	.dbg	line, "main.c", 1128
	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     _row_to_clear
	bcc     L0E4C
	inx
L0E4C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (attack_row_status[row_to_clear] == 0)
;
	.dbg	line, "main.c", 1129
	ldy     _row_to_clear
	lda     _attack_row_status,y
	bne     L1BB4
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 1131
	lda     #$FF
	sta     _row_to_clear
;
; if (attack_style != ATTACK_NEVER && attack_queued)
;
	.dbg	line, "main.c", 1136
L1BB4:	lda     _attack_style
	cmp     #$02
	beq     L0E54
	lda     _attack_queued
	beq     L0E54
;
; add_block_at_bottom();
;
	.dbg	line, "main.c", 1140
	jsr     _add_block_at_bottom
;
; clear_rows_in_data(BOARD_END_Y_PX_BOARD, 1);
;
	.dbg	line, "main.c", 1142
	lda     #$17
	jsr     pusha
	lda     #$01
	jsr     _clear_rows_in_data
;
; attack_queued = 0;
;
	.dbg	line, "main.c", 1143
	lda     #$00
	sta     _attack_queued
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 1144
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; if (kill_row_queued)
;
	.dbg	line, "main.c", 1147
L0E54:	lda     _kill_row_queued
	beq     L1BB7
;
; add_row_at_bottom();
;
	.dbg	line, "main.c", 1149
	jsr     _add_row_at_bottom
;
; kill_row_queued = 0;
;
	.dbg	line, "main.c", 1150
	lda     #$00
	sta     _kill_row_queued
;
; if (delay_spawn_remaining != -1)
;
	.dbg	line, "main.c", 1155
L1BB7:	lda     _delay_spawn_remaining
	cmp     #$FF
	beq     L0E65
;
; if (horz_button_delay > 0)
;
	.dbg	line, "main.c", 1159
	lda     _horz_button_delay
	beq     L1BB8
;
; --horz_button_delay;
;
	.dbg	line, "main.c", 1161
	dec     _horz_button_delay
;
; --delay_spawn_remaining;
;
	.dbg	line, "main.c", 1163
L1BB8:	dec     _delay_spawn_remaining
;
; if (delay_spawn_remaining == 0)
;
	.dbg	line, "main.c", 1164
	bne     L0E73
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 1166
	jsr     _spawn_new_cluster
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 1167
	lda     #$FF
	sta     _delay_lock_remaining
;
; else
;
	.dbg	line, "main.c", 1170
	jmp     L0E73
;
; movement();
;
	.dbg	line, "main.c", 1172
L0E65:	jsr     _movement
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 1177
L0E73:	jsr     _draw_gameplay_sprites
;
; if (attack_style == ATTACK_ON_TIME && attack_queue_ticks_remaining != 0)
;
	.dbg	line, "main.c", 1181
	lda     _attack_style
	cmp     #$01
	bne     L0E7D
	lda     _attack_queue_ticks_remaining
	ora     _attack_queue_ticks_remaining+1
	beq     L1BE5
;
; --attack_queue_ticks_remaining;
;
	.dbg	line, "main.c", 1183
	lda     _attack_queue_ticks_remaining
	sec
	sbc     #$01
	sta     _attack_queue_ticks_remaining
	bcs     L0E7C
	dec     _attack_queue_ticks_remaining+1
;
; if (attack_queue_ticks_remaining == 0)
;
	.dbg	line, "main.c", 1185
L0E7C:	lda     _attack_queue_ticks_remaining
	ora     _attack_queue_ticks_remaining+1
	bne     L0E7D
;
; attack_queued = 1;
;
	.dbg	line, "main.c", 1187
	lda     #$01
	sta     _attack_queued
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 1188
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; local_t = 0;
;
	.dbg	line, "main.c", 1198
L0E7D:	lda     #$00
L1BE5:	sta     _local_t
	sta     _local_t+1
;
; for (local_iy = 0; local_iy < STRESS_MUSIC_LEVEL * 10; ++local_iy)
;
	.dbg	line, "main.c", 1199
	sta     _local_iy
L1BBE:	lda     _local_iy
	cmp     #$46
	bcs     L0E87
;
; if (game_board[local_iy + ((BOARD_OOB_END + 1) * 10)] != 0)
;
	.dbg	line, "main.c", 1201
	ldx     #$00
	lda     _local_iy
	clc
	adc     #$28
	bcc     L0E93
	inx
L0E93:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	beq     L1BC3
;
; local_t = 1;
;
	.dbg	line, "main.c", 1204
	ldx     #$00
	lda     #$01
	sta     _local_t
	stx     _local_t+1
;
; if (cur_gameplay_music == select_gameplay_music && select_gameplay_music == MUSIC_GAMEPLAY)
;
	.dbg	line, "main.c", 1206
	lda     _select_gameplay_music
	cmp     _cur_gameplay_music
	bne     L1BC3
	cmp     #$01
	bne     L1BC3
;
; cur_gameplay_music = MUSIC_STRESS;
;
	.dbg	line, "main.c", 1208
	lda     #$02
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(MUSIC_STRESS);
;
	.dbg	line, "main.c", 1209
	lda     _music_on
	beq     L0E87
	lda     #$02
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 1210
	jmp     L0E87
;
; for (local_iy = 0; local_iy < STRESS_MUSIC_LEVEL * 10; ++local_iy)
;
	.dbg	line, "main.c", 1199
L1BC3:	inc     _local_iy
	jmp     L1BBE
;
; if (local_t == 0 && cur_gameplay_music == MUSIC_STRESS && select_gameplay_music == MUSIC_GAMEPLAY)
;
	.dbg	line, "main.c", 1215
L0E87:	lda     _local_t
	ora     _local_t+1
	bne     L1BC8
	lda     _cur_gameplay_music
	cmp     #$02
	bne     L1BC8
	lda     _select_gameplay_music
	cmp     #$01
	bne     L1BC8
;
; cur_gameplay_music = select_gameplay_music;
;
	.dbg	line, "main.c", 1217
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(select_gameplay_music);
;
	.dbg	line, "main.c", 1218
	lda     _music_on
	beq     L1BC8
	lda     _select_gameplay_music
	jsr     _music_play
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 1224
L1BC8:	lda     _pad_all_new
	and     #$10
	jeq     L1BE0
;
; go_to_state(STATE_PAUSE);
;
	.dbg	line, "main.c", 1226
	lda     #$05
;
; break;
;
	.dbg	line, "main.c", 1247
	jmp     L1B85
;
; oam_clear();
;
	.dbg	line, "main.c", 1253
L0EB2:	jsr     _oam_clear
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 1264
	lda     _pad_all_new
	and     #$10
	jeq     L1BE0
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 1266
	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 1268
	jmp     L1B85
;
; if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1283
L1BC9:	lda     _pad_all_new
	and     #$40
	beq     L1BCA
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 1286
	lda     #$02
	jsr     _go_to_state
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1288
L1BCA:	lda     _pad_all_new
	and     #$80
	jeq     L1BE0
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 1291
	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 1295
	jmp     L1B85
;
; if (pad_all_new & PAD_DOWN && test_song < 15)
;
	.dbg	line, "main.c", 1304
L1BCB:	lda     _pad_all_new
	and     #$04
	beq     L1BCF
	lda     _test_song
	cmp     #$0F
	bcs     L1BCF
;
; ++test_song;
;
	.dbg	line, "main.c", 1306
	inc     _test_song
;
; else if (pad_all_new & PAD_UP && test_song > 0)
;
	.dbg	line, "main.c", 1309
	jmp     L1B89
L1BCF:	lda     _pad_all_new
	and     #$08
	beq     L1BD3
	lda     _test_song
	beq     L1BD3
;
; --test_song;
;
	.dbg	line, "main.c", 1311
	dec     _test_song
;
; display_song();
;
	.dbg	line, "main.c", 1312
L1B89:	jsr     _display_song
;
; if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1315
L1BD3:	lda     _pad_all_new
	and     #$40
	beq     L1BD5
;
; if (test_song == test_song_active)
;
	.dbg	line, "main.c", 1317
	lda     _test_song_active
	cmp     _test_song
	bne     L1BD4
;
; test_song_active = 0xff;
;
	.dbg	line, "main.c", 1319
	lda     #$FF
	sta     _test_song_active
;
; music_stop();
;
	.dbg	line, "main.c", 1320
	jsr     _music_stop
;
; else
;
	.dbg	line, "main.c", 1322
	jmp     L1BD5
;
; test_song_active = test_song;
;
	.dbg	line, "main.c", 1324
L1BD4:	lda     _test_song
	sta     _test_song_active
;
; music_play(test_song);
;
	.dbg	line, "main.c", 1326
	lda     _test_song
	jsr     _music_play
;
; if (pad_all_new & PAD_RIGHT && test_sound < 31)
;
	.dbg	line, "main.c", 1333
L1BD5:	lda     _pad_all_new
	and     #$01
	beq     L1BD9
	lda     _test_sound
	cmp     #$1F
	bcs     L1BD9
;
; ++test_sound;
;
	.dbg	line, "main.c", 1335
	inc     _test_sound
;
; else if (pad_all_new & PAD_LEFT && test_sound > 0)
;
	.dbg	line, "main.c", 1338
	jmp     L1B8A
L1BD9:	lda     _pad_all_new
	and     #$02
	beq     L1BDD
	lda     _test_sound
	beq     L1BDD
;
; --test_sound;
;
	.dbg	line, "main.c", 1340
	dec     _test_sound
;
; display_sound();
;
	.dbg	line, "main.c", 1341
L1B8A:	jsr     _display_sound
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1344
L1BDD:	lda     _pad_all_new
	and     #$80
	beq     L1BDE
;
; sfx_play(test_sound, 0);
;
	.dbg	line, "main.c", 1347
	lda     _test_sound
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (pad_all_new & PAD_SELECT || pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 1353
L1BDE:	lda     _pad_all_new
	and     #$20
	bne     L1BDF
	lda     _pad_all_new
	and     #$10
	beq     L1BE0
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 1355
L1BDF:	lda     #$02
L1B85:	jsr     _go_to_state
;
; if (screen_shake_remaining > 0)
;
	.dbg	line, "main.c", 1542
L1BE0:	lda     _screen_shake_remaining
	beq     L1BE2
;
; --screen_shake_remaining;
;
	.dbg	line, "main.c", 1544
	dec     _screen_shake_remaining
;
; scroll((rand() % 2), scroll_y - (rand() % 2));
;
	.dbg	line, "main.c", 1545
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	jsr     pushax
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	jsr     tossubax
	jsr     _scroll
;
; else
;
	.dbg	line, "main.c", 1547
	jmp     L0D02
;
; scroll(0, scroll_y); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 1549
L1BE2:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; while (1)
;
	.dbg	line, "main.c", 446
	jmp     L0D02
	.dbg	line

.endproc

