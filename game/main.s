;
; File generated by cc65 v 2.18 - Git dc4142e
;
	.fopt		compiler,"cc65 v 2.18 - Git dc4142e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "main.c", 100651, 1609913027
	.dbg		file, "LIB/neslib.h", 9361, 1608948989
	.dbg		file, "LIB/nesdoug.h", 6862, 1608948989
	.dbg		file, "BG/game_area.h", 4059, 1609910372
	.dbg		file, "BG/title_screen.h", 2757, 1608948989
	.dbg		file, "BG/boot_screen.h", 1422, 1609911923
	.dbg		file, "BG/options_screen.h", 2359, 1608948989
	.dbg		file, "BG/sound_screen.h", 1418, 1608948989
	.dbg		file, "BG/ty_screen.h", 1872, 1608948989
	.dbg		file, "../include/stdlib.h", 6147, 1608948990
	.dbg		file, "main.h", 26851, 1609912940
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_spr", "00", extern, "_oam_spr"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "oam_set", "00", extern, "_oam_set"
	.dbg		sym, "music_play", "00", extern, "_music_play"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "music_pause", "00", extern, "_music_pause"
	.dbg		sym, "sfx_play", "00", extern, "_sfx_play"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "memfill", "00", extern, "_memfill"
	.dbg		sym, "delay", "00", extern, "_delay"
	.dbg		sym, "set_vram_buffer", "00", extern, "_set_vram_buffer"
	.dbg		sym, "one_vram_buffer", "00", extern, "_one_vram_buffer"
	.dbg		sym, "multi_vram_buffer_horz", "00", extern, "_multi_vram_buffer_horz"
	.dbg		sym, "multi_vram_buffer_vert", "00", extern, "_multi_vram_buffer_vert"
	.dbg		sym, "clear_vram_buffer", "00", extern, "_clear_vram_buffer"
	.dbg		sym, "get_pad_new", "00", extern, "_get_pad_new"
	.dbg		sym, "get_ppu_addr", "00", extern, "_get_ppu_addr"
	.dbg		sym, "rand", "00", extern, "_rand"
	.dbg		sym, "srand", "00", extern, "_srand"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_set
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_memfill
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_multi_vram_buffer_vert
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_ppu_addr
	.export		_game_area
	.export		_title_screen
	.export		_boot_screen
	.export		_options_screen
	.export		_sound_screen
	.export		_ty_screen
	.import		_rand
	.import		_srand
	.export		_tick_count
	.export		_tick_count_large
	.export		_ticks_in_state_large
	.export		_hit_reaction_remaining
	.export		_attack_queue_ticks_remaining
	.export		_attack_delay
	.export		_pad_all
	.export		_pad_all_new
	.export		_pad1
	.export		_pad1_new
	.export		_pad2
	.export		_pad2_new
	.export		_scroll_y
	.export		_cur_option
	.export		_attack_style
	.export		_high_scores
	.export		_music_on
	.export		_sfx_on
	.export		_block_style
	.export		_starting_levels
	.export		_saved_starting_level
	.export		_hard_drops_on
	.export		_hard_drop_hold_remaining
	.export		_hard_drop_tap_required
	.export		_state
	.export		_konami_code
	.export		_cur_konami_index
	.export		_cur_block
	.export		_fall_rate
	.export		_cur_level
	.export		_def_line
	.export		_def_square
	.export		_def_L_rev
	.export		_def_L
	.export		_def_S
	.export		_def_Z
	.export		_def_T
	.export		_cluster_defs_classic
	.export		_bag
	.export		_bag_index
	.export		_randomize_bag
	.export		_swap
	.export		_cur_rot
	.export		_srs_rotate_lookup
	.export		_cur_cluster
	.export		_next_cluster
	.export		_held_cluster_id
	.export		_held_cluster_rot
	.export		_held_cluster_def
	.export		_staging_cluster_id
	.export		_staging_cluster_rot
	.export		_empty_row_hold
	.export		_empty_row_hold_sky
	.export		_can_hold_cluster
	.export		_hold_cluster
	.export		_attack_row_status
	.export		_cluster_sprites
	.export		_cluster_offsets
	.export		_horz_button_delay
	.export		_button_delay
	.export		_require_new_down_button
	.export		_fall_frame_counter
	.export		_lines_cleared_one
	.export		_lines_cleared_ten
	.export		_lines_cleared_hundred
	.export		_cur_score
	.export		_cur_nt
	.export		_off_nt
	.export		_hit
	.export		_temp_fall_frame_counter
	.export		_old_x
	.export		_id
	.export		_min_y
	.export		_max_y
	.export		_in_x
	.export		_in_y
	.export		_in_id
	.export		_local_start_x
	.export		_local_start_y
	.export		_local_ix
	.export		_local_iy
	.export		_local_t
	.export		_local_bit
	.export		_local_row_status
	.export		_OOB_TOP
	.export		_test_song
	.export		_test_song_active
	.export		_test_sound
	.export		_cur_gameplay_music
	.export		_attack_queued
	.export		_tentacle_offsets
	.export		_garbage_types
	.export		_cur_garbage_type
	.export		_delay_lock_remaining
	.export		_delay_lock_skip
	.export		_delay_spawn_remaining
	.export		_spawn_queued
	.export		_row_to_clear
	.export		_kill_row_cur
	.export		_kill_row_queued
	.export		_start_delay_remaining
	.export		_board_lookup_y
	.export		_mask
	.export		_address
	.export		_time_of_day
	.export		_temp_pal
	.export		_lines_cleared_y
	.export		_line_score_mod
	.export		_game_board
	.export		_game_board_temp
	.export		_empty_row
	.export		_full_row
	.export		_full_col
	.export		_option_empty
	.export		_option_icon
	.export		_copy_board_data
	.export		_palette_bg
	.export		_palette_sp
	.export		_palette_bg_options
	.export		_palette_bg_list
	.export		_fall_rates_per_level
	.export		_attack_style_strings
	.export		_off_on_string
	.export		_block_style_strings
	.export		_hard_drop_types
	.export		_screen_shake_remaining
	.export		_text_push_start
	.export		_clear_push_start
	.export		_metasprite_tentacle_title
	.export		_draw_menu_sprites
	.export		_draw_gameplay_sprites
	.export		_movement
	.export		_set_block
	.export		_set_block_nt
	.export		_put_cur_cluster
	.export		_is_block_occupied
	.export		_is_cluster_colliding
	.export		_morton_compact_one_by_one
	.export		_spawn_new_cluster
	.export		_rotate_cur_cluster
	.export		_rotate_srs
	.export		_check_tspin
	.export		_is_tspin
	.export		_is_last_rotate
	.export		_go_to_state
	.export		_inc_lines_cleared
	.export		_display_lines_cleared
	.export		_display_score
	.export		_display_highscore
	.export		_display_level
	.export		_clear_rows_in_data
	.export		_reveal_empty_rows_to_nt
	.export		_try_collapse_empty_row_data
	.export		_copy_board_to_nt
	.export		_add_block_at_bottom
	.export		_add_row_at_bottom
	.export		_reset_gameplay_area
	.export		_display_song
	.export		_display_sound
	.export		_display_options
	.export		_fade_to_black
	.export		_fade_from_black
	.export		_difficulty_to_leaderboard_pos
	.export		_main

.segment	"DATA"

_high_scores:
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
_state:
	.byte	$00
_cur_block:
	.byte	$00
	.byte	$00
_fall_rate:
	.byte	$30
_cur_level:
	.byte	$00
_cluster_defs_classic:
	.addr	_def_Z
	.addr	_def_S
	.addr	_def_line
	.addr	_def_square
	.addr	_def_T
	.addr	_def_L
	.addr	_def_L_rev
_bag:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
_bag_index:
	.byte	$00

.segment	"RODATA"

_game_area:
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$BF
	.byte	$14
	.byte	$01
	.byte	$12
	.byte	$09
	.byte	$07
	.byte	$01
	.byte	$11
	.byte	$BF
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$8B
	.byte	$08
	.byte	$CF
	.byte	$14
	.byte	$AE
	.byte	$AF
	.byte	$B7
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$B8
	.byte	$AF
	.byte	$AE
	.byte	$11
	.byte	$CF
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$4C
	.byte	$49
	.byte	$4E
	.byte	$45
	.byte	$53
	.byte	$08
	.byte	$97
	.byte	$98
	.byte	$09
	.byte	$02
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$09
	.byte	$05
	.byte	$BF
	.byte	$BE
	.byte	$A8
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$48
	.byte	$4F
	.byte	$4C
	.byte	$44
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$30
	.byte	$09
	.byte	$02
	.byte	$08
	.byte	$A7
	.byte	$98
	.byte	$09
	.byte	$02
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$09
	.byte	$05
	.byte	$CF
	.byte	$CE
	.byte	$A8
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$12
	.byte	$C7
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$C8
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$53
	.byte	$43
	.byte	$4F
	.byte	$52
	.byte	$45
	.byte	$08
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$12
	.byte	$01
	.byte	$12
	.byte	$11
	.byte	$12
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$30
	.byte	$09
	.byte	$04
	.byte	$08
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$45
	.byte	$56
	.byte	$45
	.byte	$4C
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$12
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$11
	.byte	$01
	.byte	$12
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$78
	.byte	$79
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$30
	.byte	$30
	.byte	$08
	.byte	$01
	.byte	$12
	.byte	$14
	.byte	$13
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$13
	.byte	$11
	.byte	$03
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$63
	.byte	$64
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$8B
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$79
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$01
	.byte	$04
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$73
	.byte	$74
	.byte	$13
	.byte	$14
	.byte	$1B
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$88
	.byte	$89
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$14
	.byte	$85
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$61
	.byte	$81
	.byte	$94
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$63
	.byte	$64
	.byte	$14
	.byte	$85
	.byte	$01
	.byte	$14
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$86
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$13
	.byte	$14
	.byte	$01
	.byte	$71
	.byte	$91
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$92
	.byte	$73
	.byte	$74
	.byte	$13
	.byte	$00
	.byte	$12
	.byte	$13
	.byte	$86
	.byte	$87
	.byte	$87
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$03
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$01
	.byte	$61
	.byte	$62
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$06
	.byte	$14
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$01
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$82
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$83
	.byte	$84
	.byte	$03
	.byte	$81
	.byte	$94
	.byte	$81
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$61
	.byte	$62
	.byte	$93
	.byte	$94
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0E
	.byte	$1D
	.byte	$0E
	.byte	$0D
	.byte	$87
	.byte	$A4
	.byte	$1F
	.byte	$72
	.byte	$90
	.byte	$13
	.byte	$91
	.byte	$81
	.byte	$91
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$82
	.byte	$86
	.byte	$0F
	.byte	$0F
	.byte	$1F
	.byte	$86
	.byte	$1E
	.byte	$86
	.byte	$87
	.byte	$0F
	.byte	$A4
	.byte	$0F
	.byte	$1F
	.byte	$72
	.byte	$63
	.byte	$61
	.byte	$62
	.byte	$91
	.byte	$00
	.byte	$09
	.byte	$0B
	.byte	$94
	.byte	$84
	.byte	$00
	.byte	$63
	.byte	$64
	.byte	$1F
	.byte	$0F
	.byte	$A4
	.byte	$1D
	.byte	$00
	.byte	$0F
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$72
	.byte	$73
	.byte	$71
	.byte	$84
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$84
	.byte	$94
	.byte	$64
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$86
	.byte	$0F
	.byte	$1F
	.byte	$61
	.byte	$62
	.byte	$81
	.byte	$84
	.byte	$90
	.byte	$00
	.byte	$81
	.byte	$94
	.byte	$72
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$94
	.byte	$73
	.byte	$74
	.byte	$83
	.byte	$84
	.byte	$63
	.byte	$64
	.byte	$63
	.byte	$64
	.byte	$1F
	.byte	$00
	.byte	$62
	.byte	$84
	.byte	$91
	.byte	$94
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$83
	.byte	$84
	.byte	$90
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$82
	.byte	$82
	.byte	$92
	.byte	$93
	.byte	$93
	.byte	$94
	.byte	$73
	.byte	$74
	.byte	$92
	.byte	$93
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$94
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$2A
	.byte	$2B
	.byte	$72
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$83
	.byte	$2A
	.byte	$2B
	.byte	$00
	.byte	$82
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$92
	.byte	$93
	.byte	$00
	.byte	$72
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$66
	.byte	$67
	.byte	$B9
	.byte	$10
	.byte	$C9
	.byte	$B9
	.byte	$00
	.byte	$90
	.byte	$29
	.byte	$9C
	.byte	$9D
	.byte	$29
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$29
	.byte	$95
	.byte	$96
	.byte	$29
	.byte	$00
	.byte	$82
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$05
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$05
	.byte	$00
	.byte	$61
	.byte	$BE
	.byte	$AC
	.byte	$AD
	.byte	$BE
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$BE
	.byte	$A5
	.byte	$A6
	.byte	$BE
	.byte	$64
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$75
	.byte	$76
	.byte	$05
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FF
	.byte	$72
	.byte	$71
	.byte	$CE
	.byte	$BC
	.byte	$BD
	.byte	$CE
	.byte	$14
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$03
	.byte	$03
	.byte	$14
	.byte	$CE
	.byte	$B5
	.byte	$B6
	.byte	$CE
	.byte	$74
	.byte	$82
	.byte	$6B
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$5F
	.byte	$6A
	.byte	$00
	.byte	$81
	.byte	$12
	.byte	$CC
	.byte	$CD
	.byte	$12
	.byte	$11
	.byte	$12
	.byte	$AF
	.byte	$12
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$AF
	.byte	$03
	.byte	$14
	.byte	$12
	.byte	$C5
	.byte	$C6
	.byte	$12
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$6B
	.byte	$05
	.byte	$09
	.byte	$07
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$05
	.byte	$09
	.byte	$06
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$04
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$04
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$05
	.byte	$09
	.byte	$05
	.byte	$75
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$15
	.byte	$05
	.byte	$15
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$55
	.byte	$05
	.byte	$05
	.byte	$45
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$80
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$59
	.byte	$AA
	.byte	$56
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$FC
	.byte	$77
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$54
	.byte	$55
	.byte	$00
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$09
	.byte	$00
_title_screen:
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$25
	.byte	$DD
	.byte	$DE
	.byte	$09
	.byte	$12
	.byte	$3E
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$EF
	.byte	$FE
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E9
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$B3
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D5
	.byte	$D6
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$3A
	.byte	$DF
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$DA
	.byte	$C4
	.byte	$E4
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$B0
	.byte	$EA
	.byte	$C4
	.byte	$E4
	.byte	$E5
	.byte	$E0
	.byte	$E4
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$E7
	.byte	$E5
	.byte	$E1
	.byte	$E6
	.byte	$E7
	.byte	$05
	.byte	$EE
	.byte	$D9
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E8
	.byte	$E6
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$E9
	.byte	$B1
	.byte	$B2
	.byte	$05
	.byte	$E5
	.byte	$D0
	.byte	$B3
	.byte	$C4
	.byte	$D4
	.byte	$05
	.byte	$05
	.byte	$D4
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$E4
	.byte	$D5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$EE
	.byte	$05
	.byte	$B0
	.byte	$08
	.byte	$D2
	.byte	$D3
	.byte	$E4
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$E5
	.byte	$E8
	.byte	$E6
	.byte	$E5
	.byte	$E8
	.byte	$E9
	.byte	$E5
	.byte	$E8
	.byte	$E8
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E5
	.byte	$E6
	.byte	$E5
	.byte	$E6
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$09
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$3D
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$ED
	.byte	$DB
	.byte	$50
	.byte	$55
	.byte	$53
	.byte	$48
	.byte	$08
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$DC
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$3C
	.byte	$08
	.byte	$09
	.byte	$28
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$95
	.byte	$96
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$9C
	.byte	$9D
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$A5
	.byte	$A6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$AC
	.byte	$AD
	.byte	$08
	.byte	$09
	.byte	$17
	.byte	$B5
	.byte	$B6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$BC
	.byte	$BD
	.byte	$08
	.byte	$09
	.byte	$17
	.byte	$C5
	.byte	$C6
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$CC
	.byte	$CD
	.byte	$08
	.byte	$09
	.byte	$16
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$08
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$08
	.byte	$09
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0F
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$08
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$02
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$0E
	.byte	$02
	.byte	$27
	.byte	$28
	.byte	$14
	.byte	$08
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$15
	.byte	$03
	.byte	$25
	.byte	$26
	.byte	$14
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$15
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$A8
	.byte	$98
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$13
	.byte	$8B
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$A8
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$8B
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$15
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$6E
	.byte	$6F
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$14
	.byte	$A8
	.byte	$99
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$A7
	.byte	$98
	.byte	$01
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$7E
	.byte	$7F
	.byte	$AE
	.byte	$AF
	.byte	$AE
	.byte	$14
	.byte	$A8
	.byte	$A9
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$01
	.byte	$14
	.byte	$01
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$8E
	.byte	$8F
	.byte	$BE
	.byte	$BF
	.byte	$BE
	.byte	$14
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$BF
	.byte	$14
	.byte	$01
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$9E
	.byte	$9F
	.byte	$CE
	.byte	$CF
	.byte	$CE
	.byte	$14
	.byte	$11
	.byte	$BF
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$CF
	.byte	$14
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$07
	.byte	$14
	.byte	$11
	.byte	$CF
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$01
	.byte	$14
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$07
	.byte	$14
	.byte	$11
	.byte	$14
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$C0
	.byte	$F0
	.byte	$09
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$09
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$09
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$09
	.byte	$13
	.byte	$55
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$40
	.byte	$55
	.byte	$66
	.byte	$51
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
_boot_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A8
	.byte	$8E
	.byte	$00
	.byte	$43
	.byte	$52
	.byte	$45
	.byte	$41
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$00
	.byte	$42
	.byte	$59
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$01
	.byte	$6C
	.byte	$44
	.byte	$45
	.byte	$53
	.byte	$49
	.byte	$47
	.byte	$4E
	.byte	$2C
	.byte	$43
	.byte	$4F
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$41
	.byte	$54
	.byte	$54
	.byte	$00
	.byte	$48
	.byte	$55
	.byte	$47
	.byte	$48
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$47
	.byte	$41
	.byte	$4D
	.byte	$45
	.byte	$00
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$41
	.byte	$4C
	.byte	$4C
	.byte	$45
	.byte	$52
	.byte	$00
	.byte	$5A
	.byte	$4F
	.byte	$4C
	.byte	$54
	.byte	$41
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$2C
	.byte	$53
	.byte	$46
	.byte	$58
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$55
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$33
	.byte	$42
	.byte	$4F
	.byte	$58
	.byte	$00
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$41
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$50
	.byte	$41
	.byte	$59
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$53
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$49
	.byte	$53
	.byte	$49
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$2E
	.byte	$00
	.byte	$4D
	.byte	$41
	.byte	$47
	.byte	$52
	.byte	$49
	.byte	$00
	.byte	$01
	.byte	$6E
	.byte	$8E
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$44
	.byte	$49
	.byte	$43
	.byte	$41
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$00
	.byte	$54
	.byte	$4F
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$01
	.byte	$30
	.byte	$41
	.byte	$42
	.byte	$49
	.byte	$47
	.byte	$41
	.byte	$49
	.byte	$4C
	.byte	$2C
	.byte	$45
	.byte	$4C
	.byte	$49
	.byte	$41
	.byte	$4E
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$45
	.byte	$4C
	.byte	$53
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$35
	.byte	$56
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$49
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$2E
	.byte	$30
	.byte	$00
	.byte	$53
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$31
	.byte	$2E
	.byte	$30
	.byte	$31
	.byte	$2E
	.byte	$30
	.byte	$36
	.byte	$00
	.byte	$01
	.byte	$4D
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$8A
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$A8
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$20
	.byte	$88
	.byte	$AA
	.byte	$5A
	.byte	$5A
	.byte	$55
	.byte	$55
	.byte	$91
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$A0
	.byte	$50
	.byte	$54
	.byte	$55
	.byte	$A5
	.byte	$AA
	.byte	$AA
	.byte	$A2
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$01
	.byte	$00
_options_screen:
	.byte	$01
	.byte	$08
	.byte	$01
	.byte	$25
	.byte	$DD
	.byte	$DE
	.byte	$01
	.byte	$12
	.byte	$3E
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$10
	.byte	$EF
	.byte	$FE
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E9
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$B3
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D5
	.byte	$D6
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$3A
	.byte	$DF
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$DA
	.byte	$C4
	.byte	$E4
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$DF
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$B0
	.byte	$EA
	.byte	$C4
	.byte	$E4
	.byte	$E5
	.byte	$E0
	.byte	$E4
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$D1
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$05
	.byte	$E7
	.byte	$05
	.byte	$E7
	.byte	$E5
	.byte	$E1
	.byte	$E6
	.byte	$E7
	.byte	$05
	.byte	$EE
	.byte	$D9
	.byte	$05
	.byte	$D5
	.byte	$E8
	.byte	$E8
	.byte	$E6
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$D5
	.byte	$E8
	.byte	$D6
	.byte	$D5
	.byte	$E9
	.byte	$B1
	.byte	$B2
	.byte	$05
	.byte	$E5
	.byte	$D0
	.byte	$B3
	.byte	$C4
	.byte	$D4
	.byte	$05
	.byte	$05
	.byte	$D4
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$E4
	.byte	$D5
	.byte	$E6
	.byte	$B0
	.byte	$E9
	.byte	$05
	.byte	$D1
	.byte	$05
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$E4
	.byte	$D5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$E4
	.byte	$E5
	.byte	$D6
	.byte	$E4
	.byte	$05
	.byte	$05
	.byte	$EE
	.byte	$05
	.byte	$B0
	.byte	$08
	.byte	$D2
	.byte	$D3
	.byte	$E4
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$E5
	.byte	$E8
	.byte	$E6
	.byte	$E5
	.byte	$E8
	.byte	$E9
	.byte	$E5
	.byte	$E8
	.byte	$E8
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E5
	.byte	$E6
	.byte	$E5
	.byte	$E6
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$14
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$3D
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$ED
	.byte	$DB
	.byte	$50
	.byte	$55
	.byte	$53
	.byte	$48
	.byte	$20
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$DC
	.byte	$EC
	.byte	$ED
	.byte	$EC
	.byte	$3C
	.byte	$08
	.byte	$01
	.byte	$28
	.byte	$09
	.byte	$0A
	.byte	$08
	.byte	$01
	.byte	$13
	.byte	$0B
	.byte	$0C
	.byte	$08
	.byte	$01
	.byte	$06
	.byte	$15
	.byte	$19
	.byte	$08
	.byte	$01
	.byte	$15
	.byte	$1C
	.byte	$08
	.byte	$01
	.byte	$0A
	.byte	$25
	.byte	$26
	.byte	$08
	.byte	$4C
	.byte	$45
	.byte	$56
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$32
	.byte	$00
	.byte	$4D
	.byte	$4F
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$4C
	.byte	$41
	.byte	$53
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$08
	.byte	$01
	.byte	$23
	.byte	$18
	.byte	$08
	.byte	$01
	.byte	$0C
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$4F
	.byte	$4E
	.byte	$08
	.byte	$01
	.byte	$36
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$4E
	.byte	$08
	.byte	$01
	.byte	$2B
	.byte	$15
	.byte	$08
	.byte	$01
	.byte	$03
	.byte	$69
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$2E
	.byte	$44
	.byte	$52
	.byte	$4F
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$4E
	.byte	$08
	.byte	$01
	.byte	$07
	.byte	$6D
	.byte	$08
	.byte	$01
	.byte	$07
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$01
	.byte	$10
	.byte	$7C
	.byte	$7D
	.byte	$08
	.byte	$01
	.byte	$0C
	.byte	$20
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$01
	.byte	$0D
	.byte	$48
	.byte	$49
	.byte	$2D
	.byte	$53
	.byte	$43
	.byte	$4F
	.byte	$52
	.byte	$45
	.byte	$08
	.byte	$08
	.byte	$30
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$01
	.byte	$0F
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$C0
	.byte	$F0
	.byte	$01
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$00
_sound_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$67
	.byte	$9C
	.byte	$9D
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$95
	.byte	$96
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$AC
	.byte	$AD
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$BC
	.byte	$BD
	.byte	$8E
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$54
	.byte	$45
	.byte	$53
	.byte	$54
	.byte	$8F
	.byte	$B5
	.byte	$B6
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$CC
	.byte	$CD
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$C5
	.byte	$C6
	.byte	$00
	.byte	$01
	.byte	$89
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0B
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$1C
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4D
	.byte	$55
	.byte	$53
	.byte	$49
	.byte	$43
	.byte	$00
	.byte	$54
	.byte	$52
	.byte	$41
	.byte	$43
	.byte	$4B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$53
	.byte	$4F
	.byte	$55
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$46
	.byte	$58
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$30
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$30
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$50
	.byte	$4C
	.byte	$41
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$50
	.byte	$4C
	.byte	$41
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$44
	.byte	$4F
	.byte	$57
	.byte	$4E
	.byte	$00
	.byte	$4E
	.byte	$45
	.byte	$58
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$52
	.byte	$49
	.byte	$47
	.byte	$48
	.byte	$54
	.byte	$00
	.byte	$4E
	.byte	$45
	.byte	$58
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4C
	.byte	$45
	.byte	$46
	.byte	$54
	.byte	$00
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$56
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$86
	.byte	$2D
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$53
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$45
	.byte	$4C
	.byte	$45
	.byte	$43
	.byte	$54
	.byte	$00
	.byte	$54
	.byte	$4F
	.byte	$00
	.byte	$51
	.byte	$55
	.byte	$49
	.byte	$54
	.byte	$2D
	.byte	$00
	.byte	$01
	.byte	$84
	.byte	$AA
	.byte	$01
	.byte	$18
	.byte	$5A
	.byte	$AA
	.byte	$01
	.byte	$03
	.byte	$5A
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$AA
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$AA
	.byte	$01
	.byte	$11
	.byte	$0A
	.byte	$01
	.byte	$06
	.byte	$0A
	.byte	$01
	.byte	$00
_ty_screen:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$46
	.byte	$8E
	.byte	$00
	.byte	$53
	.byte	$50
	.byte	$45
	.byte	$43
	.byte	$49
	.byte	$41
	.byte	$4C
	.byte	$00
	.byte	$54
	.byte	$48
	.byte	$41
	.byte	$4E
	.byte	$4B
	.byte	$53
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$38
	.byte	$30
	.byte	$31
	.byte	$00
	.byte	$50
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$4A
	.byte	$45
	.byte	$4B
	.byte	$55
	.byte	$54
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$28
	.byte	$41
	.byte	$47
	.byte	$45
	.byte	$4E
	.byte	$54
	.byte	$42
	.byte	$41
	.byte	$53
	.byte	$45
	.byte	$59
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$4C
	.byte	$49
	.byte	$44
	.byte	$4E
	.byte	$41
	.byte	$52
	.byte	$49
	.byte	$51
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$42
	.byte	$45
	.byte	$4E
	.byte	$00
	.byte	$4C
	.byte	$41
	.byte	$52
	.byte	$53
	.byte	$53
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$4D
	.byte	$2D
	.byte	$54
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$42
	.byte	$45
	.byte	$4E
	.byte	$4A
	.byte	$59
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$4D
	.byte	$45
	.byte	$4D
	.byte	$42
	.byte	$4C
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$42
	.byte	$52
	.byte	$4F
	.byte	$4B
	.byte	$45
	.byte	$00
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$44
	.byte	$49
	.byte	$4F
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$55
	.byte	$55
	.byte	$4E
	.byte	$41
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$2B
	.byte	$43
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$48
	.byte	$52
	.byte	$49
	.byte	$53
	.byte	$43
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$4E
	.byte	$45
	.byte	$53
	.byte	$2D
	.byte	$44
	.byte	$4F
	.byte	$55
	.byte	$47
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$55
	.byte	$00
	.byte	$41
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$4B
	.byte	$48
	.byte	$49
	.byte	$4E
	.byte	$00
	.byte	$50
	.byte	$4D
	.byte	$59
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$2D
	.byte	$44
	.byte	$4F
	.byte	$47
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$53
	.byte	$48
	.byte	$49
	.byte	$52
	.byte	$55
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$44
	.byte	$52
	.byte	$45
	.byte	$58
	.byte	$45
	.byte	$47
	.byte	$41
	.byte	$52
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$53
	.byte	$4F
	.byte	$4C
	.byte	$45
	.byte	$00
	.byte	$47
	.byte	$4F
	.byte	$4F
	.byte	$53
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$27
	.byte	$45
	.byte	$52
	.byte	$49
	.byte	$43
	.byte	$49
	.byte	$43
	.byte	$58
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$54
	.byte	$45
	.byte	$50
	.byte	$50
	.byte	$4C
	.byte	$45
	.byte	$53
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$46
	.byte	$49
	.byte	$53
	.byte	$4B
	.byte	$42
	.byte	$49
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$54
	.byte	$48
	.byte	$45
	.byte	$00
	.byte	$41
	.byte	$53
	.byte	$4D
	.byte	$00
	.byte	$4C
	.byte	$49
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$25
	.byte	$49
	.byte	$4E
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$54
	.byte	$48
	.byte	$45
	.byte	$4D
	.byte	$45
	.byte	$54
	.byte	$41
	.byte	$4C
	.byte	$42
	.byte	$45
	.byte	$41
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$2E
	.byte	$02
	.byte	$02
	.byte	$41
	.byte	$4E
	.byte	$44
	.byte	$00
	.byte	$59
	.byte	$4F
	.byte	$55
	.byte	$21
	.byte	$00
	.byte	$02
	.byte	$23
	.byte	$80
	.byte	$A0
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$65
	.byte	$55
	.byte	$55
	.byte	$01
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$AA
	.byte	$80
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$50
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$5A
	.byte	$84
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$66
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$0A
	.byte	$02
	.byte	$03
	.byte	$0A
	.byte	$02
	.byte	$00
_attack_delay:
	.word	$0258
_starting_levels:
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
_konami_code:
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$40
	.byte	$80
	.byte	$10
_def_line:
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$06
	.byte	$0C
	.byte	$0E
	.byte	$08
	.byte	$09
	.byte	$0C
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$0B
_def_square:
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
_def_L_rev:
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$09
_def_L:
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$09
_def_S:
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$0C
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$09
_def_Z:
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$04
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$08
_def_T:
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$09
	.byte	$06
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$09
	.byte	$03
	.byte	$01
_srs_rotate_lookup:
	.byte	$0E
	.byte	$0D
	.byte	$38
	.byte	$0E
	.byte	$12
	.byte	$1A
	.byte	$25
	.byte	$04
	.byte	$1A
	.byte	$26
	.byte	$1A
	.byte	$0D
	.byte	$2C
	.byte	$1A
	.byte	$06
	.byte	$0E
	.byte	$25
	.byte	$10
	.byte	$0E
	.byte	$32
	.byte	$0B
	.byte	$1E
	.byte	$20
	.byte	$14
	.byte	$26
	.byte	$1B
	.byte	$0A
	.byte	$1C
	.byte	$28
	.byte	$12
	.byte	$0E
	.byte	$1E
	.byte	$02
	.byte	$3C
	.byte	$09
	.byte	$1A
	.byte	$0A
	.byte	$36
	.byte	$00
	.byte	$31
_empty_row_hold:
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
_empty_row_hold_sky:
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$06
_cluster_sprites:
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
_cluster_offsets:
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
_button_delay:
	.byte	$05
_OOB_TOP:
	.byte	$28
_tentacle_offsets:
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$00
_garbage_types:
	.byte	$60
	.byte	$70
	.byte	$2F
_board_lookup_y:
	.byte	$00
	.byte	$0A
	.byte	$14
	.byte	$1E
	.byte	$28
	.byte	$32
	.byte	$3C
	.byte	$46
	.byte	$50
	.byte	$5A
	.byte	$64
	.byte	$6E
	.byte	$78
	.byte	$82
	.byte	$8C
	.byte	$96
	.byte	$A0
	.byte	$AA
	.byte	$B4
	.byte	$BE
	.byte	$C8
	.byte	$D2
	.byte	$DC
	.byte	$E6
_empty_row:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_full_row:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_full_col:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_option_empty:
	.byte	$00
	.byte	$00
_option_icon:
	.byte	$25
	.byte	$26
_palette_bg:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
_palette_sp:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$16
	.byte	$31
	.byte	$36
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$36
_palette_bg_options:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$22
	.byte	$0F
	.byte	$26
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
_palette_bg_list:
	.byte	$0F
	.byte	$22
	.byte	$31
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$22
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$22
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$1A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$1C
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$0C
	.byte	$23
	.byte	$34
	.byte	$0F
	.byte	$00
	.byte	$07
	.byte	$10
	.byte	$0F
	.byte	$1A
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$16
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$1C
	.byte	$10
	.byte	$0F
	.byte	$00
	.byte	$07
	.byte	$22
	.byte	$0F
	.byte	$1B
	.byte	$07
	.byte	$17
	.byte	$0F
	.byte	$0C
	.byte	$11
	.byte	$22
	.byte	$0F
	.byte	$0C
	.byte	$22
	.byte	$27
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$27
	.byte	$0F
	.byte	$1A
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$22
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$36
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$26
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$1C
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$23
	.byte	$32
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$2A
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$23
	.byte	$26
	.byte	$36
_fall_rates_per_level:
	.byte	$30
	.byte	$2B
	.byte	$26
	.byte	$21
	.byte	$1C
	.byte	$17
	.byte	$12
	.byte	$0D
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
_attack_style_strings:
	.byte	$46,$49,$58,$45,$44,$00
	.res	1,$00
	.byte	$54,$49,$4D,$45,$44,$00
	.res	1,$00
	.byte	$43,$4C,$41,$53,$53,$49,$43
_off_on_string:
	.byte	$4F,$46,$46,$00
	.byte	$4F,$4E,$00
	.res	1,$00
_block_style_strings:
	.byte	$4D,$4F,$44,$45,$52,$4E,$00
	.byte	$43,$4C,$41,$53,$53,$49,$43
_hard_drop_types:
	.byte	$4F,$46,$46,$00
	.byte	$54,$41,$50,$00
	.byte	$48,$4F,$4C,$44
_text_push_start:
	.byte	$50,$55,$53,$48,$20,$53,$54,$41,$52,$54,$00
_clear_push_start:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
_metasprite_tentacle_title:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$80
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$81
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$90
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$91
	.byte	$01
	.byte	$80
L1473:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00
L147D:
	.byte	$41,$2D,$52,$45,$53,$54,$41,$52,$54,$20,$00
L1487:
	.byte	$42,$2D,$51,$55,$49,$54,$20,$20,$20,$20,$00
L1539:
	.byte	$30,$30,$30,$30,$30,$30,$30,$00
L1518:
	.byte	$20,$20,$20,$20,$20,$20,$00
L1800	:=	L1539+4
L17DB	:=	L1539+4
L155D	:=	L1539+5

.segment	"BSS"

.segment	"ZEROPAGE"
_tick_count:
	.res	1,$00
_tick_count_large:
	.res	2,$00
_ticks_in_state_large:
	.res	2,$00
_hit_reaction_remaining:
	.res	1,$00
_attack_queue_ticks_remaining:
	.res	2,$00
_pad_all:
	.res	1,$00
_pad_all_new:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_pad2:
	.res	1,$00
_pad2_new:
	.res	1,$00
_scroll_y:
	.res	2,$00
_cur_option:
	.res	1,$00
_attack_style:
	.res	1,$00
_music_on:
	.res	1,$00
_sfx_on:
	.res	1,$00
_block_style:
	.res	1,$00
_saved_starting_level:
	.res	1,$00
_hard_drops_on:
	.res	1,$00
_hard_drop_hold_remaining:
	.res	1,$00
_hard_drop_tap_required:
	.res	1,$00
_cur_konami_index:
	.res	1,$00
_cur_rot:
	.res	1,$00
_cur_cluster:
	.res	22,$00
_next_cluster:
	.res	22,$00
_held_cluster_id:
	.res	1,$00
_held_cluster_rot:
	.res	1,$00
_held_cluster_def:
	.res	16,$00
_staging_cluster_id:
	.res	1,$00
_staging_cluster_rot:
	.res	1,$00
_can_hold_cluster:
	.res	1,$00
_attack_row_status:
	.res	10,$00
_horz_button_delay:
	.res	1,$00
_require_new_down_button:
	.res	1,$00
_fall_frame_counter:
	.res	1,$00
_lines_cleared_one:
	.res	1,$00
_lines_cleared_ten:
	.res	1,$00
_lines_cleared_hundred:
	.res	1,$00
_cur_score:
	.res	4,$00
_cur_nt:
	.res	1,$00
_off_nt:
	.res	1,$00
_hit:
	.res	1,$00
_temp_fall_frame_counter:
	.res	1,$00
_old_x:
	.res	1,$00
_id:
	.res	1,$00
_min_y:
	.res	1,$00
_max_y:
	.res	1,$00
_in_x:
	.res	1,$00
_in_y:
	.res	1,$00
_in_id:
	.res	1,$00
_local_start_x:
	.res	1,$00
_local_start_y:
	.res	1,$00
_local_ix:
	.res	1,$00
_local_iy:
	.res	1,$00
_local_t:
	.res	2,$00
_local_bit:
	.res	1,$00
_local_row_status:
	.res	1,$00
_test_song:
	.res	1,$00
_test_song_active:
	.res	1,$00
_test_sound:
	.res	1,$00
_cur_gameplay_music:
	.res	1,$00
_attack_queued:
	.res	1,$00
_cur_garbage_type:
	.res	1,$00
_delay_lock_remaining:
	.res	1,$00
_delay_lock_skip:
	.res	1,$00
_delay_spawn_remaining:
	.res	1,$00
_spawn_queued:
	.res	1,$00
_row_to_clear:
	.res	1,$00
_kill_row_cur:
	.res	1,$00
_kill_row_queued:
	.res	1,$00
_start_delay_remaining:
	.res	1,$00
_mask:
	.res	2,$00
_address:
	.res	2,$00
_time_of_day:
	.res	1,$00
_temp_pal:
	.res	16,$00
_lines_cleared_y:
	.res	4,$00
_line_score_mod:
	.res	2,$00
.segment	"BSS"
_game_board:
	.res	240,$00
_game_board_temp:
	.res	240,$00
_copy_board_data:
	.res	20,$00
_screen_shake_remaining:
	.res	1,$00
_is_tspin:
	.res	1,$00
_is_last_rotate:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ randomize_bag (unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_randomize_bag: near

	.dbg	func, "randomize_bag", "00", extern, "_randomize_bag"
	.dbg	sym, "arr", "00", auto, 1
	.dbg	sym, "n", "00", auto, 0
	.dbg	sym, "i", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2394
	jsr     pusha
;
; for (i = n - 1; i > 0; i--)
;
	.dbg	line, "main.c", 2398
	jsr     decsp1
	ldy     #$01
	lda     (sp),y
	sec
	sbc     #$01
	dey
L1954:	sta     (sp),y
	lda     (sp),y
	beq     L1257
;
; unsigned char j = rand() % (i + 1);
;
	.dbg	line, "main.c", 2401
	jsr     _rand
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L1261
	inx
L1261:	jsr     tosumodax
	jsr     pusha
;
; swap(&arr[i], &arr[j]);
;
	.dbg	line, "main.c", 2404
	ldy     #$01
	lda     (sp),y
	clc
	ldy     #$03
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$05
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     _swap
;
; }
;
	.dbg	line, "main.c", 2405
	jsr     incsp1
;
; for (i = n - 1; i > 0; i--)
;
	.dbg	line, "main.c", 2398
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L1954
;
; }
;
	.dbg	line, "main.c", 2406
L1257:	jmp     incsp4
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ swap (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_swap: near

	.dbg	func, "swap", "00", extern, "_swap"
	.dbg	sym, "a", "00", auto, 2
	.dbg	sym, "b", "00", auto, 0
	.dbg	sym, "temp", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2409
	jsr     pushax
;
; unsigned char temp = *a;
;
	.dbg	line, "main.c", 2410
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
;
; *a = *b;
;
	.dbg	line, "main.c", 2411
	ldy     #$06
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
;
; *b = temp;
;
	.dbg	line, "main.c", 2412
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (sp),y
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2413
	jmp     incsp5
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ hold_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hold_cluster: near

	.dbg	func, "hold_cluster", "00", extern, "_hold_cluster"

.segment	"BSS"

L18C9:
	.res	1,$00
L18CA:
	.res	1,$00

.segment	"CODE"

;
; can_hold_cluster = 0;
;
	.dbg	line, "main.c", 3848
	lda     #$00
	sta     _can_hold_cluster
;
; if(held_cluster_id == 255) //Nothing is held
;
	.dbg	line, "main.c", 3850
	lda     _held_cluster_id
	cmp     #$FF
	bne     L195D
;
; held_cluster_id = cur_cluster.id;
;
	.dbg	line, "main.c", 3853
	lda     _cur_cluster+21
	sta     _held_cluster_id
;
; held_cluster_rot = cur_rot;
;
	.dbg	line, "main.c", 3854
	lda     _cur_rot
	sta     _held_cluster_rot
;
; memcpy(held_cluster_def, cluster_defs_classic[held_cluster_id], (4 * 4));
;
	.dbg	line, "main.c", 3855
	lda     #<(_held_cluster_def)
	ldx     #>(_held_cluster_def)
	jsr     pushax
	ldx     #$00
	lda     _held_cluster_id
	asl     a
	bcc     L195A
	inx
	clc
L195A:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 3858
	jsr     _spawn_new_cluster
;
; can_hold_cluster = 1;
;
	.dbg	line, "main.c", 3859
	lda     #$01
	sta     _can_hold_cluster
;
; else
;
	.dbg	line, "main.c", 3861
	jmp     L195E
;
; staging_cluster_id = held_cluster_id;
;
	.dbg	line, "main.c", 3864
L195D:	lda     _held_cluster_id
	sta     _staging_cluster_id
;
; staging_cluster_rot = held_cluster_rot;
;
	.dbg	line, "main.c", 3865
	lda     _held_cluster_rot
	sta     _staging_cluster_rot
;
; held_cluster_id = cur_cluster.id;
;
	.dbg	line, "main.c", 3868
	lda     _cur_cluster+21
	sta     _held_cluster_id
;
; held_cluster_rot = cur_rot;
;
	.dbg	line, "main.c", 3869
	lda     _cur_rot
	sta     _held_cluster_rot
;
; memcpy(held_cluster_def, cluster_defs_classic[held_cluster_id], (4 * 4));
;
	.dbg	line, "main.c", 3870
	lda     #<(_held_cluster_def)
	ldx     #>(_held_cluster_def)
	jsr     pushax
	ldx     #$00
	lda     _held_cluster_id
	asl     a
	bcc     L195B
	inx
	clc
L195B:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; cur_cluster.id = staging_cluster_id; //id
;
	.dbg	line, "main.c", 3873
	lda     _staging_cluster_id
	sta     _cur_cluster+21
;
; cur_rot = staging_cluster_rot; 
;
	.dbg	line, "main.c", 3874
	lda     _staging_cluster_rot
	sta     _cur_rot
;
; cur_block.x = 3; // Reset the block.
;
	.dbg	line, "main.c", 3875
	lda     #$03
	sta     _cur_block
;
; cur_block.y = cluster_offsets[staging_cluster_id];
;
	.dbg	line, "main.c", 3876
	ldy     _staging_cluster_id
	lda     _cluster_offsets,y
	sta     _cur_block+1
;
; memcpy(cur_cluster.def, cluster_defs_classic[staging_cluster_id], 4 * 4); //cluster_defs_classic[id]
;
	.dbg	line, "main.c", 3877
	lda     #<(_cur_cluster+4)
	ldx     #>(_cur_cluster+4)
	jsr     pushax
	ldx     #$00
	lda     _staging_cluster_id
	asl     a
	bcc     L195C
	inx
	clc
L195C:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4); 
;
	.dbg	line, "main.c", 3878
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; cur_cluster.sprite = cluster_sprites[staging_cluster_id] ; //cluster_sprites[id] 
;
	.dbg	line, "main.c", 3879
	ldy     _staging_cluster_id
	lda     _cluster_sprites,y
	sta     _cur_cluster+20
;
; local_iy = 0;
;
	.dbg	line, "main.c", 3885
L195E:	lda     #$00
	sta     _local_iy
;
; local_ix = 0;
;
	.dbg	line, "main.c", 3886
	sta     _local_ix
;
; local_t = cluster_sprites[held_cluster_id];
;
	.dbg	line, "main.c", 3887
	ldy     _held_cluster_id
	sta     _local_t+1
	lda     _cluster_sprites,y
	sta     _local_t
;
; delay(1);
;
	.dbg	line, "main.c", 3890
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3891
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 32));
;
	.dbg	line, "main.c", 3894
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 40));
;
	.dbg	line, "main.c", 3895
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$28
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; delay(1);
;
	.dbg	line, "main.c", 3897
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3898
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 48));
;
	.dbg	line, "main.c", 3900
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold_sky, 4, get_ppu_addr(cur_nt, 220, 56));
;
	.dbg	line, "main.c", 3901
	jsr     decsp3
	lda     #<(_empty_row_hold_sky)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold_sky)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$38
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; for (l = 0; l < 4; ++l)
;
	.dbg	line, "main.c", 3903
	lda     #$00
	sta     L18C9
L195F:	lda     L18C9
	cmp     #$04
	bcc     L1968
;
; }
;
	.dbg	line, "main.c", 3918
	rts
;
; m = held_cluster_def[held_cluster_rot][l];
;
	.dbg	line, "main.c", 3906
L1968:	ldx     #$00
	lda     _held_cluster_rot
	jsr     aslax2
	clc
	adc     #<(_held_cluster_def)
	sta     ptr1
	txa
	adc     #>(_held_cluster_def)
	sta     ptr1+1
	ldy     L18C9
	lda     (ptr1),y
	sta     L18CA
;
; local_ix = morton_compact_one_by_one(m >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 3909
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(m >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 3910
	lda     L18CA
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; one_vram_buffer(local_t, get_ppu_addr(cur_nt, 
;
	.dbg	line, "main.c", 3912
	lda     _local_t
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
;
; 220 + (local_ix << 3),
;
	.dbg	line, "main.c", 3913
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$DC
	dey
	sta     (sp),y
;
; 32 - (( held_cluster_id == 3 || (held_cluster_id != 2 && held_cluster_rot == 2) ) ? 8 : 0) + (local_iy << 3))
;
	.dbg	line, "main.c", 3914
	lda     #$20
	jsr     pusha0
	lda     _held_cluster_id
	cmp     #$03
	beq     L1966
	cmp     #$02
	beq     L1960
	lda     _held_cluster_rot
	cmp     #$02
	beq     L1966
L1960:	lda     #$00
	jmp     L194F
L1966:	lda     #$08
L194F:	jsr     tossuba0
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _local_iy
	jsr     aslax3
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	pla
;
; ); //8 + (local_iy << 3)
;
	.dbg	line, "main.c", 3915
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; for (l = 0; l < 4; ++l)
;
	.dbg	line, "main.c", 3903
	inc     L18C9
	jmp     L195F
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ draw_menu_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_menu_sprites: near

	.dbg	func, "draw_menu_sprites", "00", extern, "_draw_menu_sprites"

.segment	"BSS"

L0EF3:
	.res	1,$00

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "main.c", 1560
	jsr     _oam_clear
;
; t = tick_count % 64;
;
	.dbg	line, "main.c", 1563
	lda     _tick_count
	and     #$3F
	sta     L0EF3
;
; if (t > 48)
;
	.dbg	line, "main.c", 1564
	cmp     #$31
	bcc     L196A
;
; local_ix = 0x69;
;
	.dbg	line, "main.c", 1566
	lda     #$69
;
; else if (t > 32)
;
	.dbg	line, "main.c", 1568
	jmp     L1969
L196A:	lda     L0EF3
	cmp     #$21
	bcc     L196B
;
; local_ix = 0x68;
;
	.dbg	line, "main.c", 1570
	lda     #$68
;
; else if (t > 16)
;
	.dbg	line, "main.c", 1572
	jmp     L1969
L196B:	lda     L0EF3
	cmp     #$11
	bcc     L196C
;
; local_ix = 0x67;
;
	.dbg	line, "main.c", 1574
	lda     #$67
;
; else
;
	.dbg	line, "main.c", 1576
	jmp     L1969
;
; local_ix = 0x66;
;
	.dbg	line, "main.c", 1578
L196C:	lda     #$66
L1969:	sta     _local_ix
;
; oam_spr(10 << 3, 23 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1581
	jsr     decsp3
	lda     #$50
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(22 << 3, 23 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1582
	jsr     decsp3
	lda     #$B0
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_meta_spr(19<<3, 14<<3, metasprite_tentacle_title);
;
	.dbg	line, "main.c", 1585
	jsr     decsp2
	lda     #$98
	ldy     #$01
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     #<(_metasprite_tentacle_title)
	ldx     #>(_metasprite_tentacle_title)
	jmp     _oam_meta_spr
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ draw_gameplay_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_gameplay_sprites: near

	.dbg	func, "draw_gameplay_sprites", "00", extern, "_draw_gameplay_sprites"

.segment	"BSS"

L0F17:
	.res	1,$00
L0F18:
	.res	1,$00
L0F19:
	.res	1,$00
L0F1A:
	.res	1,$00

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "main.c", 1615
	jsr     _oam_clear
;
; local_start_x = (cur_block.x << 3) + BOARD_START_X_PX;
;
	.dbg	line, "main.c", 1621
	lda     _cur_block
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	sta     _local_start_x
;
; local_start_y = (cur_block.y << 3) + BOARD_START_Y_PX;
;
	.dbg	line, "main.c", 1622
	lda     _cur_block+1
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	sta     _local_start_y
;
; if (cur_block.y != 255)
;
	.dbg	line, "main.c", 1625
	lda     _cur_block+1
	cmp     #$FF
	beq     L1979
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 1627
	lda     #$00
	sta     L0F19
L1978:	lda     L0F19
	cmp     #$04
	bcs     L1979
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 1630
	ldy     L0F19
	lda     _cur_cluster,y
	sta     L0F1A
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 1633
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 1634
	lda     L0F1A
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; if (local_start_y + (local_iy << 3) > OOB_TOP)
;
	.dbg	line, "main.c", 1639
	ldx     #$00
	lda     _local_iy
	jsr     aslax3
	clc
	adc     _local_start_y
	bcc     L1970
	inx
L1970:	sec
	sbc     _OOB_TOP
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L0F28
	beq     L0F28
;
; oam_spr(local_start_x + (local_ix << 3), local_start_y + (local_iy << 3), cur_cluster.sprite, 0);
;
	.dbg	line, "main.c", 1641
	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     _local_start_x
	ldy     #$02
	sta     (sp),y
	lda     _local_iy
	asl     a
	asl     a
	asl     a
	clc
	adc     _local_start_y
	dey
	sta     (sp),y
	lda     _cur_cluster+20
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 1627
L0F28:	inc     L0F19
	jmp     L1978
;
; if (attack_style != ATTACK_NEVER)
;
	.dbg	line, "main.c", 1648
L1979:	lda     _attack_style
	cmp     #$02
	jeq     L197F
;
; shake_offset = 0;
;
	.dbg	line, "main.c", 1650
	lda     #$00
	sta     L0F17
;
; if (attack_style == ATTACK_ON_TIME)
;
	.dbg	line, "main.c", 1651
	lda     _attack_style
	cmp     #$01
	bne     L197B
;
; if (attack_queue_ticks_remaining < 120)
;
	.dbg	line, "main.c", 1653
	lda     _attack_queue_ticks_remaining+1
	cmp     #$00
	bne     L0F4A
	lda     _attack_queue_ticks_remaining
	cmp     #$78
L0F4A:	bcs     L0F48
;
; speed = tick_count >> 2;
;
	.dbg	line, "main.c", 1655
	lda     _tick_count
;
; else if (attack_queue_ticks_remaining < 300)
;
	.dbg	line, "main.c", 1657
	jmp     L1986
L0F48:	lda     _attack_queue_ticks_remaining+1
	cmp     #$01
	bne     L0F50
	lda     _attack_queue_ticks_remaining
	cmp     #$2C
L0F50:	bcs     L197A
;
; speed = tick_count >> 3;
;
	.dbg	line, "main.c", 1659
	lda     _tick_count
;
; else
;
	.dbg	line, "main.c", 1661
	jmp     L1989
;
; speed = tick_count >> 5;
;
	.dbg	line, "main.c", 1663
L197A:	lda     _tick_count
	lsr     a
;
; else
;
	.dbg	line, "main.c", 1666
	jmp     L198C
;
; speed = tick_count >> 4;
;
	.dbg	line, "main.c", 1668
L197B:	lda     _tick_count
L198C:	lsr     a
L1989:	lsr     a
L1986:	lsr     a
	lsr     a
	sta     L0F18
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 1672
	lda     #$00
	sta     _local_ix
L197C:	lda     _local_ix
	cmp     #$0A
	jcs     L197F
;
; local_row_status = attack_row_status[local_ix];
;
	.dbg	line, "main.c", 1674
	ldy     _local_ix
	lda     _attack_row_status,y
	sta     _local_row_status
;
; if (local_row_status > 0)
;
	.dbg	line, "main.c", 1675
	lda     _local_row_status
	jeq     L197E
;
; for (local_iy = 0; local_iy < local_row_status /*&& local_iy < ATTACK_QUEUE_SIZE*/; ++local_iy)
;
	.dbg	line, "main.c", 1677
	lda     #$00
	sta     _local_iy
	tax
L197D:	lda     _local_iy
	cmp     _local_row_status
	jcs     L197E
;
; shake_offset = tentacle_offsets[((local_iy + speed) & 3)]; // &3 = %4 = number of entries in array.
;
	.dbg	line, "main.c", 1687
	clc
	adc     L0F18
	and     #$03
	sta     ptr1
	txa
	clc
	adc     #>(_tentacle_offsets)
	sta     ptr1+1
	ldy     #<(_tentacle_offsets)
	lda     (ptr1),y
	sta     L0F17
;
; if (local_iy == local_row_status - 1)
;
	.dbg	line, "main.c", 1690
	lda     _local_row_status
	sec
	sbc     #$01
	bcs     L0F77
	dex
L0F77:	cpx     #$00
	bne     L0F75
	cmp     _local_iy
	bne     L0F75
;
; BOARD_START_X_PX + (local_ix << 3) + shake_offset,
;
	.dbg	line, "main.c", 1693
	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	clc
	adc     L0F17
	ldy     #$02
	sta     (sp),y
;
; (BOARD_END_Y_PX) + (ATTACK_QUEUE_SIZE << 3) - (local_iy << 3),
;
	.dbg	line, "main.c", 1694
	lda     #$E0
	jsr     pusha0
	lda     _local_iy
	jsr     aslax3
	jsr     tossubax
	ldy     #$01
	sta     (sp),y
;
; 0xf9,
;
	.dbg	line, "main.c", 1695
	lda     #$F9
;
; else
;
	.dbg	line, "main.c", 1698
	jmp     L198A
;
; BOARD_START_X_PX + (local_ix << 3) + shake_offset,
;
	.dbg	line, "main.c", 1701
L0F75:	jsr     decsp3
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	clc
	adc     L0F17
	ldy     #$02
	sta     (sp),y
;
; (BOARD_END_Y_PX) + (ATTACK_QUEUE_SIZE << 3) - (local_iy << 3),
;
	.dbg	line, "main.c", 1702
	lda     #$E0
	jsr     pusha0
	lda     _local_iy
	jsr     aslax3
	jsr     tossubax
	ldy     #$01
	sta     (sp),y
;
; 0xf8,
;
	.dbg	line, "main.c", 1703
	lda     #$F8
L198A:	dey
	sta     (sp),y
;
; 1);
;
	.dbg	line, "main.c", 1704
	lda     #$01
	jsr     _oam_spr
;
; for (local_iy = 0; local_iy < local_row_status /*&& local_iy < ATTACK_QUEUE_SIZE*/; ++local_iy)
;
	.dbg	line, "main.c", 1677
	ldx     #$00
	inc     _local_iy
	jmp     L197D
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 1672
L197E:	inc     _local_ix
	jmp     L197C
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 1720
L197F:	lda     _hit_reaction_remaining
	beq     L1980
;
; oam_spr((3 << 3) /*+ r*/, (24 << 3), 0x65, 1);
;
	.dbg	line, "main.c", 1724
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C0
	dey
	sta     (sp),y
	lda     #$65
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 25 << 3, 0x64, 1);
;
	.dbg	line, "main.c", 1725
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x74, 1);
;
	.dbg	line, "main.c", 1726
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$74
;
; else
;
	.dbg	line, "main.c", 1745
	jmp     L198B
;
; if (attack_style == ATTACK_NEVER)
;
	.dbg	line, "main.c", 1747
L1980:	lda     _attack_style
	cmp     #$02
	bne     L0FA3
;
; oam_spr(3 << 3, 25 << 3, 0x63, 1);
;
	.dbg	line, "main.c", 1750
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$63
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x73, 1);
;
	.dbg	line, "main.c", 1751
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$73
;
; else
;
	.dbg	line, "main.c", 1753
	jmp     L198B
;
; local_t = tick_count_large % BLINK_LEN;
;
	.dbg	line, "main.c", 1757
L0FA3:	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     pushax
	ldx     #$01
	lda     #$2C
	jsr     tosumodax
	sta     _local_t
	stx     _local_t+1
;
; if (local_t > BLINK_LEN - 5)
;
	.dbg	line, "main.c", 1759
	cmp     #$28
	txa
	sbc     #$01
;
; else if (local_t > (BLINK_LEN - 10))
;
	.dbg	line, "main.c", 1764
	bcs     L19A0
	lda     _local_t
	cmp     #$23
	lda     _local_t+1
	sbc     #$01
	bcc     L0FC1
;
; oam_spr(3 << 3, 25 << 3, 0x63, 1);
;
	.dbg	line, "main.c", 1766
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$63
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x73, 1);
;
	.dbg	line, "main.c", 1767
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$73
;
; else if (local_t > BLINK_LEN - 15)
;
	.dbg	line, "main.c", 1769
	jmp     L198B
L0FC1:	lda     _local_t
	cmp     #$1E
	lda     _local_t+1
	sbc     #$01
	bcc     L1981
;
; oam_spr(3 << 3, 25 << 3, 0x62, 1);
;
	.dbg	line, "main.c", 1771
L19A0:	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$62
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(3 << 3, 26 << 3, 0x72, 1);
;
	.dbg	line, "main.c", 1772
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #$72
L198B:	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; local_t = tick_count & 63;
;
	.dbg	line, "main.c", 1778
L1981:	lda     _tick_count
	ldx     #$00
	and     #$3F
	sta     _local_t
	stx     _local_t+1
;
; if (local_t > 48)
;
	.dbg	line, "main.c", 1779
	cmp     #$31
	bcc     L0FDF
;
; local_ix = 0x69;
;
	.dbg	line, "main.c", 1781
	lda     #$69
;
; else if (local_t > 32)
;
	.dbg	line, "main.c", 1783
	jmp     L1977
L0FDF:	lda     _local_t
	cmp     #$21
	lda     _local_t+1
	sbc     #$00
	bcc     L0FE4
;
; local_ix = 0x68;
;
	.dbg	line, "main.c", 1785
	lda     #$68
;
; else if (local_t > 16)
;
	.dbg	line, "main.c", 1787
	jmp     L1977
L0FE4:	lda     _local_t
	cmp     #$11
	lda     _local_t+1
	sbc     #$00
	bcc     L1982
;
; local_ix = 0x67;
;
	.dbg	line, "main.c", 1789
	lda     #$67
;
; else
;
	.dbg	line, "main.c", 1791
	jmp     L1977
;
; local_ix = 0x66;
;
	.dbg	line, "main.c", 1793
L1982:	lda     #$66
L1977:	sta     _local_ix
;
; oam_spr(8 << 3, 1 << 3, local_ix, 2);
;
	.dbg	line, "main.c", 1796
	jsr     decsp3
	lda     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(24 << 3, 1 << 3, local_ix, 2);
;
	.dbg	line, "main.c", 1797
	jsr     decsp3
	lda     #$C0
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(3 << 3, 10 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1798
	jsr     decsp3
	lda     #$18
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(27 << 3, 10 << 3, local_ix, 0);
;
	.dbg	line, "main.c", 1799
	jsr     decsp3
	lda     #$D8
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _local_ix
	dey
	sta     (sp),y
	tya
	jmp     _oam_spr
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

	.dbg	func, "movement", "00", extern, "_movement"

.segment	"BSS"

L1005:
	.res	1,$00
L1006:
	.res	1,$00

.segment	"CODE"

;
; hit = 0;
;
	.dbg	line, "main.c", 1808
	lda     #$00
	sta     _hit
;
; temp_fall_frame_counter = 0;
;
	.dbg	line, "main.c", 1809
	sta     _temp_fall_frame_counter
;
; old_x = 0;
;
	.dbg	line, "main.c", 1810
	sta     _old_x
;
; delay_lock_skip = 0;
;
	.dbg	line, "main.c", 1811
	sta     _delay_lock_skip
;
; if (start_delay_remaining == 0)
;
	.dbg	line, "main.c", 1813
	lda     _start_delay_remaining
	bne     L19A9
;
; --fall_frame_counter;
;
	.dbg	line, "main.c", 1815
	dec     _fall_frame_counter
;
; else
;
	.dbg	line, "main.c", 1817
	jmp     L19AA
;
; --start_delay_remaining;
;
	.dbg	line, "main.c", 1819
L19A9:	dec     _start_delay_remaining
;
; if (pad_all_new & PAD_SELECT)
;
	.dbg	line, "main.c", 1825
L19AA:	lda     _pad_all_new
	and     #$20
	beq     L19AB
;
; if(can_hold_cluster)
;
	.dbg	line, "main.c", 1864
	lda     _can_hold_cluster
	beq     L19AB
;
; hold_cluster();
;
	.dbg	line, "main.c", 1865
	jsr     _hold_cluster
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1873
L19AB:	lda     _pad_all_new
	and     #$80
	beq     L19AC
;
; rotate_cur_cluster(1);
;
	.dbg	line, "main.c", 1875
	lda     #$01
;
; else if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1877
	jmp     L19A5
L19AC:	lda     _pad_all_new
	and     #$40
	beq     L19AD
;
; rotate_cur_cluster(-1);
;
	.dbg	line, "main.c", 1879
	lda     #$FF
L19A5:	jsr     _rotate_cur_cluster
;
; if (horz_button_delay > 0)
;
	.dbg	line, "main.c", 1882
L19AD:	lda     _horz_button_delay
	beq     L19AE
;
; --horz_button_delay;
;
	.dbg	line, "main.c", 1884
	dec     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1887
L19AE:	lda     _cur_block
	sta     _old_x
;
; if (((pad_all & PAD_RIGHT) && horz_button_delay == 0) || (pad_all_new & PAD_RIGHT))
;
	.dbg	line, "main.c", 1888
	lda     _pad_all
	and     #$01
	beq     L19B2
	lda     _horz_button_delay
	beq     L19B5
L19B2:	lda     _pad_all_new
	and     #$01
	beq     L19B7
;
; horz_button_delay = button_delay;
;
	.dbg	line, "main.c", 1890
L19B5:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad_all_new & PAD_RIGHT))
;
	.dbg	line, "main.c", 1891
	lda     _pad_all_new
	and     #$01
	beq     L19B6
;
; horz_button_delay <<= 1;
;
	.dbg	line, "main.c", 1893
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1898
L19B6:	lda     _cur_block
	sta     _old_x
;
; cur_block.x += 1;
;
	.dbg	line, "main.c", 1899
	inc     _cur_block
;
; else if (((pad_all & PAD_LEFT) && horz_button_delay == 0) || pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 1908
	jmp     L19E2
L19B7:	lda     _pad_all
	and     #$02
	beq     L19BB
	lda     _horz_button_delay
	beq     L19BE
L19BB:	lda     _pad_all_new
	and     #$02
	beq     L19C0
;
; horz_button_delay = button_delay;
;
	.dbg	line, "main.c", 1910
L19BE:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad_all_new & PAD_LEFT))
;
	.dbg	line, "main.c", 1911
	lda     _pad_all_new
	and     #$02
	beq     L19BF
;
; horz_button_delay <<= 1;
;
	.dbg	line, "main.c", 1914
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
	.dbg	line, "main.c", 1919
L19BF:	lda     _cur_block
	sta     _old_x
;
; cur_block.x -= 1; // note: wrap around
;
	.dbg	line, "main.c", 1920
	dec     _cur_block
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 1926
L19E2:	lda     _is_last_rotate
	sta     L1006
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 1927
	lda     #$00
	sta     _is_last_rotate
;
; if (cur_block.x != old_x && is_cluster_colliding())
;
	.dbg	line, "main.c", 1933
L19C0:	lda     _old_x
	cmp     _cur_block
	beq     L19C2
	jsr     _is_cluster_colliding
	tax
	beq     L19C2
;
; cur_block.x = old_x;
;
	.dbg	line, "main.c", 1935
	lda     _old_x
	sta     _cur_block
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 1936
	lda     L1006
	sta     _is_last_rotate
;
; temp_fall_frame_counter = fall_frame_counter;
;
	.dbg	line, "main.c", 1963
L19C2:	lda     _fall_frame_counter
	sta     _temp_fall_frame_counter
;
; hard_drop_performed = 0;
;
	.dbg	line, "main.c", 1965
	lda     #$00
	sta     L1005
;
; if (hard_drops_on && pad_all & PAD_UP && (pad_all & (PAD_LEFT | PAD_RIGHT)) == 0)
;
	.dbg	line, "main.c", 1966
	lda     _hard_drops_on
	beq     L19CE
	lda     _pad_all
	and     #$08
	beq     L19CE
	lda     _pad_all
	and     #$03
	bne     L19CE
;
; if ((pad_all & PAD_UP && hard_drop_tap_required == 0) || pad_all_new & PAD_UP)
;
	.dbg	line, "main.c", 1968
	lda     _pad_all
	and     #$08
	beq     L19C9
	lda     _hard_drop_tap_required
	beq     L19CC
L19C9:	lda     _pad_all_new
	and     #$08
	beq     L19D1
;
; --hard_drop_hold_remaining;
;
	.dbg	line, "main.c", 1970
L19CC:	dec     _hard_drop_hold_remaining
;
; if (hard_drop_hold_remaining == 0)
;
	.dbg	line, "main.c", 1972
	bne     L19D1
;
; hard_drop_performed = 1;
;
	.dbg	line, "main.c", 1974
	lda     #$01
	sta     L1005
;
; hard_drop_tap_required = 1;
;
	.dbg	line, "main.c", 1975
	sta     _hard_drop_tap_required
;
; while (!is_cluster_colliding())
;
	.dbg	line, "main.c", 1978
	jmp     L1077
;
; ++cur_block.y;
;
	.dbg	line, "main.c", 1980
L19CD:	inc     _cur_block+1
;
; while (!is_cluster_colliding())
;
	.dbg	line, "main.c", 1978
L1077:	jsr     _is_cluster_colliding
	tax
	beq     L19CD
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 1982
	lda     _is_last_rotate
	sta     L1006
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 1983
	lda     #$00
	sta     _is_last_rotate
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 1985
	lda     #$01
	sta     _delay_lock_skip
;
; else
;
	.dbg	line, "main.c", 1993
	jmp     L19D1
;
; if ((pad_all & (PAD_LEFT | PAD_RIGHT)) == 0)
;
	.dbg	line, "main.c", 1995
L19CE:	lda     _pad_all
	and     #$03
	bne     L19CF
;
; hard_drop_tap_required = 0;
;
	.dbg	line, "main.c", 1997
	sta     _hard_drop_tap_required
;
; if (hard_drops_on == 1) // tap
;
	.dbg	line, "main.c", 1999
L19CF:	lda     _hard_drops_on
	cmp     #$01
;
; else if (hard_drops_on == 2) // hold
;
	.dbg	line, "main.c", 2003
	beq     L19A7
	cmp     #$02
	bne     L19D1
;
; hard_drop_hold_remaining = HARD_DROP_HOLD_TIME;
;
	.dbg	line, "main.c", 2005
L19A7:	sta     _hard_drop_hold_remaining
;
; if (hard_drop_performed == 0)
;
	.dbg	line, "main.c", 2009
L19D1:	lda     L1005
	bne     L19DB
;
; if (pad_all_new & PAD_DOWN || delay_lock_remaining != -1)
;
	.dbg	line, "main.c", 2014
	lda     _pad_all_new
	and     #$04
	bne     L19D2
	lda     _delay_lock_remaining
	cmp     #$FF
	beq     L19D5
;
; if (pad_all_new & PAD_DOWN)
;
	.dbg	line, "main.c", 2016
L19D2:	lda     _pad_all_new
	and     #$04
	beq     L19D4
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 2019
	lda     #$01
	sta     _delay_lock_skip
;
; require_new_down_button = 0;
;
	.dbg	line, "main.c", 2021
	lda     #$00
L19D4:	sta     _require_new_down_button
;
; else if ((pad_all & PAD_DOWN) && require_new_down_button == 0)
;
	.dbg	line, "main.c", 2026
	jmp     L19A8
L19D5:	lda     _pad_all
	and     #$04
	beq     L19DA
	lda     _require_new_down_button
	bne     L19DA
;
; fall_frame_counter = MIN(fall_frame_counter, 1);
;
	.dbg	line, "main.c", 2029
	lda     _fall_frame_counter
	bne     L19D9
	jmp     L19A8
L19D9:	lda     #$01
L19A8:	sta     _fall_frame_counter
;
; if (fall_frame_counter == 0)
;
	.dbg	line, "main.c", 2032
L19DA:	lda     _fall_frame_counter
	bne     L19DB
;
; start_delay_remaining = 0;
;
	.dbg	line, "main.c", 2037
	sta     _start_delay_remaining
;
; cur_block.y += 1;
;
	.dbg	line, "main.c", 2039
	inc     _cur_block+1
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2040
	lda     _is_last_rotate
	sta     L1006
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2041
	lda     #$00
	sta     _is_last_rotate
;
; fall_frame_counter = fall_rate;
;
	.dbg	line, "main.c", 2042
	lda     _fall_rate
	sta     _fall_frame_counter
;
; if (fall_rate > DELAY_LOCK_LEN)
;
	.dbg	line, "main.c", 2048
L19DB:	lda     _fall_rate
	cmp     #$10
	lda     #$00
	bcc     L19DD
;
; delay_lock_skip = 1;
;
	.dbg	line, "main.c", 2050
	lda     #$01
	sta     _delay_lock_skip
;
; hit = 0;
;
	.dbg	line, "main.c", 2055
	lda     #$00
L19DD:	sta     _hit
;
; if (is_cluster_colliding())
;
	.dbg	line, "main.c", 2058
	jsr     _is_cluster_colliding
	tax
	beq     L10C2
;
; if (delay_lock_remaining == -1)
;
	.dbg	line, "main.c", 2060
	lda     _delay_lock_remaining
	cmp     #$FF
	bne     L10C4
;
; delay_lock_remaining = DELAY_LOCK_LEN - fall_rate;
;
	.dbg	line, "main.c", 2062
	lda     #$0F
	sec
	sbc     _fall_rate
	cmp     #$80
	sta     _delay_lock_remaining
;
; --delay_lock_remaining;
;
	.dbg	line, "main.c", 2068
L10C4:	dec     _delay_lock_remaining
;
; cur_block.y -= 1;
;
	.dbg	line, "main.c", 2074
	dec     _cur_block+1
;
; if (delay_lock_remaining == 0 || delay_lock_skip)
;
	.dbg	line, "main.c", 2075
	lda     _delay_lock_remaining
	beq     L10CF
	lda     _delay_lock_skip
	beq     L10D8
;
; hit = 1;
;
	.dbg	line, "main.c", 2077
L10CF:	lda     #$01
	sta     _hit
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 2078
	lda     L1006
	sta     _is_last_rotate
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 2084
L10C2:	lda     #$FF
	sta     _delay_lock_remaining
;
; if (hit)
;
	.dbg	line, "main.c", 2087
L10D8:	lda     _hit
	beq     L10DB
;
; is_tspin = check_tspin();
;
	.dbg	line, "main.c", 2089
	jsr     _check_tspin
	sta     _is_tspin
;
; put_cur_cluster();
;
	.dbg	line, "main.c", 2090
	jsr     _put_cur_cluster
;
; delay_spawn_remaining = DELAY_SPAWN_LEN;
;
	.dbg	line, "main.c", 2093
	lda     #$05
	sta     _delay_spawn_remaining
;
; }
;
	.dbg	line, "main.c", 2096
L10DB:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ set_block (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_block: near

	.dbg	func, "set_block", "00", extern, "_set_block"

.segment	"CODE"

;
; if (in_y <= BOARD_OOB_END)
;
	.dbg	line, "main.c", 2142
	lda     _in_y
	cmp     #$04
;
; return;
;
	.dbg	line, "main.c", 2145
	bcc     L1118
;
; address = get_ppu_addr(cur_nt, (in_x << 3) + BOARD_START_X_PX, (in_y << 3) + BOARD_START_Y_PX);
;
	.dbg	line, "main.c", 2148
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     _in_x
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
	lda     _in_y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(in_id, address);
;
	.dbg	line, "main.c", 2149
	lda     _in_id
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; game_board[TILE_TO_BOARD_INDEX(in_x, in_y)] = in_id;
;
	.dbg	line, "main.c", 2152
	ldy     _in_y
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _in_x
	bcc     L19E4
	inx
	clc
L19E4:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	lda     _in_id
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2153
L1118:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ set_block_nt (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_block_nt: near

	.dbg	func, "set_block_nt", "00", extern, "_set_block_nt"
	.dbg	sym, "x", "00", auto, 3
	.dbg	sym, "y", "00", auto, 2
	.dbg	sym, "id", "00", auto, 1
	.dbg	sym, "nt", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2156
	jsr     pusha
;
; if (y <= BOARD_OOB_END)
;
	.dbg	line, "main.c", 2157
	ldy     #$02
	lda     (sp),y
	cmp     #$04
;
; return;
;
	.dbg	line, "main.c", 2160
	bcc     L1130
;
; address = get_ppu_addr(nt, (x << 3) + BOARD_START_X_PX, (y << 3) + BOARD_START_Y_PX);
;
	.dbg	line, "main.c", 2163
	jsr     decsp2
	lda     (sp),y
	dey
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$00
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(id, address);
;
	.dbg	line, "main.c", 2164
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; game_board[TILE_TO_BOARD_INDEX(x, y)] = id;
;
	.dbg	line, "main.c", 2166
	ldy     #$02
	lda     (sp),y
	tay
	lda     _board_lookup_y,y
	sta     ptr1
	ldx     #$00
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L19E6
	inx
	clc
L19E6:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
;
; }
;
	.dbg	line, "main.c", 2167
L1130:	jmp     incsp4
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ put_cur_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_cur_cluster: near

	.dbg	func, "put_cur_cluster", "00", extern, "_put_cur_cluster"

.segment	"BSS"

L1149:
	.res	1,$00
L114A:
	.res	1,$00

.segment	"CODE"

;
; max_y = 0;
;
	.dbg	line, "main.c", 2185
	lda     #$00
	sta     _max_y
;
; min_y = 0xff; // max
;
	.dbg	line, "main.c", 2186
	lda     #$FF
	sta     _min_y
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2188
	lda     #$00
	sta     L1149
L19E9:	lda     L1149
	cmp     #$04
	bcs     L1150
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 2191
	ldy     L1149
	lda     _cur_cluster,y
	sta     L114A
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2194
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2195
	lda     L114A
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; in_x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2199
	lda     _cur_block
	clc
	adc     _local_ix
	sta     _in_x
;
; in_y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2200
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     _in_y
;
; in_id = cur_cluster.sprite;
;
	.dbg	line, "main.c", 2201
	lda     _cur_cluster+20
	sta     _in_id
;
; if (in_y < min_y)
;
	.dbg	line, "main.c", 2205
	lda     _in_y
	cmp     _min_y
	bcs     L19EA
;
; min_y = in_y;
;
	.dbg	line, "main.c", 2207
	sta     _min_y
;
; if (in_y > max_y)
;
	.dbg	line, "main.c", 2209
L19EA:	lda     _in_y
	sec
	sbc     _max_y
	bcc     L116B
	beq     L116B
;
; max_y = in_y;
;
	.dbg	line, "main.c", 2211
	lda     _in_y
	sta     _max_y
;
; set_block();
;
	.dbg	line, "main.c", 2214
L116B:	jsr     _set_block
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2188
	inc     L1149
	jmp     L19E9
;
; SFX_PLAY_WRAPPER(SOUND_LAND);
;
	.dbg	line, "main.c", 2219
L1150:	lda     _sfx_on
	beq     L19EB
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; cur_block.y = 255;
;
	.dbg	line, "main.c", 2232
L19EB:	lda     #$FF
	sta     _cur_block+1
;
; oam_set(0);
;
	.dbg	line, "main.c", 2236
	lda     #$00
	jsr     _oam_set
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2238
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2239
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2240
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(0, 0, 0, 0);
;
	.dbg	line, "main.c", 2241
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; if (attack_style == ATTACK_ON_LAND)
;
	.dbg	line, "main.c", 2244
	lda     _attack_style
	bne     L118E
;
; attack_queued = 1;
;
	.dbg	line, "main.c", 2246
	lda     #$01
	sta     _attack_queued
;
; clear_rows_in_data(max_y);
;
	.dbg	line, "main.c", 2255
L118E:	lda     _max_y
	jmp     _clear_rows_in_data
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_block_occupied (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_block_occupied: near

	.dbg	func, "is_block_occupied", "00", extern, "_is_block_occupied"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2261
	jsr     pusha
;
; return (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD || game_board[TILE_TO_BOARD_INDEX(x, y)]);
;
	.dbg	line, "main.c", 2262
	ldy     #$00
	lda     (sp),y
	cmp     #$18
	bcs     L19ED
	iny
	lda     (sp),y
	cmp     #$0A
	bcs     L19ED
	dey
	lda     (sp),y
	tay
	lda     _board_lookup_y,y
	sta     ptr1
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L19EC
	inx
L19EC:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L19ED
	tax
	jmp     incsp2
L19ED:	lda     #$01
	ldx     #$00
;
; }
;
	.dbg	line, "main.c", 2263
	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_cluster_colliding (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_cluster_colliding: near

	.dbg	func, "is_cluster_colliding", "00", extern, "_is_cluster_colliding"

.segment	"BSS"

L11A0:
	.res	1,$00
L11A1:
	.res	1,$00
L11A2:
	.res	1,$00
L11A3:
	.res	1,$00

.segment	"CODE"

;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2272
	lda     #$00
	sta     L11A2
	tax
L19F2:	lda     L11A2
	cmp     #$04
	bcs     L19F5
;
; j = cur_cluster.layout[i];
;
	.dbg	line, "main.c", 2275
	ldy     L11A2
	lda     _cur_cluster,y
	sta     L11A3
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2278
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2279
	lda     L11A3
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2281
	lda     _cur_block
	clc
	adc     _local_ix
	sta     L11A0
;
; y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2282
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     L11A1
;
; if (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD || game_board[TILE_TO_BOARD_INDEX(x, y)])
;
	.dbg	line, "main.c", 2284
	cmp     #$18
	bcs     L19F3
	lda     L11A0
	cmp     #$0A
	bcs     L19F3
	ldy     L11A1
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     L11A0
	bcc     L19F1
	inx
L19F1:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L19F3
	tax
	jmp     L19F4
;
; return 1;
;
	.dbg	line, "main.c", 2287
L19F3:	ldx     #$00
	lda     #$01
	rts
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2272
L19F4:	inc     L11A2
	jmp     L19F2
;
; return 0;
;
	.dbg	line, "main.c", 2291
L19F5:	txa
;
; }
;
	.dbg	line, "main.c", 2292
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ morton_compact_one_by_one (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_morton_compact_one_by_one: near

	.dbg	func, "morton_compact_one_by_one", "00", extern, "_morton_compact_one_by_one"
	.dbg	sym, "x", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2504
	jsr     pusha
;
; x &= 0x55;
;
	.dbg	line, "main.c", 2505
	ldy     #$00
	lda     (sp),y
	and     #$55
	sta     (sp),y
;
; x = ((x ^ (x >> 1)) & 0x33);
;
	.dbg	line, "main.c", 2506
	lsr     a
	eor     (sp),y
	and     #$33
	sta     (sp),y
;
; x = ((x ^ (x >> 2)) & 0x0f);
;
	.dbg	line, "main.c", 2507
	lsr     a
	lsr     a
	eor     (sp),y
	and     #$0F
	sta     (sp),y
;
; return x;
;
	.dbg	line, "main.c", 2508
	ldx     #$00
	lda     (sp),y
;
; }
;
	.dbg	line, "main.c", 2509
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_new_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_new_cluster: near

	.dbg	func, "spawn_new_cluster", "00", extern, "_spawn_new_cluster"

.segment	"BSS"

L11C7:
	.res	1,$00
L11C8:
	.res	1,$00

.segment	"CODE"

;
; id = 0;
;
	.dbg	line, "main.c", 2303
	lda     #$00
	sta     _id
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 2305
	lda     #$FF
	sta     _delay_lock_remaining
;
; require_new_down_button = 1;
;
	.dbg	line, "main.c", 2307
	lda     #$01
	sta     _require_new_down_button
;
; fall_frame_counter = fall_rate;
;
	.dbg	line, "main.c", 2308
	lda     _fall_rate
	sta     _fall_frame_counter
;
; can_hold_cluster = 1;
;
	.dbg	line, "main.c", 2311
	lda     #$01
	sta     _can_hold_cluster
;
; cur_rot = 0;
;
	.dbg	line, "main.c", 2314
	lda     #$00
	sta     _cur_rot
;
; is_last_rotate = 0;
;
	.dbg	line, "main.c", 2315
	sta     _is_last_rotate
;
; memcpy(cur_cluster.def, next_cluster.def, 4 * 4);
;
	.dbg	line, "main.c", 2318
	ldy     #$0F
L11DB:	lda     _next_cluster+4,y
	sta     _cur_cluster+4,y
	dey
	bpl     L11DB
;
; memcpy(cur_cluster.layout, cur_cluster.def[0], 4);
;
	.dbg	line, "main.c", 2319
	ldy     #$03
L11E1:	lda     _cur_cluster+4,y
	sta     _cur_cluster,y
	dey
	bpl     L11E1
;
; cur_cluster.sprite = next_cluster.sprite;
;
	.dbg	line, "main.c", 2320
	lda     _next_cluster+20
	sta     _cur_cluster+20
;
; cur_cluster.id = next_cluster.id;
;
	.dbg	line, "main.c", 2321
	lda     _next_cluster+21
	sta     _cur_cluster+21
;
; cur_block.x = 3; //(BOARD_END_Y_PX_BOARD >> 1);
;
	.dbg	line, "main.c", 2324
	lda     #$03
	sta     _cur_block
;
; cur_block.y = cluster_offsets[cur_cluster.id];
;
	.dbg	line, "main.c", 2325
	ldy     _cur_cluster+21
	lda     _cluster_offsets,y
	sta     _cur_block+1
;
; if (bag_index == 0)
;
	.dbg	line, "main.c", 2339
	lda     _bag_index
	bne     L11EC
;
; randomize_bag(bag, NUM_CLUSTERS);
;
	.dbg	line, "main.c", 2341
	lda     #<(_bag)
	ldx     #>(_bag)
	jsr     pushax
	lda     #$07
	jsr     _randomize_bag
;
; id = bag[bag_index];
;
	.dbg	line, "main.c", 2343
L11EC:	ldy     _bag_index
	lda     _bag,y
	sta     _id
;
; if (id == cur_cluster.id) //Avoid duplicates reshuffle bag
;
	.dbg	line, "main.c", 2344
	ldx     #$00
	lda     _cur_cluster+21
	cmp     _id
	bne     L19FA
;
; randomize_bag(bag, NUM_CLUSTERS);
;
	.dbg	line, "main.c", 2346
	lda     #<(_bag)
	ldx     #>(_bag)
	jsr     pushax
	lda     #$07
	jsr     _randomize_bag
;
; id = bag[bag_index];
;
	.dbg	line, "main.c", 2347
	ldy     _bag_index
	lda     _bag,y
	sta     _id
;
; bag_index = (bag_index + 1 == NUM_CLUSTERS ? 0 : bag_index + 1);
;
	.dbg	line, "main.c", 2349
	ldx     #$00
L19FA:	lda     _bag_index
	clc
	adc     #$01
	bcc     L1201
	inx
L1201:	cpx     #$00
	bne     L1203
	cmp     #$07
	bne     L1203
	txa
	jmp     L19FB
L1203:	lda     _bag_index
	clc
	adc     #$01
L19FB:	sta     _bag_index
;
; next_cluster.id = id;
;
	.dbg	line, "main.c", 2351
	lda     _id
	sta     _next_cluster+21
;
; memcpy(next_cluster.def, cluster_defs_classic[id], (4 * 4));
;
	.dbg	line, "main.c", 2352
	lda     #<(_next_cluster+4)
	ldx     #>(_next_cluster+4)
	jsr     pushax
	ldx     #$00
	lda     _id
	asl     a
	bcc     L19F9
	inx
	clc
L19F9:	adc     #<(_cluster_defs_classic)
	sta     ptr1
	txa
	adc     #>(_cluster_defs_classic)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
;
; memcpy(next_cluster.layout, next_cluster.def[0], 4);
;
	.dbg	line, "main.c", 2353
	ldy     #$03
L1215:	lda     _next_cluster+4,y
	sta     _next_cluster,y
	dey
	bpl     L1215
;
; next_cluster.sprite = cluster_sprites[id];
;
	.dbg	line, "main.c", 2354
	ldy     _id
	lda     _cluster_sprites,y
	sta     _next_cluster+20
;
; local_iy = 0;
;
	.dbg	line, "main.c", 2358
	lda     #$00
	sta     _local_iy
;
; local_ix = 0;
;
	.dbg	line, "main.c", 2359
	sta     _local_ix
;
; local_t = next_cluster.sprite;
;
	.dbg	line, "main.c", 2360
	sta     _local_t+1
	lda     _next_cluster+20
	sta     _local_t
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 16));
;
	.dbg	line, "main.c", 2363
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$10
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 24));
;
	.dbg	line, "main.c", 2364
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2366
	lda     #$00
	sta     L11C7
L19FC:	lda     L11C7
	cmp     #$04
	bcs     L19FE
;
; j = next_cluster.layout[i];
;
	.dbg	line, "main.c", 2369
	ldy     L11C7
	lda     _next_cluster,y
	sta     L11C8
;
; local_ix = morton_compact_one_by_one(j >> 0); //index_to_x_lookup[j];
;
	.dbg	line, "main.c", 2372
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); //index_to_y_lookup[j];
;
	.dbg	line, "main.c", 2373
	lda     L11C8
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; one_vram_buffer(local_t, get_ppu_addr(cur_nt, 120 + (local_ix << 3), (next_cluster.id != 3 ? 16 : 8) + (local_iy << 3))); //8 + (local_iy << 3)
;
	.dbg	line, "main.c", 2375
	lda     _local_t
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$78
	dey
	sta     (sp),y
	lda     _next_cluster+21
	cmp     #$03
	beq     L19FD
	lda     #$10
	jmp     L124B
L19FD:	lda     #$08
L124B:	sta     ptr1
	lda     _local_iy
	asl     a
	asl     a
	asl     a
	clc
	adc     ptr1
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; for (i = 0; i < 4; ++i)
;
	.dbg	line, "main.c", 2366
	inc     L11C7
	jmp     L19FC
;
; if (state != STATE_OVER && is_cluster_colliding())
;
	.dbg	line, "main.c", 2383
L19FE:	lda     _state
	cmp     #$06
	beq     L19FF
	jsr     _is_cluster_colliding
	tax
	bne     L124F
L19FF:	rts
;
; put_cur_cluster();
;
	.dbg	line, "main.c", 2387
L124F:	jsr     _put_cur_cluster
;
; go_to_state(STATE_OVER);
;
	.dbg	line, "main.c", 2388
	lda     #$06
	jmp     _go_to_state
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ rotate_cur_cluster (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate_cur_cluster: near

	.dbg	func, "rotate_cur_cluster", "00", extern, "_rotate_cur_cluster"
	.dbg	sym, "dir", "00", auto, 0

.segment	"BSS"

L126E:
	.res	1,$00
L126F:
	.res	1,$00
L1270:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2417
	jsr     pusha
;
; old_rot = cur_rot;
;
	.dbg	line, "main.c", 2420
	lda     _cur_rot
	sta     L126E
;
; old_is_last_rotate = is_last_rotate;
;
	.dbg	line, "main.c", 2421
	lda     _is_last_rotate
	sta     L126F
;
; cur_rot = (cur_rot + dir) & 3; // % 4
;
	.dbg	line, "main.c", 2422
	ldy     #$00
	lda     (sp),y
	clc
	adc     _cur_rot
	and     #$03
	sta     _cur_rot
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4);
;
	.dbg	line, "main.c", 2424
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; if (is_cluster_colliding())
;
	.dbg	line, "main.c", 2426
	jsr     _is_cluster_colliding
	tax
	jeq     L1A13
;
; if (cur_cluster.id != 2) //Is not line cluster
;
	.dbg	line, "main.c", 2428
	lda     _cur_cluster+21
	cmp     #$02
	jeq     L1A0B
;
; if (((old_rot == 0) & (cur_rot == 1)) || ((old_rot == 2) & (cur_rot == 1)))
;
	.dbg	line, "main.c", 2430
	lda     L126E
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1A04
	lda     L126E
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1A05
;
; result = rotate_srs(0);
;
	.dbg	line, "main.c", 2432
L1A04:	lda     #$00
;
; else if (((old_rot == 1) & (cur_rot == 0)) || ((old_rot == 1) & (cur_rot == 2)))
;
	.dbg	line, "main.c", 2434
	jmp     L1A15
L1A05:	lda     L126E
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1A06
	lda     L126E
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1A07
;
; result = rotate_srs(1);
;
	.dbg	line, "main.c", 2436
L1A06:	lda     #$01
;
; else if (((old_rot == 2) & (cur_rot == 3)) || ((old_rot == 0) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2438
	jmp     L1A15
L1A07:	lda     L126E
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1A08
	lda     L126E
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1A09
;
; result = rotate_srs(2);
;
	.dbg	line, "main.c", 2440
L1A08:	lda     #$02
;
; else if (((old_rot == 3) & (cur_rot == 2)) || ((old_rot == 3) & (cur_rot == 0)))
;
	.dbg	line, "main.c", 2442
	jmp     L1A15
L1A09:	lda     L126E
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1A0A
	lda     L126E
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	jeq     L12E8
;
; result = rotate_srs(3);
;
	.dbg	line, "main.c", 2444
L1A0A:	lda     #$03
	jsr     _rotate_srs
;
; else
;
	.dbg	line, "main.c", 2447
	jmp     L1A02
;
; if (((old_rot == 0) & (cur_rot == 1)) ||  ((old_rot == 3) & (cur_rot == 2)))
;
	.dbg	line, "main.c", 2449
L1A0B:	lda     L126E
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1A0C
	lda     L126E
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1A0D
;
; result = rotate_srs(4);
;
	.dbg	line, "main.c", 2451
L1A0C:	lda     #$04
	jsr     _rotate_srs
;
; else if (((old_rot == 1) & (cur_rot == 0)) || ((old_rot == 2) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2453
	jmp     L1A02
L1A0D:	lda     L126E
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1A0E
	lda     L126E
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1A0F
;
; result = rotate_srs(5);
;
	.dbg	line, "main.c", 2455
L1A0E:	lda     #$05
	jsr     _rotate_srs
;
; else if (((old_rot == 1) & (cur_rot == 2)) || ((old_rot == 0) & (cur_rot == 3)))
;
	.dbg	line, "main.c", 2457
	jmp     L1A02
L1A0F:	lda     L126E
	cmp     #$01
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$02
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1A10
	lda     L126E
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$03
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L1A11
;
; result = rotate_srs(6);
;
	.dbg	line, "main.c", 2459
L1A10:	lda     #$06
	jsr     _rotate_srs
;
; else if (((old_rot == 2) & (cur_rot == 1)) || ((old_rot == 3) & (cur_rot == 0)))
;
	.dbg	line, "main.c", 2461
	jmp     L1A02
L1A11:	lda     L126E
	cmp     #$02
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	bne     L1A12
	lda     L126E
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _cur_rot
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L12E8
;
; result = rotate_srs(7);
;
	.dbg	line, "main.c", 2463
L1A12:	lda     #$07
L1A15:	jsr     _rotate_srs
;
; else
;
	.dbg	line, "main.c", 2467
	jmp     L1A02
;
; result = 1;
;
	.dbg	line, "main.c", 2469
L1A13:	lda     #$01
L1A02:	sta     L1270
;
; if (result == 0)
;
	.dbg	line, "main.c", 2472
L12E8:	lda     L1270
	bne     L1A14
;
; cur_rot = old_rot;
;
	.dbg	line, "main.c", 2474
	lda     L126E
	sta     _cur_rot
;
; is_last_rotate = old_is_last_rotate;
;
	.dbg	line, "main.c", 2475
	lda     L126F
	sta     _is_last_rotate
;
; memcpy(cur_cluster.layout, cur_cluster.def[cur_rot], 4);
;
	.dbg	line, "main.c", 2476
	lda     #<(_cur_cluster)
	ldx     #>(_cur_cluster)
	jsr     pushax
	ldx     #$00
	lda     _cur_rot
	jsr     aslax2
	clc
	adc     #<(_cur_cluster+4)
	tay
	txa
	adc     #>(_cur_cluster+4)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
;
; SFX_PLAY_WRAPPER(SOUND_BLOCKED);
;
	.dbg	line, "main.c", 2477
	lda     _sfx_on
	beq     L12FF
	lda     #$06
	jsr     pusha
	lda     #$00
;
; else
;
	.dbg	line, "main.c", 2479
	jmp     L1A03
;
; is_last_rotate = 1;
;
	.dbg	line, "main.c", 2481
L1A14:	lda     #$01
	sta     _is_last_rotate
;
; SFX_PLAY_WRAPPER(SOUND_ROTATE);
;
	.dbg	line, "main.c", 2482
	lda     _sfx_on
	beq     L12FF
	lda     #$00
	jsr     pusha
L1A03:	jsr     _sfx_play
;
; }
;
	.dbg	line, "main.c", 2484
L12FF:	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ rotate_srs (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate_srs: near

	.dbg	func, "rotate_srs", "00", extern, "_rotate_srs"
	.dbg	sym, "case_id", "00", auto, 0

.segment	"BSS"

L1306:
	.res	1,$00
L1307:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2487
	jsr     pusha
;
; for (test = 0; test < 5; ++test)
;
	.dbg	line, "main.c", 2490
	lda     #$00
	sta     L1306
	tax
L1A17:	lda     L1306
	cmp     #$05
	bcs     L1A18
;
; morton = srs_rotate_lookup[case_id][test];
;
	.dbg	line, "main.c", 2492
	lda     (sp,x)
	jsr     mulax5
	clc
	adc     #<(_srs_rotate_lookup)
	tay
	txa
	adc     #>(_srs_rotate_lookup)
	tax
	tya
	clc
	adc     L1306
	bcc     L1A16
	inx
L1A16:	ldy     #$00
	jsr     ldaidx
	sta     L1307
;
; cur_block.x += (morton_compact_one_by_one(morton >> 0) - 3);
;
	.dbg	line, "main.c", 2493
	jsr     _morton_compact_one_by_one
	sec
	sbc     #$03
	clc
	adc     _cur_block
	sta     _cur_block
;
; cur_block.y += (morton_compact_one_by_one(morton >> 1) - 3);
;
	.dbg	line, "main.c", 2494
	lda     L1307
	cmp     #$80
	ror     a
	jsr     _morton_compact_one_by_one
	sec
	sbc     #$03
	clc
	adc     _cur_block+1
	sta     _cur_block+1
;
; if (!is_cluster_colliding())
;
	.dbg	line, "main.c", 2495
	jsr     _is_cluster_colliding
	tax
	bne     L130A
;
; return 1;
;
	.dbg	line, "main.c", 2497
	lda     #$01
	jmp     incsp1
;
; for (test = 0; test < 5; ++test)
;
	.dbg	line, "main.c", 2490
L130A:	ldx     #$00
	inc     L1306
	jmp     L1A17
;
; return 0;
;
	.dbg	line, "main.c", 2500
L1A18:	txa
;
; }
;
	.dbg	line, "main.c", 2501
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ check_tspin (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_tspin: near

	.dbg	func, "check_tspin", "00", extern, "_check_tspin"

.segment	"BSS"

L10E3:
	.res	1,$00
L10E4:
	.res	1,$00
L10E5:
	.res	1,$00
L10E6:
	.res	1,$00

.segment	"CODE"

;
; result = 0;
;
	.dbg	line, "main.c", 2104
	lda     #$00
	sta     L10E6
;
; if (cur_cluster.id == 4 & is_last_rotate == 1) //Is T cluster
;
	.dbg	line, "main.c", 2105
	lda     _cur_cluster+21
	cmp     #$04
	jsr     booleq
	jsr     pusha0
	lda     _is_last_rotate
	cmp     #$01
	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	jeq     L1A1D
;
; j = cur_cluster.layout[2];
;
	.dbg	line, "main.c", 2108
	lda     _cur_cluster+2
	sta     L10E5
;
; local_ix = morton_compact_one_by_one(j >> 0); 
;
	.dbg	line, "main.c", 2111
	jsr     _morton_compact_one_by_one
	sta     _local_ix
;
; local_iy = morton_compact_one_by_one(j >> 1); 
;
	.dbg	line, "main.c", 2112
	lda     L10E5
	lsr     a
	jsr     _morton_compact_one_by_one
	sta     _local_iy
;
; x = cur_block.x + local_ix;
;
	.dbg	line, "main.c", 2114
	lda     _cur_block
	clc
	adc     _local_ix
	sta     L10E3
;
; y = cur_block.y + local_iy;
;
	.dbg	line, "main.c", 2115
	lda     _cur_block+1
	clc
	adc     _local_iy
	sta     L10E4
;
; result += is_block_occupied(x + 1, y - 1);
;
	.dbg	line, "main.c", 2117
	lda     L10E3
	clc
	adc     #$01
	jsr     pusha
	lda     L10E4
	sec
	sbc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10E6
	sta     L10E6
;
; result += is_block_occupied(x - 1, y + 1);
;
	.dbg	line, "main.c", 2118
	lda     L10E3
	sec
	sbc     #$01
	jsr     pusha
	lda     L10E4
	clc
	adc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10E6
	sta     L10E6
;
; result += is_block_occupied(x + 1, y + 1);
;
	.dbg	line, "main.c", 2119
	lda     L10E3
	clc
	adc     #$01
	jsr     pusha
	lda     L10E4
	clc
	adc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10E6
	sta     L10E6
;
; result += is_block_occupied(x - 1, y - 1);
;
	.dbg	line, "main.c", 2120
	lda     L10E3
	sec
	sbc     #$01
	jsr     pusha
	lda     L10E4
	sec
	sbc     #$01
	jsr     _is_block_occupied
	clc
	adc     L10E6
	sta     L10E6
;
; if (result >= 3)
;
	.dbg	line, "main.c", 2122
	cmp     #$03
	lda     #$00
	bcc     L1A1B
;
; result = 1;
;
	.dbg	line, "main.c", 2124
	lda     #$01
;
; result = 0;
;
	.dbg	line, "main.c", 2128
L1A1B:	sta     L10E6
;
; return result;
;
	.dbg	line, "main.c", 2132
	ldx     #$00
L1A1D:	lda     L10E6
;
; }
;
	.dbg	line, "main.c", 2133
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ go_to_state (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_go_to_state: near

	.dbg	func, "go_to_state", "00", extern, "_go_to_state"
	.dbg	sym, "new_state", "00", auto, 0

.segment	"BSS"

L1333:
	.res	1,$00
L1334:
	.res	1,$00
L1335:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 2512
	jsr     pusha
;
; fade_delay = 5;
;
	.dbg	line, "main.c", 2522
	lda     #$05
	sta     L1334
;
; prev_state = state;
;
	.dbg	line, "main.c", 2523
	lda     _state
	sta     L1335
;
; switch (state)
;
	.dbg	line, "main.c", 2525
	lda     _state
;
; }
;
	.dbg	line, "main.c", 2621
	cmp     #$01
	beq     L133E
	cmp     #$03
	beq     L1347
	cmp     #$04
	beq     L1365
	cmp     #$05
	beq     L1361
	cmp     #$07
	jne     L133C
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 2530
L133E:	lda     _music_on
	jeq     L133C
	lda     #$00
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 2531
	jmp     L133C
;
; pal_bg(palette_bg);
;
	.dbg	line, "main.c", 2540
L1347:	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; saved_starting_level = cur_level;
;
	.dbg	line, "main.c", 2541
	lda     _cur_level
	sta     _saved_starting_level
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 2542
	lda     _cur_level
	cmp     #$1E
	bcs     L1A1E
	jmp     L1356
L1A1E:	lda     #$1E
L1356:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 2543
	lda     #$FF
	sta     _row_to_clear
;
; start_delay_remaining = START_DELAY;
;
	.dbg	line, "main.c", 2544
	lda     #$78
	sta     _start_delay_remaining
;
; display_level();
;
	.dbg	line, "main.c", 2545
	jsr     _display_level
;
; display_score();
;
	.dbg	line, "main.c", 2546
	jsr     _display_score
;
; break;
;
	.dbg	line, "main.c", 2547
	jmp     L133C
;
; pal_bright(4);
;
	.dbg	line, "main.c", 2553
L1361:	lda     #$04
	jsr     _pal_bright
;
; break;
;
	.dbg	line, "main.c", 2554
	jmp     L133C
;
; if (cur_score > high_scores[attack_style])
;
	.dbg	line, "main.c", 2604
L1365:	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	jsr     pusheax
	ldx     #$00
	lda     _attack_style
	jsr     aslax2
	clc
	adc     #<(_high_scores)
	tay
	txa
	adc     #>(_high_scores)
	tax
	tya
	jsr     ldeaxi
	jsr     tosugteax
	beq     L133C
;
; high_scores[attack_style] = cur_score;
;
	.dbg	line, "main.c", 2606
	ldx     #$00
	lda     _attack_style
	jsr     aslax2
	clc
	adc     #<(_high_scores)
	tay
	txa
	adc     #>(_high_scores)
	tax
	tya
	jsr     pushax
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	ldy     #$00
	jsr     steaxspidx
;
; state = new_state;
;
	.dbg	line, "main.c", 2623
L133C:	ldy     #$00
	lda     (sp),y
	sta     _state
;
; ticks_in_state_large = 0;
;
	.dbg	line, "main.c", 2625
	tya
	sta     _ticks_in_state_large
	sta     _ticks_in_state_large+1
;
; switch (state)
;
	.dbg	line, "main.c", 2627
	lda     _state
;
; }
;
	.dbg	line, "main.c", 3031
	beq     L1375
	cmp     #$01
	beq     L1384
	cmp     #$02
	beq     L1393
	cmp     #$03
	jeq     L13D2
	cmp     #$04
	jeq     L1A22
	cmp     #$05
	jeq     L143E
	cmp     #$06
	jeq     L1447
	cmp     #$07
	jeq     L13EC
	jmp     incsp1
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2631
L1375:	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; ppu_off();
;
	.dbg	line, "main.c", 2632
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2633
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(boot_screen);
;
	.dbg	line, "main.c", 2634
	lda     #<(_boot_screen)
	ldx     #>(_boot_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2635
	jsr     _ppu_on_all
;
; break;
;
	.dbg	line, "main.c", 2637
	jmp     incsp1
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2641
L1384:	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; ppu_off();
;
	.dbg	line, "main.c", 2642
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2643
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(ty_screen);
;
	.dbg	line, "main.c", 2644
	lda     #<(_ty_screen)
	ldx     #>(_ty_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2645
	jsr     _ppu_on_all
;
; break;
;
	.dbg	line, "main.c", 2647
	jmp     incsp1
;
; pal_bg(palette_bg);
;
	.dbg	line, "main.c", 2651
L1393:	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	.dbg	line, "main.c", 2652
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 2653
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 2654
	lda     #$00
	sta     _time_of_day
;
; cur_konami_index = 0;
;
	.dbg	line, "main.c", 2655
	sta     _cur_konami_index
;
; if (prev_state == STATE_OPTIONS || prev_state == STATE_BOOT || prev_state == STATE_TY || prev_state == STATE_SOUND_TEST || prev_state == STATE_HIGH_SCORE_TABLE)
;
	.dbg	line, "main.c", 2660
	lda     L1335
	cmp     #$03
	beq     L1A20
	lda     L1335
	beq     L1A20
	cmp     #$01
	beq     L1A20
	cmp     #$07
	beq     L1A20
	cmp     #$08
	bne     L1A21
;
; oam_clear();
;
	.dbg	line, "main.c", 2662
L1A20:	jsr     _oam_clear
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 2663
	jsr     _draw_menu_sprites
;
; ppu_off();
;
	.dbg	line, "main.c", 2665
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2666
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 2667
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2668
	jsr     _ppu_on_all
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 2672
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; else
;
	.dbg	line, "main.c", 2675
	jmp     incsp1
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2677
L1A21:	lda     L1335
	cmp     #$06
	bne     L13B7
;
; fade_to_black();
;
	.dbg	line, "main.c", 2679
	jsr     _fade_to_black
;
; reset_gameplay_area();
;
	.dbg	line, "main.c", 2682
L13B7:	jsr     _reset_gameplay_area
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 2684
	jsr     _draw_menu_sprites
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 2686
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, 0x1df); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 2687
	jsr     push0
	ldx     #$01
	lda     #$DF
	jsr     _scroll
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 2688
	lda     _music_on
	beq     L13C1
	lda     #$00
	jsr     _music_play
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 2693
L13C1:	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2696
	lda     L1335
	cmp     #$06
	beq     L1A25
;
; }
;
	.dbg	line, "main.c", 3032
	jmp     incsp1
;
; fade_from_black();
;
	.dbg	line, "main.c", 2698
L1A25:	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 2702
	jmp     incsp1
;
; oam_clear();
;
	.dbg	line, "main.c", 2707
L13D2:	jsr     _oam_clear
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2712
	jsr     _clear_vram_buffer
;
; ppu_off();
;
	.dbg	line, "main.c", 2714
	jsr     _ppu_off
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2735
	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2739
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(options_screen);
;
	.dbg	line, "main.c", 2745
	lda     #<(_options_screen)
	ldx     #>(_options_screen)
	jsr     _vram_unrle
;
; cur_level %= 10;
;
	.dbg	line, "main.c", 2754
	lda     _cur_level
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	sta     _cur_level
;
; cur_option = 0;
;
	.dbg	line, "main.c", 2755
	lda     #$00
	sta     _cur_option
;
; ppu_on_all();
;
	.dbg	line, "main.c", 2757
	jsr     _ppu_on_all
;
; display_options();
;
	.dbg	line, "main.c", 2759
	jsr     _display_options
;
; delay(1);
;
	.dbg	line, "main.c", 2761
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2762
	jsr     _clear_vram_buffer
;
; display_highscore();
;
	.dbg	line, "main.c", 2763
	jsr     _display_highscore
;
; break;
;
	.dbg	line, "main.c", 2766
	jmp     incsp1
;
; oam_clear();
;
	.dbg	line, "main.c", 2772
L13EC:	jsr     _oam_clear
;
; ppu_off(); // screen off
;
	.dbg	line, "main.c", 2773
	jsr     _ppu_off
;
; pal_bg(palette_bg_options);
;
	.dbg	line, "main.c", 2775
	lda     #<(_palette_bg_options)
	ldx     #>(_palette_bg_options)
	jsr     _pal_bg
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 2776
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(sound_screen);
;
	.dbg	line, "main.c", 2777
	lda     #<(_sound_screen)
	ldx     #>(_sound_screen)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "main.c", 2779
	jsr     _ppu_on_all
;
; test_song = test_sound = 0;
;
	.dbg	line, "main.c", 2781
	lda     #$00
	sta     _test_sound
	sta     _test_song
;
; test_song_active = 0xff;
;
	.dbg	line, "main.c", 2782
	lda     #$FF
	sta     _test_song_active
;
; display_song();
;
	.dbg	line, "main.c", 2784
	jsr     _display_song
;
; display_sound();
;
	.dbg	line, "main.c", 2785
	jsr     _display_sound
;
; break;
;
	.dbg	line, "main.c", 2787
	jmp     incsp1
;
; if (prev_state == STATE_OVER)
;
	.dbg	line, "main.c", 2794
L1A22:	lda     L1335
	cmp     #$06
	bne     L1A23
;
; reset_gameplay_area();
;
	.dbg	line, "main.c", 2796
	jsr     _reset_gameplay_area
;
; if (prev_state != STATE_PAUSE)
;
	.dbg	line, "main.c", 2799
L1A23:	lda     L1335
	cmp     #$05
	jeq     L1A24
;
; oam_clear();
;
	.dbg	line, "main.c", 2801
	jsr     _oam_clear
;
; if (prev_state == STATE_OPTIONS)
;
	.dbg	line, "main.c", 2815
	lda     L1335
	cmp     #$03
	bne     L1410
;
; scroll_y = 0;
;
	.dbg	line, "main.c", 2818
	lda     #$00
	sta     _scroll_y
	sta     _scroll_y+1
;
; while (scroll_y < 240)
;
	.dbg	line, "main.c", 2820
	jmp     L1410
;
; scroll(0, scroll_y);
;
	.dbg	line, "main.c", 2822
L140E:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; delay(1);
;
	.dbg	line, "main.c", 2823
	lda     #$01
	jsr     _delay
;
; scroll_y += 4;
;
	.dbg	line, "main.c", 2824
	lda     #$04
	clc
	adc     _scroll_y
	sta     _scroll_y
	bcc     L1410
	inc     _scroll_y+1
;
; while (scroll_y < 240)
;
	.dbg	line, "main.c", 2820
L1410:	lda     _scroll_y+1
	cmp     #$00
	bne     L1412
	lda     _scroll_y
	cmp     #$F0
L1412:	bcc     L140E
;
; scroll_y = 239;
;
	.dbg	line, "main.c", 2827
	ldx     #$00
	lda     #$EF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, scroll_y);
;
	.dbg	line, "main.c", 2828
	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 2831
	jsr     _spawn_new_cluster
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 2833
	jsr     _spawn_new_cluster
;
; memfill(attack_row_status, 0, BOARD_WIDTH);
;
	.dbg	line, "main.c", 2835
	jsr     decsp3
	lda     #<(_attack_row_status)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_attack_row_status)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$0A
	jsr     _memfill
;
; srand(tick_count_large);
;
	.dbg	line, "main.c", 2838
	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     _srand
;
; i = rand() % BOARD_WIDTH;
;
	.dbg	line, "main.c", 2841
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	sta     L1333
;
; attack_row_status[i] = 1;
;
	.dbg	line, "main.c", 2842
	ldy     L1333
	lda     #$01
	sta     _attack_row_status,y
;
; require_new_down_button = 1;
;
	.dbg	line, "main.c", 2844
	sta     _require_new_down_button
;
; if (attack_style == ATTACK_ON_TIME)
;
	.dbg	line, "main.c", 2845
	lda     _attack_style
	cmp     #$01
	bne     L1A24
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 2847
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; cur_gameplay_music = MUSIC_GAMEPLAY;
;
	.dbg	line, "main.c", 2858
L1A24:	lda     #$01
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(MUSIC_GAMEPLAY);
;
	.dbg	line, "main.c", 2859
	lda     _music_on
	bne     L1A26
;
; }
;
	.dbg	line, "main.c", 3032
	jmp     incsp1
;
; MUSIC_PLAY_WRAPPER(MUSIC_GAMEPLAY);
;
	.dbg	line, "main.c", 2859
L1A26:	lda     #$01
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 2862
	jmp     incsp1
;
; pal_bright(2);
;
	.dbg	line, "main.c", 2867
L143E:	lda     #$02
	jsr     _pal_bright
;
; MUSIC_PLAY_WRAPPER(MUSIC_PAUSE);
;
	.dbg	line, "main.c", 2868
	lda     _music_on
	bne     L1A27
;
; }
;
	.dbg	line, "main.c", 3032
	jmp     incsp1
;
; MUSIC_PLAY_WRAPPER(MUSIC_PAUSE);
;
	.dbg	line, "main.c", 2868
L1A27:	lda     #$03
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 2869
	jmp     incsp1
;
; delay(1);
;
	.dbg	line, "main.c", 2875
L1447:	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 2876
	jsr     _clear_vram_buffer
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 2879
	jsr     _draw_gameplay_sprites
;
; music_stop();
;
	.dbg	line, "main.c", 2881
	jsr     _music_stop
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_GAMEOVER);
;
	.dbg	line, "main.c", 2882
	lda     _music_on
	beq     L144D
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (music_on)
;
	.dbg	line, "main.c", 2886
L144D:	lda     _music_on
	beq     L1453
;
; delay(120);
;
	.dbg	line, "main.c", 2888
	lda     #$78
	jsr     _delay
;
; SFX_MUSIC_PLAY_WRAPPER(SOUND_GAMEOVER_SONG);
;
	.dbg	line, "main.c", 2893
L1453:	lda     _music_on
	beq     L1457
	lda     #$0C
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_bright(5);
;
	.dbg	line, "main.c", 2899
L1457:	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2900
	lda     L1334
	jsr     _delay
;
; pal_bright(6);
;
	.dbg	line, "main.c", 2901
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2902
	lda     L1334
	jsr     _delay
;
; pal_bright(7);
;
	.dbg	line, "main.c", 2903
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2904
	lda     L1334
	jsr     _delay
;
; pal_bright(8);
;
	.dbg	line, "main.c", 2905
	lda     #$08
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2906
	lda     L1334
	jsr     _delay
;
; address = get_ppu_addr(cur_nt, 96, 14 << 3);
;
	.dbg	line, "main.c", 2908
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("GAME OVER!", 10, address);
;
	.dbg	line, "main.c", 2909
	jsr     decsp3
	lda     #<(L1473)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1473)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; address = get_ppu_addr(cur_nt, 96, 15 << 3);
;
	.dbg	line, "main.c", 2911
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$78
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("A-RESTART ", 10, address);
;
	.dbg	line, "main.c", 2912
	jsr     decsp3
	lda     #<(L147D)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L147D)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; address = get_ppu_addr(cur_nt, 96, 16 << 3);
;
	.dbg	line, "main.c", 2913
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz("B-QUIT    ", 10, address);
;
	.dbg	line, "main.c", 2914
	jsr     decsp3
	lda     #<(L1487)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1487)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; pal_bright(7);
;
	.dbg	line, "main.c", 2916
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2917
	lda     L1334
	jsr     _delay
;
; pal_bright(6);
;
	.dbg	line, "main.c", 2918
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2919
	lda     L1334
	jsr     _delay
;
; pal_bright(5);
;
	.dbg	line, "main.c", 2920
	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2921
	lda     L1334
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "main.c", 2922
	lda     #$04
	jsr     _pal_bright
;
; delay(fade_delay);
;
	.dbg	line, "main.c", 2923
	lda     L1334
	jsr     _delay
;
; break;
;
	.dbg	line, "main.c", 2924
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ inc_lines_cleared (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inc_lines_cleared: near

	.dbg	func, "inc_lines_cleared", "00", extern, "_inc_lines_cleared"

.segment	"BSS"

L149D:
	.res	1,$00

.segment	"CODE"

;
; ++lines_cleared_one;
;
	.dbg	line, "main.c", 3037
	inc     _lines_cleared_one
;
; if (lines_cleared_one == 10)
;
	.dbg	line, "main.c", 3039
	lda     _lines_cleared_one
	cmp     #$0A
	beq     L1A30
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3095
	jmp     _display_lines_cleared
;
; lines_total = (lines_cleared_hundred * 10) + lines_cleared_ten;
;
	.dbg	line, "main.c", 3042
L1A30:	ldx     #$00
	lda     _lines_cleared_hundred
	jsr     mulax10
	clc
	adc     _lines_cleared_ten
	sta     L149D
;
; if (cur_level <= lines_total)
;
	.dbg	line, "main.c", 3044
	lda     _cur_level
	sec
	sbc     L149D
	sta     tmp1
	lda     tmp1
	beq     L1A2A
	bcs     L1A2E
;
; ++cur_level;
;
	.dbg	line, "main.c", 3046
L1A2A:	inc     _cur_level
;
; if (cur_level <= 29)
;
	.dbg	line, "main.c", 3049
	lda     _cur_level
	cmp     #$1E
	bcs     L1A2C
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 3051
	cmp     #$1E
	bcs     L1A2B
	jmp     L14B3
L1A2B:	lda     #$1E
L14B3:	sta     ptr1
	lda     #$00
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; else if (cur_level < 40) // raise the floor 10 levels.
;
	.dbg	line, "main.c", 3053
	jmp     L1A2E
L1A2C:	lda     _cur_level
	cmp     #$28
	bcs     L1A2E
;
; if (cur_level == 30)
;
	.dbg	line, "main.c", 3055
	cmp     #$1E
	bne     L1A2D
;
; one_vram_buffer(SKULL_SPRITE, get_ppu_addr(cur_nt, 4 << 3, 9 << 3)); // skull
;
	.dbg	line, "main.c", 3057
	lda     #$3B
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; kill_row_queued = 1;
;
	.dbg	line, "main.c", 3059
L1A2D:	lda     #$01
	sta     _kill_row_queued
;
; ++time_of_day;
;
	.dbg	line, "main.c", 3063
L1A2E:	inc     _time_of_day
;
; if (time_of_day >= NUM_TIMES_OF_DAY)
;
	.dbg	line, "main.c", 3064
	lda     _time_of_day
	cmp     #$08
	ldx     #$00
	bcc     L1A2F
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 3066
	stx     _time_of_day
;
; pal_bg(palette_bg_list[time_of_day]);
;
	.dbg	line, "main.c", 3069
L1A2F:	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	tay
	txa
	adc     #>(_palette_bg_list)
	tax
	tya
	jsr     _pal_bg
;
; memcpy(temp_pal, palette_sp, sizeof(palette_sp));
;
	.dbg	line, "main.c", 3072
	ldy     #$0F
L14D1:	lda     _palette_sp,y
	sta     _temp_pal,y
	dey
	bpl     L14D1
;
; temp_pal[1] = palette_bg_list[time_of_day][1];
;
	.dbg	line, "main.c", 3074
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temp_pal+1
;
; temp_pal[2] = palette_bg_list[time_of_day][2];
;
	.dbg	line, "main.c", 3075
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+2
;
; temp_pal[3] = palette_bg_list[time_of_day][3];
;
	.dbg	line, "main.c", 3076
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+3
;
; temp_pal[6] = palette_bg_list[time_of_day][14];
;
	.dbg	line, "main.c", 3078
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$0E
	lda     (ptr1),y
	sta     _temp_pal+6
;
; temp_pal[7] = palette_bg_list[time_of_day][15];
;
	.dbg	line, "main.c", 3079
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _temp_pal+7
;
; temp_pal[10] = palette_bg_list[time_of_day][2];
;
	.dbg	line, "main.c", 3081
	ldx     #$00
	lda     _time_of_day
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	sta     ptr1
	txa
	adc     #>(_palette_bg_list)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     _temp_pal+10
;
; pal_spr(temp_pal);
;
	.dbg	line, "main.c", 3083
	lda     #<(_temp_pal)
	ldx     #>(_temp_pal)
	jsr     _pal_spr
;
; display_level();
;
	.dbg	line, "main.c", 3085
	jsr     _display_level
;
; lines_cleared_one = 0;
;
	.dbg	line, "main.c", 3087
	lda     #$00
	sta     _lines_cleared_one
;
; ++lines_cleared_ten;
;
	.dbg	line, "main.c", 3088
	inc     _lines_cleared_ten
;
; if (lines_cleared_ten == 10)
;
	.dbg	line, "main.c", 3089
	lda     _lines_cleared_ten
	cmp     #$0A
	bne     L14F6
;
; lines_cleared_ten = 0;
;
	.dbg	line, "main.c", 3091
	lda     #$00
	sta     _lines_cleared_ten
;
; ++lines_cleared_hundred;
;
	.dbg	line, "main.c", 3092
	inc     _lines_cleared_hundred
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3095
L14F6:	jmp     _display_lines_cleared
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_lines_cleared (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_lines_cleared: near

	.dbg	func, "display_lines_cleared", "00", extern, "_display_lines_cleared"

.segment	"CODE"

;
; one_vram_buffer('0' + lines_cleared_hundred, get_ppu_addr(cur_nt, 4 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3100
	lda     _lines_cleared_hundred
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; one_vram_buffer('0' + lines_cleared_ten, get_ppu_addr(cur_nt, 5 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3101
	lda     _lines_cleared_ten
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$28
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; one_vram_buffer('0' + lines_cleared_one, get_ppu_addr(cur_nt, 6 << 3, 3 << 3));
;
	.dbg	line, "main.c", 3102
	lda     _lines_cleared_one
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jmp     _one_vram_buffer
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_score: near

	.dbg	func, "display_score", "00", extern, "_display_score"

.segment	"BSS"

L1513:
	.res	4,$00
L1514:
	.res	1,$00

.segment	"CODE"

;
; temp_score = cur_score; //cur_score;
;
	.dbg	line, "main.c", 3110
	lda     _cur_score+3
	sta     sreg+1
	lda     _cur_score+2
	sta     sreg
	ldx     _cur_score+1
	lda     _cur_score
	sta     L1513
	stx     L1513+1
	ldy     sreg
	sty     L1513+2
	ldy     sreg+1
	sty     L1513+3
;
; multi_vram_buffer_horz("      ", 6, get_ppu_addr(cur_nt, 0, 6 << 3));
;
	.dbg	line, "main.c", 3113
	jsr     decsp3
	lda     #<(L1518)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1518)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; i = 0;
;
	.dbg	line, "main.c", 3115
	lda     #$00
	sta     L1514
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3116
	jmp     L1523
;
; unsigned char digit = temp_score % 10;
;
	.dbg	line, "main.c", 3118
L1521:	lda     L1513+3
	sta     sreg+1
	lda     L1513+2
	sta     sreg
	ldx     L1513+1
	lda     L1513
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (6 << 3) - (i << 3), 6 << 3));
;
	.dbg	line, "main.c", 3119
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L1514
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_score = temp_score / 10;
;
	.dbg	line, "main.c", 3121
	lda     L1513+3
	sta     sreg+1
	lda     L1513+2
	sta     sreg
	ldx     L1513+1
	lda     L1513
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L1513
	stx     L1513+1
	ldy     sreg
	sty     L1513+2
	ldy     sreg+1
	sty     L1513+3
;
; ++i;
;
	.dbg	line, "main.c", 3122
	inc     L1514
;
; }
;
	.dbg	line, "main.c", 3123
	jsr     incsp1
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3116
L1523:	lda     L1513+3
	sta     sreg+1
	lda     L1513+2
	sta     sreg
	ldx     L1513+1
	lda     L1513
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L1521
;
; }
;
	.dbg	line, "main.c", 3124
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_highscore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_highscore: near

	.dbg	func, "display_highscore", "00", extern, "_display_highscore"

.segment	"BSS"

L1533:
	.res	4,$00
L1534:
	.res	1,$00

.segment	"CODE"

;
; temp_score = high_scores[attack_style];
;
	.dbg	line, "main.c", 3132
	ldx     #$00
	lda     _attack_style
	jsr     aslax2
	clc
	adc     #<(_high_scores)
	tay
	txa
	adc     #>(_high_scores)
	tax
	tya
	jsr     ldeaxi
	sta     L1533
	stx     L1533+1
	ldy     sreg
	sty     L1533+2
	ldy     sreg+1
	sty     L1533+3
;
; multi_vram_buffer_horz("0000000", 7, get_ppu_addr(0, 17 << 3, 27 << 3));
;
	.dbg	line, "main.c", 3135
	jsr     decsp3
	lda     #<(L1539)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1539)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     #$D8
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; i = 0;
;
	.dbg	line, "main.c", 3137
	lda     #$00
	sta     L1534
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3138
	jmp     L1544
;
; unsigned char digit = temp_score % 10;
;
	.dbg	line, "main.c", 3140
L1542:	lda     L1533+3
	sta     sreg+1
	lda     L1533+2
	sta     sreg
	ldx     L1533+1
	lda     L1533
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(0, (23 << 3) - (i << 3), 27 << 3));
;
	.dbg	line, "main.c", 3141
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$B8
	jsr     pusha0
	lda     L1534
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$D8
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_score = temp_score / 10;
;
	.dbg	line, "main.c", 3143
	lda     L1533+3
	sta     sreg+1
	lda     L1533+2
	sta     sreg
	ldx     L1533+1
	lda     L1533
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L1533
	stx     L1533+1
	ldy     sreg
	sty     L1533+2
	ldy     sreg+1
	sty     L1533+3
;
; ++i;
;
	.dbg	line, "main.c", 3144
	inc     L1534
;
; }
;
	.dbg	line, "main.c", 3145
	jsr     incsp1
;
; while (temp_score != 0)
;
	.dbg	line, "main.c", 3138
L1544:	lda     L1533+3
	sta     sreg+1
	lda     L1533+2
	sta     sreg
	ldx     L1533+1
	lda     L1533
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     tosneeax
	jne     L1542
;
; }
;
	.dbg	line, "main.c", 3146
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_level: near

	.dbg	func, "display_level", "00", extern, "_display_level"

.segment	"BSS"

L1554:
	.res	1,$00
L1555:
	.res	1,$00

.segment	"CODE"

;
; temp_level = cur_level;
;
	.dbg	line, "main.c", 3156
	lda     _cur_level
	sta     L1554
;
; i = 0;
;
	.dbg	line, "main.c", 3157
	lda     #$00
	sta     L1555
;
; if (cur_level < 10)
;
	.dbg	line, "main.c", 3159
	tax
	lda     _cur_level
	cmp     #$0A
	jcs     L1A32
;
; multi_vram_buffer_horz("00", 2, get_ppu_addr(cur_nt, 5 << 3, 9 << 3));
;
	.dbg	line, "main.c", 3161
	jsr     decsp3
	lda     #<(L155D)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L155D)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$28
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp_level != 0)
;
	.dbg	line, "main.c", 3164
	jmp     L1566
;
; unsigned char digit = temp_level % 10;
;
	.dbg	line, "main.c", 3166
L1A31:	lda     L1554
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(cur_nt, (6 << 3) - (i << 3), 9 << 3));
;
	.dbg	line, "main.c", 3167
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     _cur_nt
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L1555
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp_level = temp_level / 10;
;
	.dbg	line, "main.c", 3169
	lda     L1554
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L1554
;
; ++i;
;
	.dbg	line, "main.c", 3170
	inc     L1555
;
; }
;
	.dbg	line, "main.c", 3171
	jsr     incsp1
;
; while (temp_level != 0)
;
	.dbg	line, "main.c", 3164
L1566:	ldx     #$00
L1A32:	lda     L1554
	bne     L1A31
;
; }
;
	.dbg	line, "main.c", 3172
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ clear_rows_in_data (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_rows_in_data: near

	.dbg	func, "clear_rows_in_data", "00", extern, "_clear_rows_in_data"
	.dbg	sym, "start_y", "00", auto, 0

.segment	"BSS"

L1576:
	.res	1,$00
L1577:
	.res	1,$00
L1578:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 3177
	jsr     pusha
;
; i = 0;
;
	.dbg	line, "main.c", 3183
	lda     #$00
	sta     L1577
;
; prev_level = cur_level;
;
	.dbg	line, "main.c", 3184
	lda     _cur_level
	sta     L1578
;
; memfill(lines_cleared_y, 0xff, 4);
;
	.dbg	line, "main.c", 3187
	jsr     decsp3
	lda     #<(_lines_cleared_y)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lines_cleared_y)
	sta     (sp),y
	lda     #$FF
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$04
	jsr     _memfill
;
; for (local_iy = start_y; local_iy > BOARD_OOB_END; --local_iy)
;
	.dbg	line, "main.c", 3190
	ldy     #$00
	lda     (sp),y
	sta     _local_iy
L1A38:	lda     _local_iy
	cmp     #$04
	jcc     L1A43
;
; line_complete = 1;
;
	.dbg	line, "main.c", 3194
	lda     #$01
	sta     L1576
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3195
	lda     #$00
	sta     _local_ix
L1A39:	lda     _local_ix
	cmp     #$0A
	bcs     L158C
;
; if (game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] == 0 || game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy)] == 1)
;
	.dbg	line, "main.c", 3198
	ldy     _local_iy
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L1A33
	inx
L1A33:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	beq     L1A4D
	ldy     _local_iy
	ldx     #$00
	lda     _board_lookup_y,y
	clc
	adc     _local_ix
	bcc     L1A34
	inx
L1A34:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	cmp     #$01
	bne     L1A3D
;
; line_complete = 0;
;
	.dbg	line, "main.c", 3202
	lda     #$00
L1A4D:	sta     L1576
;
; break;
;
	.dbg	line, "main.c", 3203
	jmp     L158C
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3195
L1A3D:	inc     _local_ix
	jmp     L1A39
;
; if (line_complete)
;
	.dbg	line, "main.c", 3210
L158C:	lda     L1576
	beq     L1A42
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 3224
	lda     #$00
	sta     _local_ix
L1A3E:	lda     _local_ix
	cmp     #$0A
	bcs     L15A9
;
; if (attack_row_status[local_ix] > ATTACK_QUEUE_SIZE && attack_row_status[local_ix] - (ATTACK_QUEUE_SIZE + 1) >= (BOARD_END_Y_PX_BOARD - local_iy))
;
	.dbg	line, "main.c", 3226
	ldy     _local_ix
	lda     _attack_row_status,y
	cmp     #$04
	bcc     L1A41
	ldy     _local_ix
	ldx     #$00
	lda     _attack_row_status,y
	sec
	sbc     #$04
	bcs     L15B9
	dex
L15B9:	jsr     pushax
	lda     #$17
	sec
	sbc     _local_iy
	jsr     tosicmp0
	bcc     L1A41
;
; hit_reaction_remaining = 60;
;
	.dbg	line, "main.c", 3228
	lda     #$3C
	sta     _hit_reaction_remaining
;
; for (local_ix = 0; local_ix < BOARD_WIDTH; ++local_ix)
;
	.dbg	line, "main.c", 3224
L1A41:	inc     _local_ix
	jmp     L1A3E
;
; inc_lines_cleared();
;
	.dbg	line, "main.c", 3233
L15A9:	jsr     _inc_lines_cleared
;
; memcpy(&game_board[TILE_TO_BOARD_INDEX(0, local_iy)], empty_row, 10);
;
	.dbg	line, "main.c", 3236
	ldy     _local_iy
	lda     _board_lookup_y,y
	clc
	adc     #<(_game_board)
	tay
	lda     #$00
	adc     #>(_game_board)
	tax
	tya
	jsr     pushax
	lda     #<(_empty_row)
	ldx     #>(_empty_row)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _memcpy
;
; lines_cleared_y[i] = local_iy;
;
	.dbg	line, "main.c", 3240
	ldy     L1577
	lda     _local_iy
	sta     _lines_cleared_y,y
;
; ++i;
;
	.dbg	line, "main.c", 3243
	inc     L1577
;
; for (local_iy = start_y; local_iy > BOARD_OOB_END; --local_iy)
;
	.dbg	line, "main.c", 3190
L1A42:	dec     _local_iy
	jmp     L1A38
;
; if (i == 0 & is_tspin != 0)
;
	.dbg	line, "main.c", 3248
L1A43:	lda     L1577
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L1A44
;
; cur_score += (40 * is_tspin * (cur_level + 1));
;
	.dbg	line, "main.c", 3250
	lda     _is_tspin
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L15D5
	inx
L15D5:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; display_score();
;
	.dbg	line, "main.c", 3251
	jsr     _display_score
;
; else if (i > 0)
;
	.dbg	line, "main.c", 3253
	jmp     incsp1
L1A44:	lda     L1577
	bne     L1A4F
;
; }
;
	.dbg	line, "main.c", 3319
	jmp     incsp1
;
; if (prev_level != cur_level)
;
	.dbg	line, "main.c", 3255
L1A4F:	lda     _cur_level
	cmp     L1578
	beq     L1A46
;
; if (i == 4|| (i == 3 & is_tspin != 0))
;
	.dbg	line, "main.c", 3257
	lda     L1577
	cmp     #$04
	beq     L1A45
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L15DC
;
; screen_shake_remaining = 5;
;
	.dbg	line, "main.c", 3259
L1A45:	lda     #$05
	sta     _screen_shake_remaining
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP_MULTI);
;
	.dbg	line, "main.c", 3260
	lda     _sfx_on
	beq     L1A48
	lda     #$08
;
; else
;
	.dbg	line, "main.c", 3262
	jmp     L1A4E
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP);
;
	.dbg	line, "main.c", 3264
L15DC:	lda     _sfx_on
	beq     L1A48
	lda     #$07
;
; else if (i == 4 || (i == 3 & is_tspin != 0))
;
	.dbg	line, "main.c", 3267
	jmp     L1A4E
L1A46:	lda     L1577
	cmp     #$04
	beq     L1A47
	cmp     #$03
	jsr     booleq
	jsr     pusha0
	lda     _is_tspin
	jsr     boolne
	jsr     tosanda0
	cmp     #$00
	beq     L15F0
;
; screen_shake_remaining = 5;
;
	.dbg	line, "main.c", 3271
L1A47:	lda     #$05
	sta     _screen_shake_remaining
;
; SFX_PLAY_WRAPPER(SOUND_MULTIROW);
;
	.dbg	line, "main.c", 3272
	lda     _sfx_on
	beq     L1A48
	lda     #$03
;
; else
;
	.dbg	line, "main.c", 3274
	jmp     L1A4E
;
; SFX_PLAY_WRAPPER(SOUND_ROW);
;
	.dbg	line, "main.c", 3277
L15F0:	lda     _sfx_on
	beq     L1A48
	lda     #$02
L1A4E:	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; switch (i)
;
	.dbg	line, "main.c", 3281
	ldx     #$00
L1A48:	lda     L1577
;
; }
;
	.dbg	line, "main.c", 3307
	cmp     #$01
	beq     L1A49
	cmp     #$02
	beq     L1A4A
	cmp     #$03
	beq     L160F
	cmp     #$04
	beq     L1613
	jmp     L1613
;
; line_score_mod = 40;
;
	.dbg	line, "main.c", 3285
L1A49:	lda     #$28
;
; break;
;
	.dbg	line, "main.c", 3286
	jmp     L1A4C
;
; line_score_mod = 100;
;
	.dbg	line, "main.c", 3291
L1A4A:	lda     #$64
;
; break;
;
	.dbg	line, "main.c", 3292
	jmp     L1A4C
;
; line_score_mod = 300;
;
	.dbg	line, "main.c", 3297
L160F:	ldx     #$01
	lda     #$2C
;
; break;
;
	.dbg	line, "main.c", 3298
	jmp     L1A4C
;
; line_score_mod = 1200;
;
	.dbg	line, "main.c", 3304
L1613:	ldx     #$04
	lda     #$B0
L1A4C:	sta     _line_score_mod
	stx     _line_score_mod+1
;
; cur_score += (line_score_mod * (4*is_tspin + 1) * (cur_level + 1));
;
	.dbg	line, "main.c", 3308
	lda     _line_score_mod
	ldx     _line_score_mod+1
	jsr     pushax
	ldx     #$00
	lda     _is_tspin
	jsr     shlax2
	clc
	adc     #$01
	bcc     L161B
	inx
L161B:	jsr     tosumulax
	jsr     pushax
	ldx     #$00
	lda     _cur_level
	clc
	adc     #$01
	bcc     L161D
	inx
L161D:	jsr     tosumulax
	ldy     #$00
	sty     sreg
	sty     sreg+1
	ldy     #<(_cur_score)
	sty     ptr1
	ldy     #>(_cur_score)
	jsr     laddeq
;
; display_score();
;
	.dbg	line, "main.c", 3309
	jsr     _display_score
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 3312
	lda     _hit_reaction_remaining
	beq     L161F
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3314
	jsr     _draw_gameplay_sprites
;
; reveal_empty_rows_to_nt();
;
	.dbg	line, "main.c", 3316
L161F:	jsr     _reveal_empty_rows_to_nt
;
; }
;
	.dbg	line, "main.c", 3319
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ reveal_empty_rows_to_nt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reveal_empty_rows_to_nt: near

	.dbg	func, "reveal_empty_rows_to_nt", "00", extern, "_reveal_empty_rows_to_nt"

.segment	"BSS"

L1624:
	.res	1,$00
L1625:
	.res	1,$00

.segment	"CODE"

;
; delay(1);
;
	.dbg	line, "main.c", 3332
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3333
	jsr     _clear_vram_buffer
;
; for (ix = 4; ix >= 0; --ix)
;
	.dbg	line, "main.c", 3336
	lda     #$04
	sta     L1624
L1A53:	ldx     L1624
	bpl     L1A56
;
; try_collapse_empty_row_data();
;
	.dbg	line, "main.c", 3375
	jmp     _try_collapse_empty_row_data
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3341
L1A56:	lda     #$00
	sta     L1625
L1A54:	lda     L1625
	cmp     #$14
	bcs     L1634
;
; copy_board_data[iy] = game_board[TILE_TO_BOARD_INDEX(ix, iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3343
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     L1625
	bcc     L163E
	inx
L163E:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     L1625
	clc
	adc     #$03
	bcc     L1A51
	inx
	clc
L1A51:	adc     #$01
	bcc     L1646
	inx
L1646:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     L1624
	bpl     L1648
	dex
L1648:	clc
	adc     ptr1
	bcc     L1A50
	inx
L1A50:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3341
	inc     L1625
	jmp     L1A54
;
; copy_board_data,
;
	.dbg	line, "main.c", 3347
L1634:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3348
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3350
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + (ix << 3),
;
	.dbg	line, "main.c", 3351
	lda     L1624
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3352
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3356
	lda     #$00
	sta     L1625
L1A55:	lda     L1625
	cmp     #$14
	bcs     L1657
;
; copy_board_data[iy] = game_board[TILE_TO_BOARD_INDEX(BOARD_END_X_PX_BOARD - ix, iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3358
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     L1625
	bcc     L1661
	inx
L1661:	jsr     pushax
	ldx     #$00
	lda     L1625
	clc
	adc     #$03
	bcc     L1A52
	inx
	clc
L1A52:	adc     #$01
	bcc     L1669
	inx
L1669:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	jsr     pusha0
	lda     #$09
	jsr     pusha0
	lda     L1624
	bpl     L166B
	ldx     #$FF
L166B:	jsr     tossubax
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; for (iy = 0; iy < BOARD_HEIGHT; ++iy)
;
	.dbg	line, "main.c", 3356
	inc     L1625
	jmp     L1A55
;
; copy_board_data,
;
	.dbg	line, "main.c", 3362
L1657:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3363
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3365
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + ((BOARD_END_X_PX_BOARD - ix) << 3),
;
	.dbg	line, "main.c", 3366
	lda     #$09
	jsr     pusha0
	lda     L1624
	bpl     L1675
	ldx     #$FF
L1675:	jsr     tossubax
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$00
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3367
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; delay(5);
;
	.dbg	line, "main.c", 3370
	lda     #$05
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3371
	jsr     _clear_vram_buffer
;
; for (ix = 4; ix >= 0; --ix)
;
	.dbg	line, "main.c", 3336
	dec     L1624
	jpl     L1A53
	jmp     L1A53
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ try_collapse_empty_row_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_try_collapse_empty_row_data: near

	.dbg	func, "try_collapse_empty_row_data", "00", extern, "_try_collapse_empty_row_data"

.segment	"BSS"

L167F:
	.res	1,$00
L1680:
	.res	1,$00
L1681:
	.res	1,$00

.segment	"CODE"

;
; iy = BOARD_END_Y_PX_BOARD - lines_cleared_y[0];
;
	.dbg	line, "main.c", 3388
	lda     #$17
	sec
	sbc     _lines_cleared_y
	sta     L1680
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3392
	lda     #$00
	sta     L167F
L1A57:	lda     L167F
	cmp     #$0A
	bcs     L1A5C
;
; if (attack_row_status[ix] > ATTACK_QUEUE_SIZE && attack_row_status[ix] - (ATTACK_QUEUE_SIZE + 1) >= (iy))
;
	.dbg	line, "main.c", 3394
	ldy     L167F
	lda     _attack_row_status,y
	cmp     #$04
	bcc     L1A5B
	ldy     L167F
	ldx     #$00
	lda     _attack_row_status,y
	sec
	sbc     #$04
	bcs     L1696
	dex
L1696:	cmp     L1680
	txa
	sbc     #$00
	bcs     L169B
	jmp     L1A5B
;
; --attack_row_status[ix];
;
	.dbg	line, "main.c", 3399
L1699:	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     L167F
	bcc     L16A1
	inx
L16A1:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; delay(1);
;
	.dbg	line, "main.c", 3400
	lda     #$01
	jsr     _delay
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3401
	jsr     _draw_gameplay_sprites
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3402
	jsr     _clear_vram_buffer
;
; while (attack_row_status[ix] > 0)
;
	.dbg	line, "main.c", 3396
L169B:	ldy     L167F
	lda     _attack_row_status,y
	bne     L1699
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3392
L1A5B:	inc     L167F
	jmp     L1A57
;
; for (i = 3; i >= 0; --i)
;
	.dbg	line, "main.c", 3408
L1A5C:	lda     #$03
	sta     L1681
L1A5D:	ldx     L1681
	bmi     L16A7
;
; iy = lines_cleared_y[i];
;
	.dbg	line, "main.c", 3413
	ldy     L1681
	lda     _lines_cleared_y,y
	sta     L1680
;
; if (iy != 0xff)
;
	.dbg	line, "main.c", 3415
	cmp     #$FF
	beq     L1A5E
;
; memcpy(game_board_temp, game_board, sizeof(game_board));
;
	.dbg	line, "main.c", 3419
	ldy     #$00
L16BC:	lda     _game_board,y
	sta     _game_board_temp,y
	iny
	cpy     #$F0
	bne     L16BC
;
; memcpy(&game_board[10], game_board_temp, iy * 10);
;
	.dbg	line, "main.c", 3421
	lda     #<(_game_board+10)
	ldx     #>(_game_board+10)
	jsr     pushax
	lda     #<(_game_board_temp)
	ldx     #>(_game_board_temp)
	jsr     pushax
	ldx     #$00
	lda     L1680
	jsr     mulax10
	jsr     _memcpy
;
; for (i = 3; i >= 0; --i)
;
	.dbg	line, "main.c", 3408
L1A5E:	dec     L1681
	bpl     L1A5D
	jmp     L1A5D
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3426
L16A7:	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ copy_board_to_nt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copy_board_to_nt: near

	.dbg	func, "copy_board_to_nt", "00", extern, "_copy_board_to_nt"

.segment	"CODE"

;
; if (state == STATE_GAME)
;
	.dbg	line, "main.c", 3435
	lda     _state
	cmp     #$04
	bne     L1A61
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 3437
	jsr     _draw_gameplay_sprites
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3443
L1A61:	lda     #$00
	sta     _local_ix
L1A62:	lda     _local_ix
	cmp     #$0A
	bcc     L1A64
;
; }
;
	.dbg	line, "main.c", 3487
	rts
;
; for (local_iy = 0; local_iy < BOARD_HEIGHT; ++local_iy)
;
	.dbg	line, "main.c", 3446
L1A64:	lda     #$00
	sta     _local_iy
L1A63:	lda     _local_iy
	cmp     #$14
	bcs     L16D0
;
; copy_board_data[local_iy] = game_board[TILE_TO_BOARD_INDEX(local_ix, local_iy + BOARD_OOB_END + 1)];
;
	.dbg	line, "main.c", 3448
	lda     #<(_copy_board_data)
	ldx     #>(_copy_board_data)
	clc
	adc     _local_iy
	bcc     L16DA
	inx
L16DA:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _local_iy
	clc
	adc     #$03
	bcc     L1A60
	inx
	clc
L1A60:	adc     #$01
	bcc     L16E2
	inx
L16E2:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     _local_ix
	bcc     L1A5F
	inx
L1A5F:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (local_iy = 0; local_iy < BOARD_HEIGHT; ++local_iy)
;
	.dbg	line, "main.c", 3446
	inc     _local_iy
	jmp     L1A63
;
; copy_board_data,
;
	.dbg	line, "main.c", 3457
L16D0:	jsr     decsp3
	lda     #<(_copy_board_data)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_copy_board_data)
	sta     (sp),y
;
; BOARD_HEIGHT,
;
	.dbg	line, "main.c", 3458
	lda     #$14
	ldy     #$00
	sta     (sp),y
;
; cur_nt,
;
	.dbg	line, "main.c", 3460
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
;
; BOARD_START_X_PX + (local_ix << 3),
;
	.dbg	line, "main.c", 3461
	lda     _local_ix
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	dey
	sta     (sp),y
;
; BOARD_START_Y_PX + ((BOARD_OOB_END + 1) << 3)));
;
	.dbg	line, "main.c", 3462
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_vert
;
; if (local_ix % 3 == 0)
;
	.dbg	line, "main.c", 3465
	lda     _local_ix
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	cpx     #$00
	bne     L16C9
	cmp     #$00
	bne     L16C9
;
; delay(1);
;
	.dbg	line, "main.c", 3471
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3472
	jsr     _clear_vram_buffer
;
; for (local_ix = 0; local_ix <= BOARD_END_X_PX_BOARD; ++local_ix)
;
	.dbg	line, "main.c", 3443
L16C9:	inc     _local_ix
	jmp     L1A62
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_block_at_bottom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_block_at_bottom: near

	.dbg	func, "add_block_at_bottom", "00", extern, "_add_block_at_bottom"

.segment	"BSS"

L16F7:
	.res	1,$00
L16F8:
	.res	1,$00
L16F9:
	.res	1,$00

.segment	"CODE"

;
; attacks = 0;
;
	.dbg	line, "main.c", 3496
	lda     #$00
	sta     L16F9
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3503
	sta     L16F7
L1A6B:	lda     L16F7
	sec
	sbc     #$0A
	bvc     L1705
	eor     #$80
L1705:	jpl     L1A73
;
; if (attack_row_status[ix] > 0)
;
	.dbg	line, "main.c", 3505
	ldy     L16F7
	lda     _attack_row_status,y
	jeq     L1A72
;
; if (attack_row_status[ix] >= ATTACK_MAX)
;
	.dbg	line, "main.c", 3507
	ldy     L16F7
	lda     _attack_row_status,y
	cmp     #$0A
	bcc     L1A6C
;
; row_to_clear = ix;
;
	.dbg	line, "main.c", 3519
	lda     L16F7
	sta     _row_to_clear
;
; break;
;
	.dbg	line, "main.c", 3526
	jmp     L1A73
;
; ++attacks;
;
	.dbg	line, "main.c", 3528
L1A6C:	inc     L16F9
;
; ++attack_row_status[ix];
;
	.dbg	line, "main.c", 3529
	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     L16F7
	bcc     L1719
	inx
L1719:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (attack_row_status[ix] > ATTACK_QUEUE_SIZE)
;
	.dbg	line, "main.c", 3531
	ldy     L16F7
	lda     _attack_row_status,y
	cmp     #$04
	jcc     L1A72
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
	.dbg	line, "main.c", 3533
	lda     #$17
	sta     L16F8
L1A6D:	lda     L16F8
	cmp     #$04
	ldx     #$00
	jcc     L1A71
;
; if (game_board[TILE_TO_BOARD_INDEX(ix, iy)] == 0)
;
	.dbg	line, "main.c", 3536
	ldy     L16F8
	lda     _board_lookup_y,y
	sta     ptr1
	lda     L16F7
	bpl     L1730
	dex
L1730:	clc
	adc     ptr1
	bcc     L1A65
	inx
L1A65:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	bne     L1A6F
;
; for (; iy <= BOARD_END_Y_PX_BOARD; ++iy)
;
	.dbg	line, "main.c", 3539
	tax
L1A6E:	lda     L16F8
	cmp     #$18
	bcs     L1A71
;
; game_board[TILE_TO_BOARD_INDEX(ix, iy)] = game_board[TILE_TO_BOARD_INDEX(ix, iy + 1)];
;
	.dbg	line, "main.c", 3541
	ldy     L16F8
	lda     _board_lookup_y,y
	sta     ptr1
	lda     L16F7
	bpl     L173F
	dex
L173F:	clc
	adc     ptr1
	bcc     L1A69
	inx
	clc
L1A69:	adc     #<(_game_board)
	sta     sreg
	txa
	adc     #>(_game_board)
	sta     sreg+1
	ldx     #$00
	lda     L16F8
	clc
	adc     #$01
	bcc     L1746
	inx
L1746:	sta     ptr1
	txa
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	lda     L16F7
	bpl     L1748
	dex
L1748:	clc
	adc     ptr1
	bcc     L1A67
	inx
L1A67:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; for (; iy <= BOARD_END_Y_PX_BOARD; ++iy)
;
	.dbg	line, "main.c", 3539
	ldx     #$00
	inc     L16F8
	jmp     L1A6E
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
	.dbg	line, "main.c", 3533
L1A6F:	dec     L16F8
	jmp     L1A6D
;
; game_board[TILE_TO_BOARD_INDEX(ix, BOARD_END_Y_PX_BOARD)] = garbage_types[cur_garbage_type]; //     0x60; //0xf7; //(attack_row_status[ix] == (ATTACK_QUEUE_SIZE + 1)) ? 0xf9 : 0xf8;
;
	.dbg	line, "main.c", 3548
L1A71:	lda     L16F7
	bpl     L1750
	dex
L1750:	clc
	adc     _board_lookup_y+23
	bcc     L1A6A
	inx
	clc
L1A6A:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     _cur_garbage_type
	lda     _garbage_types,y
	ldy     #$00
	sta     (ptr1),y
;
; ++cur_garbage_type;
;
	.dbg	line, "main.c", 3549
	inc     _cur_garbage_type
;
; if (cur_garbage_type >= NUM_GARBAGE_TYPES)
;
	.dbg	line, "main.c", 3550
	lda     _cur_garbage_type
	cmp     #$03
	bcc     L1A72
;
; cur_garbage_type = 0;
;
	.dbg	line, "main.c", 3552
	sty     _cur_garbage_type
;
; for (ix = 0; ix < BOARD_WIDTH; ++ix)
;
	.dbg	line, "main.c", 3503
L1A72:	inc     L16F7
	jpl     L1A6B
	jmp     L1A6B
;
; if (attacks == 0)
;
	.dbg	line, "main.c", 3561
L1A73:	lda     L16F9
	bne     L1759
;
; attack_row_status[rand() % BOARD_WIDTH] = 1;
;
	.dbg	line, "main.c", 3564
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	clc
	adc     #<(_attack_row_status)
	sta     ptr1
	txa
	adc     #>(_attack_row_status)
	sta     ptr1+1
	lda     #$01
	ldy     #$00
	sta     (ptr1),y
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3568
L1759:	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_row_at_bottom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_row_at_bottom: near

	.dbg	func, "add_row_at_bottom", "00", extern, "_add_row_at_bottom"

.segment	"CODE"

;
; memfill(&game_board[TILE_TO_BOARD_INDEX(0, BOARD_END_Y_PX_BOARD - kill_row_cur)], 1, BOARD_WIDTH);
;
	.dbg	line, "main.c", 3573
	jsr     decsp3
	lda     #$17
	sec
	sbc     _kill_row_cur
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_board_lookup_y)
	sta     ptr1+1
	ldy     #<(_board_lookup_y)
	lda     (ptr1),y
	clc
	adc     #<(_game_board)
	tay
	lda     #$00
	adc     #>(_game_board)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _memfill
;
; ++kill_row_cur;
;
	.dbg	line, "main.c", 3574
	inc     _kill_row_cur
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3575
	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ reset_gameplay_area (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_gameplay_area: near

	.dbg	func, "reset_gameplay_area", "00", extern, "_reset_gameplay_area"

.segment	"CODE"

;
; memfill(game_board, 0, BOARD_SIZE);
;
	.dbg	line, "main.c", 3580
	jsr     decsp3
	lda     #<(_game_board)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_game_board)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$F0
	jsr     _memfill
;
; lines_cleared_one = lines_cleared_ten = lines_cleared_hundred = cur_score = 0;
;
	.dbg	line, "main.c", 3583
	ldx     #$00
	txa
	sta     _cur_score
	sta     _cur_score+1
	sta     _cur_score+2
	sta     _cur_score+3
	sta     _lines_cleared_hundred
	sta     _lines_cleared_ten
	sta     _lines_cleared_one
;
; held_cluster_id = 255; // Doesn't exist
;
	.dbg	line, "main.c", 3584
	lda     #$FF
	sta     _held_cluster_id
;
; cur_level = saved_starting_level;
;
	.dbg	line, "main.c", 3585
	lda     _saved_starting_level
	sta     _cur_level
;
; fall_rate = fall_rates_per_level[MIN(cur_level, sizeof(fall_rates_per_level))];
;
	.dbg	line, "main.c", 3586
	cmp     #$1E
	bcs     L1A74
	lda     _cur_level
	jmp     L1786
L1A74:	lda     #$1E
L1786:	sta     ptr1
	txa
	clc
	adc     #>(_fall_rates_per_level)
	sta     ptr1+1
	ldy     #<(_fall_rates_per_level)
	lda     (ptr1),y
	sta     _fall_rate
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 3587
	lda     #$FF
	sta     _row_to_clear
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 3588
	sta     _delay_lock_remaining
;
; kill_row_cur = 0;
;
	.dbg	line, "main.c", 3589
	stx     _kill_row_cur
;
; start_delay_remaining = START_DELAY;
;
	.dbg	line, "main.c", 3590
	lda     #$78
	sta     _start_delay_remaining
;
; time_of_day = 0;
;
	.dbg	line, "main.c", 3593
	txa
	sta     _time_of_day
;
; pal_bg(palette_bg_list[time_of_day]);
;
	.dbg	line, "main.c", 3594
	jsr     aslax4
	clc
	adc     #<(_palette_bg_list)
	tay
	txa
	adc     #>(_palette_bg_list)
	tax
	tya
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	.dbg	line, "main.c", 3595
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; one_vram_buffer(0x8, get_ppu_addr(2, 4 << 3, 9 << 3));
;
	.dbg	line, "main.c", 3598
	lda     #$08
	jsr     pusha
	jsr     decsp2
	lda     #$02
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$48
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; display_lines_cleared();
;
	.dbg	line, "main.c", 3600
	jsr     _display_lines_cleared
;
; display_score();
;
	.dbg	line, "main.c", 3601
	jsr     _display_score
;
; display_level();
;
	.dbg	line, "main.c", 3602
	jsr     _display_level
;
; oam_clear();
;
	.dbg	line, "main.c", 3604
	jsr     _oam_clear
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 16));
;
	.dbg	line, "main.c", 3607
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$10
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row, 4, get_ppu_addr(cur_nt, 120, 24));
;
	.dbg	line, "main.c", 3608
	jsr     decsp3
	lda     #<(_empty_row)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$18
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 32));
;
	.dbg	line, "main.c", 3615
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 40));
;
	.dbg	line, "main.c", 3616
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$28
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; delay(1);
;
	.dbg	line, "main.c", 3618
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3619
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(empty_row_hold, 4, get_ppu_addr(cur_nt, 220, 48));
;
	.dbg	line, "main.c", 3621
	jsr     decsp3
	lda     #<(_empty_row_hold)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$30
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(empty_row_hold_sky, 4, get_ppu_addr(cur_nt, 220, 56));
;
	.dbg	line, "main.c", 3622
	jsr     decsp3
	lda     #<(_empty_row_hold_sky)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_row_hold_sky)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	lda     _cur_nt
	iny
	sta     (sp),y
	lda     #$DC
	dey
	sta     (sp),y
	lda     #$38
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; copy_board_to_nt();
;
	.dbg	line, "main.c", 3625
	jmp     _copy_board_to_nt
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_song (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_song: near

	.dbg	func, "display_song", "00", extern, "_display_song"

.segment	"BSS"

L17D2:
	.res	1,$00
L17D3:
	.res	1,$00

.segment	"CODE"

;
; temp = test_song;
;
	.dbg	line, "main.c", 3634
	lda     _test_song
	sta     L17D2
;
; i = 0;
;
	.dbg	line, "main.c", 3635
	lda     #$00
	sta     L17D3
;
; if (test_song < 100)
;
	.dbg	line, "main.c", 3637
	tax
	lda     _test_song
	cmp     #$64
	bcs     L1A76
;
; multi_vram_buffer_horz("000", 3, get_ppu_addr(0, (4 << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3639
	jsr     decsp3
	lda     #<(L17DB)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L17DB)
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	txa
	iny
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3642
	jmp     L17E6
;
; unsigned char digit = temp % 10;
;
	.dbg	line, "main.c", 3644
L1A75:	lda     L17D2
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(0, (6 << 3) - (i << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3645
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$30
	jsr     pusha0
	lda     L17D3
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp = temp / 10;
;
	.dbg	line, "main.c", 3647
	lda     L17D2
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L17D2
;
; ++i;
;
	.dbg	line, "main.c", 3648
	inc     L17D3
;
; }
;
	.dbg	line, "main.c", 3649
	jsr     incsp1
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3642
L17E6:	ldx     #$00
L1A76:	lda     L17D2
	bne     L1A75
;
; }
;
	.dbg	line, "main.c", 3650
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_sound (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_sound: near

	.dbg	func, "display_sound", "00", extern, "_display_sound"

.segment	"BSS"

L17F7:
	.res	1,$00
L17F8:
	.res	1,$00

.segment	"CODE"

;
; temp = test_sound;
;
	.dbg	line, "main.c", 3658
	lda     _test_sound
	sta     L17F7
;
; i = 0;
;
	.dbg	line, "main.c", 3659
	lda     #$00
	sta     L17F8
;
; if (test_song < 100)
;
	.dbg	line, "main.c", 3661
	tax
	lda     _test_song
	cmp     #$64
	bcs     L1A78
;
; multi_vram_buffer_horz("000", 3, get_ppu_addr(0, (25 << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3663
	jsr     decsp3
	lda     #<(L1800)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1800)
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	txa
	iny
	sta     (sp),y
	lda     #$C8
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3666
	jmp     L180B
;
; unsigned char digit = temp % 10;
;
	.dbg	line, "main.c", 3668
L1A77:	lda     L17F7
	jsr     pushax
	lda     #$0A
	jsr     tosumodax
	jsr     pusha
;
; one_vram_buffer('0' + digit, get_ppu_addr(0, (27 << 3) - (i << 3), (14 << 3)));
;
	.dbg	line, "main.c", 3669
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$D8
	jsr     pusha0
	lda     L17F8
	jsr     aslax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	jsr     _one_vram_buffer
;
; temp = temp / 10;
;
	.dbg	line, "main.c", 3671
	lda     L17F7
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     L17F7
;
; ++i;
;
	.dbg	line, "main.c", 3672
	inc     L17F8
;
; }
;
	.dbg	line, "main.c", 3673
	jsr     incsp1
;
; while (temp != 0)
;
	.dbg	line, "main.c", 3666
L180B:	ldx     #$00
L1A78:	lda     L17F7
	bne     L1A77
;
; }
;
	.dbg	line, "main.c", 3674
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ display_options (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_options: near

	.dbg	func, "display_options", "00", extern, "_display_options"

.segment	"DATA"

L181C:
	.byte	$10

.segment	"CODE"

;
; delay(1);
;
	.dbg	line, "main.c", 3683
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3684
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(&starting_levels[cur_level], 1, get_ppu_addr(0, 17 << 3, start_y << 3));
;
	.dbg	line, "main.c", 3686
	jsr     decsp3
	lda     #<(_starting_levels)
	ldx     #>(_starting_levels)
	clc
	adc     _cur_level
	bcc     L1824
	inx
L1824:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L181C
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(attack_style_strings[attack_style], ATTACK_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 2) << 3));
;
	.dbg	line, "main.c", 3687
	jsr     decsp3
	ldx     #$00
	lda     _attack_style
	jsr     mulax7
	clc
	adc     #<(_attack_style_strings)
	tay
	txa
	adc     #>(_attack_style_strings)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L181C
	clc
	adc     #$02
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(off_on_string[music_on], OFF_ON_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 4) << 3));
;
	.dbg	line, "main.c", 3688
	jsr     decsp3
	ldx     #$00
	lda     _music_on
	jsr     aslax2
	clc
	adc     #<(_off_on_string)
	tay
	txa
	adc     #>(_off_on_string)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L181C
	clc
	adc     #$04
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(off_on_string[sfx_on], OFF_ON_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 6) << 3));
;
	.dbg	line, "main.c", 3689
	jsr     decsp3
	ldx     #$00
	lda     _sfx_on
	jsr     aslax2
	clc
	adc     #<(_off_on_string)
	tay
	txa
	adc     #>(_off_on_string)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L181C
	clc
	adc     #$06
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(hard_drop_types[hard_drops_on], HARD_DROP_STRING_LEN, get_ppu_addr(0, 17 << 3, (start_y + 8) << 3));
;
	.dbg	line, "main.c", 3690
	jsr     decsp3
	ldx     #$00
	lda     _hard_drops_on
	jsr     aslax2
	clc
	adc     #<(_hard_drop_types)
	tay
	txa
	adc     #>(_hard_drop_types)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	lda     L181C
	clc
	adc     #$08
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y) << 3));
;
	.dbg	line, "main.c", 3693
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L181C
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 2) << 3));
;
	.dbg	line, "main.c", 3694
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L181C
	clc
	adc     #$02
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 4) << 3));
;
	.dbg	line, "main.c", 3695
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L181C
	clc
	adc     #$04
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 6) << 3));
;
	.dbg	line, "main.c", 3696
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L181C
	clc
	adc     #$06
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_empty, 2, get_ppu_addr(0, 7 << 3, (start_y + 8) << 3));
;
	.dbg	line, "main.c", 3697
	jsr     decsp3
	lda     #<(_option_empty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_empty)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     L181C
	clc
	adc     #$08
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(option_icon, 2, get_ppu_addr(0, 7 << 3, (start_y + (cur_option << 1) << 3)));
;
	.dbg	line, "main.c", 3699
	jsr     decsp3
	lda     #<(_option_icon)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_option_icon)
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     _cur_option
	asl     a
	bcc     L1A7B
	clc
L1A7B:	adc     L181C
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; delay(1);
;
	.dbg	line, "main.c", 3702
	lda     #$01
	jsr     _delay
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 3703
	jmp     _clear_vram_buffer
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ fade_to_black (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_to_black: near

	.dbg	func, "fade_to_black", "00", extern, "_fade_to_black"

.segment	"CODE"

;
; pal_bright(3);
;
	.dbg	line, "main.c", 3709
	lda     #$03
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3710
	lda     #$02
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "main.c", 3711
	lda     #$02
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3712
	lda     #$02
	jsr     _delay
;
; pal_bright(1);
;
	.dbg	line, "main.c", 3713
	lda     #$01
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3714
	lda     #$02
	jsr     _delay
;
; pal_bright(0);
;
	.dbg	line, "main.c", 3715
	lda     #$00
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3716
	lda     #$02
	jmp     _delay
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ fade_from_black (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_from_black: near

	.dbg	func, "fade_from_black", "00", extern, "_fade_from_black"

.segment	"CODE"

;
; pal_bright(1);
;
	.dbg	line, "main.c", 3721
	lda     #$01
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3722
	lda     #$02
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "main.c", 3723
	lda     #$02
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3724
	lda     #$02
	jsr     _delay
;
; pal_bright(3);
;
	.dbg	line, "main.c", 3725
	lda     #$03
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3726
	lda     #$02
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "main.c", 3727
	lda     #$04
	jsr     _pal_bright
;
; delay(2);
;
	.dbg	line, "main.c", 3728
	lda     #$02
	jmp     _delay
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ difficulty_to_leaderboard_pos (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_difficulty_to_leaderboard_pos: near

	.dbg	func, "difficulty_to_leaderboard_pos", "00", extern, "_difficulty_to_leaderboard_pos"
	.dbg	sym, "dif", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 3732
	jsr     pusha
;
; switch (dif)
;
	.dbg	line, "main.c", 3733
	ldy     #$00
	lda     (sp),y
;
; }
;
	.dbg	line, "main.c", 3751
	beq     L1A7D
	cmp     #$01
	beq     L1A7E
	cmp     #$02
	beq     L1A7F
	cmp     #$03
	beq     L1A80
	jmp     incsp1
;
; in_x = 4;
;
	.dbg	line, "main.c", 3736
L1A7D:	lda     #$04
	sta     _in_x
;
; in_y = 12;
;
	.dbg	line, "main.c", 3737
	lda     #$0C
;
; break;
;
	.dbg	line, "main.c", 3738
	jmp     L1A7C
;
; in_x = 18;
;
	.dbg	line, "main.c", 3740
L1A7E:	lda     #$12
	sta     _in_x
;
; in_y = 12;
;
	.dbg	line, "main.c", 3741
	lda     #$0C
;
; break;
;
	.dbg	line, "main.c", 3742
	jmp     L1A7C
;
; in_x = 4;
;
	.dbg	line, "main.c", 3744
L1A7F:	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 3746
	jmp     L1A82
;
; in_x = 18;
;
	.dbg	line, "main.c", 3748
L1A80:	lda     #$12
L1A82:	sta     _in_x
;
; in_y = 22;
;
	.dbg	line, "main.c", 3749
	lda     #$16
L1A7C:	sta     _in_y
;
; }
;
	.dbg	line, "main.c", 3752
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "main.c", 339
	jsr     _ppu_off
;
; bank_spr(1);
;
	.dbg	line, "main.c", 353
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	.dbg	line, "main.c", 355
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	.dbg	line, "main.c", 356
	jsr     _clear_vram_buffer
;
; off_nt = 0;
;
	.dbg	line, "main.c", 359
	lda     #$00
	sta     _off_nt
;
; cur_nt = 2;
;
	.dbg	line, "main.c", 360
	lda     #$02
	sta     _cur_nt
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 362
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 363
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; vram_adr(NTADR_C(0, 0));
;
	.dbg	line, "main.c", 364
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(game_area);
;
	.dbg	line, "main.c", 365
	lda     #<(_game_area)
	ldx     #>(_game_area)
	jsr     _vram_unrle
;
; scroll_y = 0x1df;
;
	.dbg	line, "main.c", 367
	ldx     #$01
	lda     #$DF
	sta     _scroll_y
	stx     _scroll_y+1
;
; scroll(0, scroll_y); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 368
	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "main.c", 371
	jsr     _ppu_on_all
;
; attack_style = ATTACK_ON_TIME; // ATTACK_ON_LAND;
;
	.dbg	line, "main.c", 375
	lda     #$01
	sta     _attack_style
;
; music_on = 1;
;
	.dbg	line, "main.c", 376
	sta     _music_on
;
; sfx_on = 1;
;
	.dbg	line, "main.c", 377
	sta     _sfx_on
;
; hard_drops_on = 1;
;
	.dbg	line, "main.c", 378
	sta     _hard_drops_on
;
; block_style = BLOCK_STYLE_CLASSIC;
;
	.dbg	line, "main.c", 379
	sta     _block_style
;
; state = 0xff; // uninitialized so that we don't trigger a "leaving state".
;
	.dbg	line, "main.c", 380
	lda     #$FF
	sta     _state
;
; cur_garbage_type = 0;
;
	.dbg	line, "main.c", 381
	lda     #$00
	sta     _cur_garbage_type
;
; pal_bright(0);
;
	.dbg	line, "main.c", 397
	jsr     _pal_bright
;
; go_to_state(STATE_BOOT);
;
	.dbg	line, "main.c", 398
	lda     #$00
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 399
	jsr     _fade_from_black
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	.dbg	line, "main.c", 448
L0CFE:	jsr     _ppu_wait_nmi
;
; ++tick_count;
;
	.dbg	line, "main.c", 452
	inc     _tick_count
;
; ++tick_count_large;
;
	.dbg	line, "main.c", 453
	inc     _tick_count_large
	bne     L0D05
	inc     _tick_count_large+1
;
; ++ticks_in_state_large;
;
	.dbg	line, "main.c", 454
L0D05:	inc     _ticks_in_state_large
	bne     L0D07
	inc     _ticks_in_state_large+1
;
; pad1 = pad_poll(0);     // read the first controller
;
	.dbg	line, "main.c", 456
L0D07:	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	.dbg	line, "main.c", 457
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; pad2 = pad_poll(1);
;
	.dbg	line, "main.c", 459
	lda     #$01
	jsr     _pad_poll
	sta     _pad2
;
; pad2_new = get_pad_new(1);
;
	.dbg	line, "main.c", 460
	lda     #$01
	jsr     _get_pad_new
	sta     _pad2_new
;
; pad_all = pad1 | pad2;
;
	.dbg	line, "main.c", 464
	lda     _pad2
	ora     _pad1
	sta     _pad_all
;
; pad_all_new = pad1_new | pad2_new;
;
	.dbg	line, "main.c", 465
	lda     _pad2_new
	ora     _pad1_new
	sta     _pad_all_new
;
; clear_vram_buffer(); // do at the beginning of each frame
;
	.dbg	line, "main.c", 574
	jsr     _clear_vram_buffer
;
; if (state != STATE_MENU)
;
	.dbg	line, "main.c", 578
	lda     _state
	cmp     #$02
	beq     L1A8D
;
; if (pad_all & PAD_A && pad_all & PAD_B && pad_all & PAD_SELECT && pad_all & PAD_START)
;
	.dbg	line, "main.c", 580
	lda     _pad_all
	and     #$80
	beq     L1A8D
	lda     _pad_all
	and     #$40
	beq     L1A8D
	lda     _pad_all
	and     #$20
	beq     L1A8D
	lda     _pad_all
	and     #$10
	beq     L1A8D
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 582
	lda     #$02
	jsr     _go_to_state
;
; switch (state)
;
	.dbg	line, "main.c", 587
L1A8D:	lda     _state
;
; }
;
	.dbg	line, "main.c", 1532
	beq     L1A8E
	cmp     #$01
	beq     L1A90
	cmp     #$02
	beq     L0D39
	cmp     #$03
	jeq     L1A97
	cmp     #$04
	jeq     L1AB0
	cmp     #$05
	jeq     L0EA4
	cmp     #$06
	jeq     L1AC0
	cmp     #$07
	jeq     L1AC2
	jmp     L1AD7
;
; if (tick_count == 120 || pad_all_new & PAD_ALL_BUTTONS)
;
	.dbg	line, "main.c", 591
L1A8E:	lda     _tick_count
	cmp     #$78
	beq     L1A8F
	lda     _pad_all_new
	and     #$F0
	jeq     L1AD7
;
; fade_to_black();
;
	.dbg	line, "main.c", 593
L1A8F:	jsr     _fade_to_black
;
; go_to_state(STATE_TY);
;
	.dbg	line, "main.c", 594
	lda     #$01
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 595
	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 597
	jmp     L1AD7
;
; if (tick_count == 104 || pad_all_new & PAD_ALL_BUTTONS)
;
	.dbg	line, "main.c", 602
L1A90:	lda     _tick_count
	cmp     #$68
	beq     L1A91
	lda     _pad_all_new
	and     #$F0
	jeq     L1AD7
;
; fade_to_black();
;
	.dbg	line, "main.c", 604
L1A91:	jsr     _fade_to_black
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 605
	lda     #$02
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 606
	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 608
	jmp     L1AD7
;
; draw_menu_sprites();
;
	.dbg	line, "main.c", 612
L0D39:	jsr     _draw_menu_sprites
;
; if (tick_count % 128 == 0)
;
	.dbg	line, "main.c", 614
	lda     _tick_count
	and     #$7F
	bne     L1A92
;
; multi_vram_buffer_horz(text_push_start, sizeof(text_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 637
	jsr     decsp3
	lda     #<(_text_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_push_start)
;
; else if (tick_count % 128 == 96)
;
	.dbg	line, "main.c", 640
	jmp     L1AF1
L1A92:	lda     _tick_count
	and     #$7F
	cmp     #$60
	bne     L1A93
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 645
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
L1AF1:	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (pad_all_new != 0)
;
	.dbg	line, "main.c", 650
L1A93:	lda     _pad_all_new
	beq     L1A96
;
; if (pad_all_new & konami_code[cur_konami_index])
;
	.dbg	line, "main.c", 652
	ldy     _cur_konami_index
	lda     _konami_code,y
	and     _pad_all_new
	pha
	pla
	beq     L1A95
;
; ++cur_konami_index;
;
	.dbg	line, "main.c", 654
	inc     _cur_konami_index
;
; else
;
	.dbg	line, "main.c", 656
	jmp     L1A96
;
; cur_konami_index = 0;
;
	.dbg	line, "main.c", 658
L1A95:	sta     _cur_konami_index
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 674
L1A96:	lda     _pad_all_new
	and     #$10
	jeq     L1AD7
;
; srand(tick_count_large);
;
	.dbg	line, "main.c", 677
	lda     _tick_count_large
	ldx     _tick_count_large+1
	jsr     _srand
;
; if (cur_konami_index >= KONAMI_CODE_LEN)
;
	.dbg	line, "main.c", 680
	lda     _cur_konami_index
	cmp     #$0B
	bcc     L0D60
;
; SFX_PLAY_WRAPPER(SOUND_LEVELUP_MULTI);
;
	.dbg	line, "main.c", 682
	lda     _sfx_on
	beq     L0D62
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; music_stop();
;
	.dbg	line, "main.c", 683
L0D62:	jsr     _music_stop
;
; go_to_state(STATE_SOUND_TEST);
;
	.dbg	line, "main.c", 684
	lda     #$07
;
; else
;
	.dbg	line, "main.c", 686
	jmp     L1A85
;
; fade_to_black();
;
	.dbg	line, "main.c", 689
L0D60:	jsr     _fade_to_black
;
; go_to_state(STATE_OPTIONS);
;
	.dbg	line, "main.c", 690
	lda     #$03
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 691
	jsr     _fade_from_black
;
; break;
;
	.dbg	line, "main.c", 706
	jmp     L1AD7
;
; if (tick_count % 128 == 0)
;
	.dbg	line, "main.c", 899
L1A97:	lda     _tick_count
	and     #$7F
	bne     L1A98
;
; multi_vram_buffer_horz(text_push_start, sizeof(text_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 901
	jsr     decsp3
	lda     #<(_text_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text_push_start)
;
; else if (tick_count % 128 == 96)
;
	.dbg	line, "main.c", 903
	jmp     L1AF2
L1A98:	lda     _tick_count
	and     #$7F
	cmp     #$60
	bne     L1A99
;
; multi_vram_buffer_horz(clear_push_start, sizeof(clear_push_start) - 1, get_ppu_addr(0, 12 << 3, 12 << 3));
;
	.dbg	line, "main.c", 905
	jsr     decsp3
	lda     #<(_clear_push_start)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clear_push_start)
L1AF2:	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	jsr     decsp2
	tya
	iny
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	jsr     _get_ppu_addr
	jsr     _multi_vram_buffer_horz
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 908
L1A99:	lda     _pad_all_new
	and     #$10
	beq     L1A9D
;
; music_stop();
;
	.dbg	line, "main.c", 910
	jsr     _music_stop
;
; SFX_PLAY_WRAPPER(SOUND_START);
;
	.dbg	line, "main.c", 911
	lda     _sfx_on
	beq     L0D8C
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; fade_to_black();
;
	.dbg	line, "main.c", 913
L0D8C:	jsr     _fade_to_black
;
; ppu_off();
;
	.dbg	line, "main.c", 914
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0, 0));
;
	.dbg	line, "main.c", 915
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	.dbg	line, "main.c", 916
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "main.c", 917
	jsr     _ppu_on_all
;
; fade_from_black();
;
	.dbg	line, "main.c", 918
	jsr     _fade_from_black
;
; if (cur_level == 9 && pad_all & PAD_SELECT)
;
	.dbg	line, "main.c", 921
	lda     _cur_level
	cmp     #$09
	bne     L1A9C
	lda     _pad_all
	and     #$20
	beq     L1A9C
;
; cur_level = 29;
;
	.dbg	line, "main.c", 923
	lda     #$1D
;
; else if (pad_all & PAD_A)
;
	.dbg	line, "main.c", 925
	jmp     L1A87
L1A9C:	lda     _pad_all
	and     #$80
	beq     L0DA6
;
; cur_level += 10;
;
	.dbg	line, "main.c", 927
	lda     #$0A
	clc
	adc     _cur_level
L1A87:	sta     _cur_level
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 929
L0DA6:	lda     #$04
	jsr     _go_to_state
;
; if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 932
L1A9D:	lda     _pad_all_new
	and     #$40
	beq     L1A9E
;
; fade_to_black();
;
	.dbg	line, "main.c", 934
	jsr     _fade_to_black
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 935
	lda     #$02
	jsr     _go_to_state
;
; fade_from_black();
;
	.dbg	line, "main.c", 936
	jsr     _fade_from_black
;
; else if (pad_all_new & PAD_RIGHT)
;
	.dbg	line, "main.c", 938
	jmp     L1AD7
L1A9E:	lda     _pad_all_new
	and     #$01
	jeq     L1AA6
;
; switch (cur_option)
;
	.dbg	line, "main.c", 940
	lda     _cur_option
;
; }
;
	.dbg	line, "main.c", 1006
	beq     L1A9F
	cmp     #$01
	beq     L1AA1
	cmp     #$02
	beq     L1AA2
	cmp     #$03
	beq     L1AA4
	cmp     #$04
	beq     L1AA5
	jmp     L0DB7
;
; if (cur_level < 9)
;
	.dbg	line, "main.c", 945
L1A9F:	lda     _cur_level
	cmp     #$09
	bcs     L1AA0
;
; ++cur_level;
;
	.dbg	line, "main.c", 947
	inc     _cur_level
;
; else
;
	.dbg	line, "main.c", 949
	jmp     L0DB7
;
; cur_level = 0;
;
	.dbg	line, "main.c", 951
L1AA0:	lda     #$00
	sta     _cur_level
;
; break;
;
	.dbg	line, "main.c", 953
	jmp     L0DB7
;
; if (attack_style < ATTACK_NUM - 1)
;
	.dbg	line, "main.c", 959
L1AA1:	lda     _attack_style
	cmp     #$02
	bcs     L0DB7
;
; ++attack_style;
;
	.dbg	line, "main.c", 961
	inc     _attack_style
;
; display_highscore();
;
	.dbg	line, "main.c", 962
	jsr     _display_highscore
;
; break;
;
	.dbg	line, "main.c", 964
	jmp     L0DB7
;
; if (music_on == 0)
;
	.dbg	line, "main.c", 970
L1AA2:	lda     _music_on
	bne     L0DB7
;
; music_on = 1;
;
	.dbg	line, "main.c", 972
	lda     #$01
	sta     _music_on
;
; MUSIC_PLAY_ATTRACT_WRAPPER(MUSIC_TITLE);
;
	.dbg	line, "main.c", 973
	lda     _music_on
	beq     L1AA3
	lda     #$00
	jsr     _music_play
;
; music_pause(0);
;
	.dbg	line, "main.c", 974
	lda     #$00
L1AA3:	jsr     _music_pause
;
; break;
;
	.dbg	line, "main.c", 985
	jmp     L0DB7
;
; if (sfx_on == 0)
;
	.dbg	line, "main.c", 989
L1AA4:	lda     _sfx_on
	bne     L0DB7
;
; sfx_on = 1;
;
	.dbg	line, "main.c", 991
	lda     #$01
	sta     _sfx_on
;
; break;
;
	.dbg	line, "main.c", 993
	jmp     L0DB7
;
; if (hard_drops_on < NUM_HARD_DROP_SETTINGS - 1)
;
	.dbg	line, "main.c", 998
L1AA5:	lda     _hard_drops_on
	cmp     #$02
	bcs     L0DB7
;
; ++hard_drops_on;
;
	.dbg	line, "main.c", 1000
	inc     _hard_drops_on
;
; SFX_PLAY_WRAPPER(SOUND_MENU_HIGH);
;
	.dbg	line, "main.c", 1008
L0DB7:	lda     _sfx_on
	beq     L0DDF
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1009
L0DDF:	jsr     _display_options
;
; else if (pad_all_new & PAD_LEFT)
;
	.dbg	line, "main.c", 1011
	jmp     L1AD7
L1AA6:	lda     _pad_all_new
	and     #$02
	beq     L1AAD
;
; switch (cur_option)
;
	.dbg	line, "main.c", 1013
	lda     _cur_option
;
; }
;
	.dbg	line, "main.c", 1087
	beq     L1AA7
	cmp     #$01
	beq     L1AA9
	cmp     #$02
	beq     L1AAA
	cmp     #$03
	beq     L1AAB
	cmp     #$04
	beq     L1AAC
	jmp     L0DEB
;
; if (cur_level != 0)
;
	.dbg	line, "main.c", 1018
L1AA7:	lda     _cur_level
	beq     L1AA8
;
; --cur_level;
;
	.dbg	line, "main.c", 1020
	dec     _cur_level
;
; else
;
	.dbg	line, "main.c", 1022
	jmp     L0DEB
;
; cur_level = 9;
;
	.dbg	line, "main.c", 1024
L1AA8:	lda     #$09
	sta     _cur_level
;
; break;
;
	.dbg	line, "main.c", 1026
	jmp     L0DEB
;
; if (attack_style != 0)
;
	.dbg	line, "main.c", 1035
L1AA9:	lda     _attack_style
	beq     L0DEB
;
; --attack_style;
;
	.dbg	line, "main.c", 1037
	dec     _attack_style
;
; display_highscore();
;
	.dbg	line, "main.c", 1038
	jsr     _display_highscore
;
; break;
;
	.dbg	line, "main.c", 1041
	jmp     L0DEB
;
; if (music_on != 0)
;
	.dbg	line, "main.c", 1050
L1AAA:	lda     _music_on
	beq     L0DEB
;
; music_on = 0;
;
	.dbg	line, "main.c", 1052
	lda     #$00
	sta     _music_on
;
; music_pause(1);
;
	.dbg	line, "main.c", 1053
	lda     #$01
	jsr     _music_pause
;
; music_stop();
;
	.dbg	line, "main.c", 1054
	jsr     _music_stop
;
; break;
;
	.dbg	line, "main.c", 1066
	jmp     L0DEB
;
; if (sfx_on != 0)
;
	.dbg	line, "main.c", 1070
L1AAB:	lda     _sfx_on
	beq     L0DEB
;
; sfx_on = 0;
;
	.dbg	line, "main.c", 1072
	lda     #$00
	sta     _sfx_on
;
; break;
;
	.dbg	line, "main.c", 1074
	jmp     L0DEB
;
; if (hard_drops_on != 0)
;
	.dbg	line, "main.c", 1078
L1AAC:	lda     _hard_drops_on
	beq     L0DEB
;
; --hard_drops_on;
;
	.dbg	line, "main.c", 1080
	dec     _hard_drops_on
;
; SFX_PLAY_WRAPPER(SOUND_MENU_LOW);
;
	.dbg	line, "main.c", 1089
L0DEB:	lda     _sfx_on
	beq     L0E0F
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1090
L0E0F:	jsr     _display_options
;
; else if (pad_all_new & PAD_DOWN)
;
	.dbg	line, "main.c", 1092
	jmp     L1AD7
L1AAD:	lda     _pad_all_new
	and     #$04
	beq     L1AAE
;
; cur_option = (cur_option + 1) % NUM_OPTIONS;
;
	.dbg	line, "main.c", 1094
	ldx     #$00
	lda     _cur_option
	clc
	adc     #$01
	bcc     L0E1C
	inx
L0E1C:	jsr     pushax
	lda     #$05
	jsr     tosumoda0
	sta     _cur_option
;
; SFX_PLAY_WRAPPER(SOUND_MENU_LOW);
;
	.dbg	line, "main.c", 1095
	lda     _sfx_on
	beq     L0E1D
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1096
L0E1D:	jsr     _display_options
;
; else if (pad_all_new & PAD_UP)
;
	.dbg	line, "main.c", 1098
	jmp     L1AD7
L1AAE:	lda     _pad_all_new
	ldx     #$00
	and     #$08
	jeq     L1AD7
;
; if (cur_option == 0)
;
	.dbg	line, "main.c", 1100
	lda     _cur_option
	bne     L1AAF
;
; cur_option = NUM_OPTIONS;
;
	.dbg	line, "main.c", 1102
	lda     #$05
	sta     _cur_option
;
; cur_option = (cur_option - 1) % NUM_OPTIONS;
;
	.dbg	line, "main.c", 1104
L1AAF:	lda     _cur_option
	sec
	sbc     #$01
	bcs     L0E2E
	dex
L0E2E:	jsr     pushax
	lda     #$05
	jsr     tosumoda0
	sta     _cur_option
;
; SFX_PLAY_WRAPPER(SOUND_MENU_HIGH);
;
	.dbg	line, "main.c", 1105
	lda     _sfx_on
	beq     L0E2F
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; display_options();
;
	.dbg	line, "main.c", 1106
L0E2F:	jsr     _display_options
;
; break;
;
	.dbg	line, "main.c", 1109
	jmp     L1AD7
;
; if (hit_reaction_remaining > 0)
;
	.dbg	line, "main.c", 1114
L1AB0:	lda     _hit_reaction_remaining
	beq     L1AB1
;
; --hit_reaction_remaining;
;
	.dbg	line, "main.c", 1116
	dec     _hit_reaction_remaining
;
; if (row_to_clear >= 0)
;
	.dbg	line, "main.c", 1119
L1AB1:	ldx     _row_to_clear
	bmi     L1AB2
;
; --attack_row_status[row_to_clear];
;
	.dbg	line, "main.c", 1122
	lda     #<(_attack_row_status)
	ldx     #>(_attack_row_status)
	clc
	adc     _row_to_clear
	bcc     L0E41
	inx
L0E41:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (attack_row_status[row_to_clear] == 0)
;
	.dbg	line, "main.c", 1123
	ldy     _row_to_clear
	lda     _attack_row_status,y
	bne     L1AB2
;
; row_to_clear = -1;
;
	.dbg	line, "main.c", 1125
	lda     #$FF
	sta     _row_to_clear
;
; if (attack_style != ATTACK_NEVER && attack_queued)
;
	.dbg	line, "main.c", 1130
L1AB2:	lda     _attack_style
	cmp     #$02
	beq     L0E49
	lda     _attack_queued
	beq     L0E49
;
; add_block_at_bottom();
;
	.dbg	line, "main.c", 1134
	jsr     _add_block_at_bottom
;
; clear_rows_in_data(BOARD_END_Y_PX_BOARD);
;
	.dbg	line, "main.c", 1136
	lda     #$17
	jsr     _clear_rows_in_data
;
; attack_queued = 0;
;
	.dbg	line, "main.c", 1137
	lda     #$00
	sta     _attack_queued
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 1138
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; if (kill_row_queued)
;
	.dbg	line, "main.c", 1141
L0E49:	lda     _kill_row_queued
	beq     L1AB5
;
; add_row_at_bottom();
;
	.dbg	line, "main.c", 1143
	jsr     _add_row_at_bottom
;
; kill_row_queued = 0;
;
	.dbg	line, "main.c", 1144
	lda     #$00
	sta     _kill_row_queued
;
; if (delay_spawn_remaining != -1)
;
	.dbg	line, "main.c", 1149
L1AB5:	lda     _delay_spawn_remaining
	cmp     #$FF
	beq     L0E59
;
; if (horz_button_delay > 0)
;
	.dbg	line, "main.c", 1153
	lda     _horz_button_delay
	beq     L1AB6
;
; --horz_button_delay;
;
	.dbg	line, "main.c", 1155
	dec     _horz_button_delay
;
; --delay_spawn_remaining;
;
	.dbg	line, "main.c", 1157
L1AB6:	dec     _delay_spawn_remaining
;
; if (delay_spawn_remaining == 0)
;
	.dbg	line, "main.c", 1158
	bne     L0E67
;
; spawn_new_cluster();
;
	.dbg	line, "main.c", 1160
	jsr     _spawn_new_cluster
;
; delay_lock_remaining = -1;
;
	.dbg	line, "main.c", 1161
	lda     #$FF
	sta     _delay_lock_remaining
;
; else
;
	.dbg	line, "main.c", 1164
	jmp     L0E67
;
; movement();
;
	.dbg	line, "main.c", 1166
L0E59:	jsr     _movement
;
; draw_gameplay_sprites();
;
	.dbg	line, "main.c", 1171
L0E67:	jsr     _draw_gameplay_sprites
;
; if (attack_style == ATTACK_ON_TIME && attack_queue_ticks_remaining != 0)
;
	.dbg	line, "main.c", 1175
	lda     _attack_style
	cmp     #$01
	bne     L0E71
	lda     _attack_queue_ticks_remaining
	ora     _attack_queue_ticks_remaining+1
	beq     L1ADC
;
; --attack_queue_ticks_remaining;
;
	.dbg	line, "main.c", 1177
	lda     _attack_queue_ticks_remaining
	sec
	sbc     #$01
	sta     _attack_queue_ticks_remaining
	bcs     L0E70
	dec     _attack_queue_ticks_remaining+1
;
; if (attack_queue_ticks_remaining == 0)
;
	.dbg	line, "main.c", 1179
L0E70:	lda     _attack_queue_ticks_remaining
	ora     _attack_queue_ticks_remaining+1
	bne     L0E71
;
; attack_queued = 1;
;
	.dbg	line, "main.c", 1181
	lda     #$01
	sta     _attack_queued
;
; attack_queue_ticks_remaining = attack_delay;
;
	.dbg	line, "main.c", 1182
	lda     _attack_delay+1
	sta     _attack_queue_ticks_remaining+1
	lda     _attack_delay
	sta     _attack_queue_ticks_remaining
;
; local_t = 0;
;
	.dbg	line, "main.c", 1192
L0E71:	lda     #$00
L1ADC:	sta     _local_t
	sta     _local_t+1
;
; for (local_iy = 0; local_iy < STRESS_MUSIC_LEVEL * 10; ++local_iy)
;
	.dbg	line, "main.c", 1193
	sta     _local_iy
L1ABC:	lda     _local_iy
	cmp     #$46
	bcs     L0E7B
;
; if (game_board[local_iy + ((BOARD_OOB_END + 1) * 10)] != 0)
;
	.dbg	line, "main.c", 1195
	ldx     #$00
	lda     _local_iy
	clc
	adc     #$28
	bcc     L0E87
	inx
L0E87:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	lda     (ptr1),y
	beq     L1ABD
;
; local_t = 1;
;
	.dbg	line, "main.c", 1198
	ldx     #$00
	lda     #$01
	sta     _local_t
	stx     _local_t+1
;
; if (cur_gameplay_music == MUSIC_GAMEPLAY)
;
	.dbg	line, "main.c", 1200
	lda     _cur_gameplay_music
	cmp     #$01
	bne     L1ABD
;
; cur_gameplay_music = MUSIC_STRESS;
;
	.dbg	line, "main.c", 1202
	lda     #$02
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(MUSIC_STRESS);
;
	.dbg	line, "main.c", 1203
	lda     _music_on
	beq     L0E7B
	lda     #$02
	jsr     _music_play
;
; break;
;
	.dbg	line, "main.c", 1204
	jmp     L0E7B
;
; for (local_iy = 0; local_iy < STRESS_MUSIC_LEVEL * 10; ++local_iy)
;
	.dbg	line, "main.c", 1193
L1ABD:	inc     _local_iy
	jmp     L1ABC
;
; if (local_t == 0 && cur_gameplay_music == MUSIC_STRESS)
;
	.dbg	line, "main.c", 1209
L0E7B:	lda     _local_t
	ora     _local_t+1
	bne     L1ABF
	lda     _cur_gameplay_music
	cmp     #$02
	bne     L1ABF
;
; cur_gameplay_music = MUSIC_GAMEPLAY;
;
	.dbg	line, "main.c", 1211
	lda     #$01
	sta     _cur_gameplay_music
;
; MUSIC_PLAY_WRAPPER(MUSIC_GAMEPLAY);
;
	.dbg	line, "main.c", 1212
	lda     _music_on
	beq     L1ABF
	lda     #$01
	jsr     _music_play
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 1218
L1ABF:	lda     _pad_all_new
	and     #$10
	jeq     L1AD7
;
; go_to_state(STATE_PAUSE);
;
	.dbg	line, "main.c", 1220
	lda     #$05
;
; break;
;
	.dbg	line, "main.c", 1241
	jmp     L1A85
;
; oam_clear();
;
	.dbg	line, "main.c", 1247
L0EA4:	jsr     _oam_clear
;
; if (pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 1258
	lda     _pad_all_new
	and     #$10
	jeq     L1AD7
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 1260
	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 1262
	jmp     L1A85
;
; if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1277
L1AC0:	lda     _pad_all_new
	and     #$40
	beq     L1AC1
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 1280
	lda     #$02
	jsr     _go_to_state
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1282
L1AC1:	lda     _pad_all_new
	and     #$80
	jeq     L1AD7
;
; go_to_state(STATE_GAME);
;
	.dbg	line, "main.c", 1285
	lda     #$04
;
; break;
;
	.dbg	line, "main.c", 1289
	jmp     L1A85
;
; if (pad_all_new & PAD_DOWN && test_song < 15)
;
	.dbg	line, "main.c", 1298
L1AC2:	lda     _pad_all_new
	and     #$04
	beq     L1AC6
	lda     _test_song
	cmp     #$0F
	bcs     L1AC6
;
; ++test_song;
;
	.dbg	line, "main.c", 1300
	inc     _test_song
;
; else if (pad_all_new & PAD_UP && test_song > 0)
;
	.dbg	line, "main.c", 1303
	jmp     L1A88
L1AC6:	lda     _pad_all_new
	and     #$08
	beq     L1ACA
	lda     _test_song
	beq     L1ACA
;
; --test_song;
;
	.dbg	line, "main.c", 1305
	dec     _test_song
;
; display_song();
;
	.dbg	line, "main.c", 1306
L1A88:	jsr     _display_song
;
; if (pad_all_new & PAD_B)
;
	.dbg	line, "main.c", 1309
L1ACA:	lda     _pad_all_new
	and     #$40
	beq     L1ACC
;
; if (test_song == test_song_active)
;
	.dbg	line, "main.c", 1311
	lda     _test_song_active
	cmp     _test_song
	bne     L1ACB
;
; test_song_active = 0xff;
;
	.dbg	line, "main.c", 1313
	lda     #$FF
	sta     _test_song_active
;
; music_stop();
;
	.dbg	line, "main.c", 1314
	jsr     _music_stop
;
; else
;
	.dbg	line, "main.c", 1316
	jmp     L1ACC
;
; test_song_active = test_song;
;
	.dbg	line, "main.c", 1318
L1ACB:	lda     _test_song
	sta     _test_song_active
;
; music_play(test_song);
;
	.dbg	line, "main.c", 1320
	lda     _test_song
	jsr     _music_play
;
; if (pad_all_new & PAD_RIGHT && test_sound < 31)
;
	.dbg	line, "main.c", 1327
L1ACC:	lda     _pad_all_new
	and     #$01
	beq     L1AD0
	lda     _test_sound
	cmp     #$1F
	bcs     L1AD0
;
; ++test_sound;
;
	.dbg	line, "main.c", 1329
	inc     _test_sound
;
; else if (pad_all_new & PAD_LEFT && test_sound > 0)
;
	.dbg	line, "main.c", 1332
	jmp     L1A89
L1AD0:	lda     _pad_all_new
	and     #$02
	beq     L1AD4
	lda     _test_sound
	beq     L1AD4
;
; --test_sound;
;
	.dbg	line, "main.c", 1334
	dec     _test_sound
;
; display_sound();
;
	.dbg	line, "main.c", 1335
L1A89:	jsr     _display_sound
;
; if (pad_all_new & PAD_A)
;
	.dbg	line, "main.c", 1338
L1AD4:	lda     _pad_all_new
	and     #$80
	beq     L1AD5
;
; sfx_play(test_sound, 0);
;
	.dbg	line, "main.c", 1341
	lda     _test_sound
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (pad_all_new & PAD_SELECT || pad_all_new & PAD_START)
;
	.dbg	line, "main.c", 1347
L1AD5:	lda     _pad_all_new
	and     #$20
	bne     L1AD6
	lda     _pad_all_new
	and     #$10
	beq     L1AD7
;
; go_to_state(STATE_MENU);
;
	.dbg	line, "main.c", 1349
L1AD6:	lda     #$02
L1A85:	jsr     _go_to_state
;
; if (screen_shake_remaining > 0)
;
	.dbg	line, "main.c", 1536
L1AD7:	lda     _screen_shake_remaining
	beq     L1AD9
;
; --screen_shake_remaining;
;
	.dbg	line, "main.c", 1538
	dec     _screen_shake_remaining
;
; scroll((rand() % 2), scroll_y - (rand() % 2));
;
	.dbg	line, "main.c", 1539
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	jsr     pushax
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	jsr     tossubax
	jsr     _scroll
;
; else
;
	.dbg	line, "main.c", 1541
	jmp     L0CFE
;
; scroll(0, scroll_y); // shift the bg down 1 pixel
;
	.dbg	line, "main.c", 1543
L1AD9:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; while (1)
;
	.dbg	line, "main.c", 446
	jmp     L0CFE
	.dbg	line

.endproc

